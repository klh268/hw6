Issue: Non-terminating state

Modules:
  bag: C:\Python310\Lib\site-packages\harmony_model_checker\modules\bag.hny
  game: game_broken.hny
  set: C:\Python310\Lib\site-packages\harmony_model_checker\modules\set.hny
  __main__: teamsDummy.hny
  synch: C:\Python310\Lib\site-packages\harmony_model_checker\modules\synch.hny
  list: C:\Python310\Lib\site-packages\harmony_model_checker\modules\list.hny

================================================
Running thread T0: __init__()
mode:  runnable atomic
stack: ['[]']
state id: 1
================================================

Step 1:
  program counter:   0
  hvm code:          Frame __init__()
  explanation:       pop argument () and run method "__init__"
  module:            __main__
  start statement:   line=1 column=1
  end statement:     line=16 column=10
  source code:       from game import * 
  call trace:        __init__()
  stack:             [{:}]

Step 2:
  program counter:   1
  hvm code:          Jump 54
  explanation:       jump over method definition: set program counter to 54
  module:            list
  start statement:   line=2 column=1
  end statement:     line=2 column=35
  source code:       def subseq(s, b, e) returns result:
                     ^^^

Step 3:
  program counter:   54
  hvm code:          Push PC(57)
  explanation:       push constant PC(57)
  start statement:   line=11 column=1
  end statement:     line=11 column=24
  source code:       builtin tail "list$tail"
                             ^^^^
  stack:             [{:}, PC(57)]

Step 4:
  program counter:   55
  hvm code:          Builtin(list$tail)
  explanation:       pop pc () and bind to built-in method list$tail
  source code:       builtin tail "list$tail"
                     ^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 5:
  program counter:   56
  hvm code:          Jump 602
  explanation:       jump over method definition: set program counter to 602
  start statement:   line=12 column=1
  end statement:     line=12 column=27
  source code:       def tail(s) returns result:
                     ^^^

Step 6:
  program counter:   602
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  module:            bag
  start statement:   line=15 column=1
  end statement:     line=15 column=39
  source code:       builtin multiplicity "bag$multiplicity"
                             ^^^^^^^^^^^^
  stack:             [{:}, PC(605)]

Step 7:
  program counter:   603
  hvm code:          Builtin(bag$multiplicity)
  explanation:       pop pc () and bind to built-in method bag$multiplicity
  source code:       builtin multiplicity "bag$multiplicity"
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 8:
  program counter:   604
  hvm code:          Jump 624
  explanation:       jump over method definition: set program counter to 624
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^

Step 9:
  program counter:   624
  hvm code:          Push PC(627)
  explanation:       push constant PC(627)
  start statement:   line=22 column=1
  end statement:     line=22 column=23
  source code:       builtin size "bag$size"
                             ^^^^
  stack:             [{:}, PC(627)]

Step 10:
  program counter:   625
  hvm code:          Builtin(bag$size)
  explanation:       pop pc () and bind to built-in method bag$size
  source code:       builtin size "bag$size"
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 11:
  program counter:   626
  hvm code:          Jump 646
  explanation:       jump over method definition: set program counter to 646
  start statement:   line=23 column=1
  end statement:     line=23 column=27
  source code:       def size(bg) returns count:
                     ^^^

Step 12:
  program counter:   646
  hvm code:          Push PC(649)
  explanation:       push constant PC(649)
  start statement:   line=28 column=1
  end statement:     line=28 column=23
  source code:       builtin bmin "bag$bmin"
                             ^^^^
  stack:             [{:}, PC(649)]

Step 13:
  program counter:   647
  hvm code:          Builtin(bag$bmin)
  explanation:       pop pc () and bind to built-in method bag$bmin
  source code:       builtin bmin "bag$bmin"
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 14:
  program counter:   648
  hvm code:          Jump 665
  explanation:       jump over method definition: set program counter to 665
  start statement:   line=29 column=1
  end statement:     line=29 column=27
  source code:       def bmin(bg) returns count:
                     ^^^

Step 15:
  program counter:   665
  hvm code:          Push PC(668)
  explanation:       push constant PC(668)
  start statement:   line=33 column=1
  end statement:     line=33 column=23
  source code:       builtin bmax "bag$bmax"
                             ^^^^
  stack:             [{:}, PC(668)]

Step 16:
  program counter:   666
  hvm code:          Builtin(bag$bmax)
  explanation:       pop pc () and bind to built-in method bag$bmax
  source code:       builtin bmax "bag$bmax"
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 17:
  program counter:   667
  hvm code:          Jump 693
  explanation:       jump over method definition: set program counter to 693
  start statement:   line=34 column=1
  end statement:     line=34 column=27
  source code:       def bmax(bg) returns count:
                     ^^^

Step 18:
  program counter:   693
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  start statement:   line=41 column=1
  end statement:     line=41 column=21
  source code:       builtin add "bag$add"
                             ^^^
  stack:             [{:}, PC(696)]

Step 19:
  program counter:   694
  hvm code:          Builtin(bag$add)
  explanation:       pop pc () and bind to built-in method bag$add
  source code:       builtin add "bag$add"
                     ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 20:
  program counter:   695
  hvm code:          Jump 722
  explanation:       jump over method definition: set program counter to 722
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^

Step 21:
  program counter:   722
  hvm code:          Push PC(725)
  explanation:       push constant PC(725)
  start statement:   line=49 column=1
  end statement:     line=49 column=27
  source code:       builtin remove "bag$remove"
                             ^^^^^^
  stack:             [{:}, PC(725)]

Step 22:
  program counter:   723
  hvm code:          Builtin(bag$remove)
  explanation:       pop pc () and bind to built-in method bag$remove
  source code:       builtin remove "bag$remove"
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 23:
  program counter:   724
  hvm code:          Jump 2014
  explanation:       jump over method definition: set program counter to 2014
  start statement:   line=50 column=1
  end statement:     line=50 column=35
  source code:       def remove(bg, elt) returns result:
                     ^^^

Step 24:
  program counter:   2014
  hvm code:          Push ()
  explanation:       push constant ()
  module:            __main__
  start statement:   line=4 column=1
  end statement:     line=4 column=16
  source code:       thegame = Game()
                                   ^^
  stack:             [{:}, []]

Step 25:
  program counter:   2015
  hvm code:          Apply PC(1587)
  explanation:       pop an argument ([]) and call method (1587: "Game")
  source code:       thegame = Game()
                               ^^^^^^
  call trace:        __init__() --> Game()
  stack:             [{:}, [], 32242, []]

Step 26:
  program counter:   1587
  hvm code:          Frame Game()
  explanation:       pop argument () and run method "Game"
  module:            game
  start statement:   line=4 column=1
  end statement:     line=4 column=24
  source code:       def Game() returns game:
                     ^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}]

Step 27:
  program counter:   1588
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=5 column=5
  end statement:     line=7 column=44
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, {:}]

Step 28:
  program counter:   1589
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, {:}, "waiting"]

Step 29:
  program counter:   1590
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, {:}, "waiting", []]

Step 30:
  program counter:   1591
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ([], "waiting", {:}); add key/value pair to dictionary; push result ({ "waiting": [] })
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "waiting": [] }]

Step 31:
  program counter:   1592
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "waiting": [] }, "team1"]

Step 32:
  program counter:   1593
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "waiting": [] }, "team1", {}]

Step 33:
  program counter:   1594
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ({}, "team1", { "waiting": [] }); add key/value pair to dictionary; push result ({ "team1": {}, "waiting": [] })
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "waiting": [] }]

Step 34:
  program counter:   1595
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "waiting": [] }, "team2"]

Step 35:
  program counter:   1596
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "waiting": [] }, "team2", {}]

Step 36:
  program counter:   1597
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ({}, "team2", { "team1": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "team1": {}, "team2": {}, "waiting": [] })
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }]

Step 37:
  program counter:   1598
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock"]

Step 38:
  program counter:   1599
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", []]

Step 39:
  program counter:   1600
  hvm code:          Apply PC(931)
  explanation:       pop an argument ([]) and call method (931: "Lock")
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  call trace:        __init__() --> Game() --> Lock()
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, []]

Step 40:
  program counter:   931
  hvm code:          Frame Lock()
  explanation:       pop argument () and run method "Lock"
  module:            synch
  start statement:   line=25 column=1
  end statement:     line=25 column=26
  source code:       def Lock() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}]

Step 41:
  program counter:   932
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=26 column=5
  end statement:     line=26 column=27
  source code:       result = BinSema(False)
                                      ^^^^^

Step 42:
  program counter:   933
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=26 column=22
  end expression:    line=26 column=26
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, False]

Step 43:
  program counter:   934
  hvm code:          Apply PC(912)
  explanation:       pop an argument (False) and call method (912: "BinSema")
  source code:       result = BinSema(False)
                              ^^^^^^^^^^^^^^
  call trace:        __init__() --> Game() --> Lock() --> BinSema(False)
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, False]

Step 44:
  program counter:   912
  hvm code:          Frame BinSema(initial)
  explanation:       pop argument (False), assign to initial, and run method "BinSema"
  start statement:   line=21 column=1
  end statement:     line=21 column=34
  source code:       def BinSema(initial) returns sema:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { initial: False }
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}]

Step 45:
  program counter:   913
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 1 to 2: remains atomic
  start statement:   line=22 column=5
  end statement:     line=22 column=37
  source code:       assert initial in { False, True }
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 46:
  program counter:   914
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=22 column=5
  end expression:    line=22 column=37

Step 47:
  program counter:   915
  hvm code:          LoadVar initial
  explanation:       push value (False) of variable "initial"
  source code:       assert initial in { False, True }
                            ^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False]

Step 48:
  program counter:   916
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       assert initial in { False, True }
                                         ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False, {}]

Step 49:
  program counter:   917
  hvm code:          Push False
  explanation:       push constant False
  source code:       assert initial in { False, True }
                                         ^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False, {}, False]

Step 50:
  program counter:   918
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (False, {}); insert first value into the second; push result ({ False })
  source code:       assert initial in { False, True }
                                         ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False, { False }]

Step 51:
  program counter:   919
  hvm code:          Push True
  explanation:       push constant True
  source code:       assert initial in { False, True }
                                                ^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False, { False }, True]

Step 52:
  program counter:   920
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })
  source code:       assert initial in { False, True }
                                         ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False, { False, True }]

Step 53:
  program counter:   921
  hvm code:          2-ary in
  explanation:       pop 2 values ({ False, True }, False); check if the second value is a member of the first; push result (True)
  source code:       assert initial in { False, True }
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, True]

Step 54:
  program counter:   922
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert initial in { False, True }
                     ^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}]

Step 55:
  program counter:   923
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert initial in { False, True }
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 56:
  program counter:   924
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 2 to 1: remains atomic
  start expression:  line=22 column=5
  end expression:    line=22 column=37

Step 57:
  program counter:   925
  hvm code:          LoadVar initial
  explanation:       push value (False) of variable "initial"
  start statement:   line=23 column=5
  end statement:     line=23 column=18
  source code:       sema = initial
                            ^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}, False]

Step 58:
  program counter:   926
  hvm code:          DelVar initial
  explanation:       delete method variable initial
  start expression:  line=23 column=12
  end expression:    line=23 column=18
  method variables:  { }

Step 59:
  program counter:   927
  hvm code:          StoreVar sema
  explanation:       pop value (False) and store locally in variable \"sema\"
  source code:       sema = initial
                     ^^^^^^
  method variables:  { sema: False }
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, [], 14946, {:}]

Step 60:
  program counter:   928
  hvm code:          ReturnOp(sema)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=21 column=1
  end statement:     line=21 column=34
  source code:       def BinSema(initial) returns sema:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game() --> Lock()
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}, False]

Step 61:
  program counter:   935
  hvm code:          StoreVar result
  explanation:       pop value (False) and store locally in variable \"result\"
  start statement:   line=26 column=5
  end statement:     line=26 column=27
  source code:       result = BinSema(False)
                     ^^^^^^^^
  method variables:  { result: False }
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", [], 25602, {:}]

Step 62:
  program counter:   936
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=25 column=1
  end statement:     line=25 column=26
  source code:       def Lock() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game()
  stack:             [{:}, [], 32242, {:}, { "team1": {}, "team2": {}, "waiting": [] }, "lock", False]

Step 63:
  program counter:   1601
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values (False, "lock", { "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "lock": False, "team1": {}, "team2": {}, "waiting": [] })
  module:            game
  start statement:   line=5 column=5
  end statement:     line=7 column=44
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }]

Step 64:
  program counter:   1602
  hvm code:          Push "active_game"
  explanation:       push constant "active_game"
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game"]

Step 65:
  program counter:   1603
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", []]

Step 66:
  program counter:   1604
  hvm code:          Apply PC(989)
  explanation:       pop an argument ([]) and call method (989: "Condition")
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, []]

Step 67:
  program counter:   989
  hvm code:          Frame Condition()
  explanation:       pop argument () and run method "Condition"
  module:            synch
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}]

Step 68:
  program counter:   990
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                              ^^^^^^^^^

Step 69:
  program counter:   991
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  start expression:  line=44 column=14
  end expression:    line=44 column=22
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, PC(541)]

Step 70:
  program counter:   992
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       result = bag.empty()
                                       ^^
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, PC(541), []]

Step 71:
  program counter:   993
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       result = bag.empty()
                              ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, ?PC(541)[[]]]

Step 72:
  program counter:   994
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=44 column=14
  end expression:    line=44 column=24
  call trace:        __init__() --> Game() --> Condition() --> empty()
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, [], 15906, []]

Step 73:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, [], 15906, {:}]

Step 74:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, [], 15906, {:}, {:}]

Step 75:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, [], 15906, {:}]

Step 76:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}, {:}]

Step 77:
  program counter:   995
  hvm code:          StoreVar result
  explanation:       pop value ({:}) and store locally in variable \"result\"
  module:            synch
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                     ^^^^^^^^
  method variables:  { result: {:} }
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", [], 25666, {:}]

Step 78:
  program counter:   996
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game()
  stack:             [{:}, [], 32242, {:}, { "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "active_game", {:}]

Step 79:
  program counter:   1605
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ({:}, "active_game", { "lock": False, "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] })
  module:            game
  start statement:   line=5 column=5
  end statement:     line=7 column=44
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }]

Step 80:
  program counter:   1606
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players"]

Step 81:
  program counter:   1607
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", []]

Step 82:
  program counter:   1608
  hvm code:          Apply PC(989)
  explanation:       pop an argument ([]) and call method (989: "Condition")
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, []]

Step 83:
  program counter:   989
  hvm code:          Frame Condition()
  explanation:       pop argument () and run method "Condition"
  module:            synch
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}]

Step 84:
  program counter:   990
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                              ^^^^^^^^^

Step 85:
  program counter:   991
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  start expression:  line=44 column=14
  end expression:    line=44 column=22
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, PC(541)]

Step 86:
  program counter:   992
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       result = bag.empty()
                                       ^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, PC(541), []]

Step 87:
  program counter:   993
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       result = bag.empty()
                              ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, ?PC(541)[[]]]

Step 88:
  program counter:   994
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=44 column=14
  end expression:    line=44 column=24
  call trace:        __init__() --> Game() --> Condition() --> empty()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, [], 15906, []]

Step 89:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, [], 15906, {:}]

Step 90:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, [], 15906, {:}, {:}]

Step 91:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, [], 15906, {:}]

Step 92:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}, {:}]

Step 93:
  program counter:   995
  hvm code:          StoreVar result
  explanation:       pop value ({:}) and store locally in variable \"result\"
  module:            synch
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                     ^^^^^^^^
  method variables:  { result: {:} }
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", [], 25730, {:}]

Step 94:
  program counter:   996
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }, "players", {:}]

Step 95:
  program counter:   1609
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ({:}, "players", { "active_game": {:}, "lock": False, "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] })
  module:            game
  start statement:   line=5 column=5
  end statement:     line=7 column=44
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }]

Step 96:
  program counter:   1610
  hvm code:          Push "complete_game"
  explanation:       push constant "complete_game"
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game"]

Step 97:
  program counter:   1611
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", []]

Step 98:
  program counter:   1612
  hvm code:          Apply PC(989)
  explanation:       pop an argument ([]) and call method (989: "Condition")
  source code:       .active_game: Condition(), .players: Condition(), .complete_game: Condition(), 
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, []]

Step 99:
  program counter:   989
  hvm code:          Frame Condition()
  explanation:       pop argument () and run method "Condition"
  module:            synch
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}]

Step 100:
  program counter:   990
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                              ^^^^^^^^^

Step 101:
  program counter:   991
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  start expression:  line=44 column=14
  end expression:    line=44 column=22
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, PC(541)]

Step 102:
  program counter:   992
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       result = bag.empty()
                                       ^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, PC(541), []]

Step 103:
  program counter:   993
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       result = bag.empty()
                              ^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, ?PC(541)[[]]]

Step 104:
  program counter:   994
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=44 column=14
  end expression:    line=44 column=24
  call trace:        __init__() --> Game() --> Condition() --> empty()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, [], 15906, []]

Step 105:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, [], 15906, {:}]

Step 106:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, [], 15906, {:}, {:}]

Step 107:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, [], 15906, {:}]

Step 108:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game() --> Condition()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}, {:}]

Step 109:
  program counter:   995
  hvm code:          StoreVar result
  explanation:       pop value ({:}) and store locally in variable \"result\"
  module:            synch
  start statement:   line=44 column=5
  end statement:     line=44 column=24
  source code:       result = bag.empty()
                     ^^^^^^^^
  method variables:  { result: {:} }
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", [], 25794, {:}]

Step 110:
  program counter:   996
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=43 column=1
  end statement:     line=43 column=31
  source code:       def Condition() returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__() --> Game()
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "complete_game", {:}]

Step 111:
  program counter:   1613
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ({:}, "complete_game", { "active_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "active_game": {:}, "complete_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] })
  module:            game
  start statement:   line=5 column=5
  end statement:     line=7 column=44
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }]

Step 112:
  program counter:   1614
  hvm code:          Push "game_headcount"
  explanation:       push constant "game_headcount"
  source code:       .game_headcount: 0, .exited: []}
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "game_headcount"]

Step 113:
  program counter:   1615
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       .game_headcount: 0, .exited: []}
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "game_headcount", 0]

Step 114:
  program counter:   1616
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values (0, "game_headcount", { "active_game": {:}, "complete_game": {:}, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "active_game": {:}, "complete_game": {:}, "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] })
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }]

Step 115:
  program counter:   1617
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       .game_headcount: 0, .exited: []}
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "exited"]

Step 116:
  program counter:   1618
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       .game_headcount: 0, .exited: []}
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }, "exited", []]

Step 117:
  program counter:   1619
  hvm code:          3-ary DictAdd
  explanation:       pop 3 values ([], "exited", { "active_game": {:}, "complete_game": {:}, "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }); add key/value pair to dictionary; push result ({ "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] })
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  stack:             [{:}, [], 32242, {:}, { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }]

Step 118:
  program counter:   1620
  hvm code:          StoreVar game
  explanation:       pop value ({ "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }) and store locally in variable \"game\"
  source code:       game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), 
  method variables:  { game: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] } }
  stack:             [{:}, [], 32242, {:}]

Step 119:
  program counter:   1621
  hvm code:          ReturnOp(game)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=4 column=1
  end statement:     line=4 column=24
  source code:       def Game() returns game:
                     ^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        __init__()
  stack:             [{:}, { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }]

Step 120:
  program counter:   2016
  hvm code:          Store thegame
  explanation:       pop value ({ "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }) and store into variable thegame
  module:            __main__
  start statement:   line=4 column=1
  end statement:     line=4 column=16
  source code:       thegame = Game()
                     ^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] } }
  stack:             [{:}]

Step 121:
  program counter:   2017
  hvm code:          Jump 2047
  explanation:       jump over method definition: set program counter to 2047
  start statement:   line=5 column=1
  end statement:     line=5 column=17
  source code:       def player(self):
                     ^^^

Step 122:
  program counter:   2047
  hvm code:          Push ?PC(1624)
  explanation:       push constant ?PC(1624)
  start statement:   line=12 column=1
  end statement:     line=12 column=35
  source code:       spawn eternal game_umpire(?thegame)
                                   ^^^^^^^^^^^
  stack:             [{:}, ?PC(1624)]

Step 123:
  program counter:   2048
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       spawn eternal game_umpire(?thegame)
                                                ^^^^^^^
  stack:             [{:}, ?PC(1624), ?thegame]

Step 124:
  program counter:   2049
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (?thegame, ?PC(1624)); push result (?PC(1624)[?thegame])
  source code:       spawn eternal game_umpire(?thegame)
                                   ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?PC(1624)[?thegame]]

Step 125:
  program counter:   2050
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn eternal game_umpire(?thegame)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?PC(1624)[?thegame], {:}]

Step 126:
  program counter:   2051
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg (?thegame), and pc (1624: "game_umpire"), and spawn thread
  start expression:  line=12 column=1
  end expression:    line=12 column=35
  stack:             [{:}]

Step 127:
  program counter:   2052
  hvm code:          Push 1
  explanation:       push constant 1
  start statement:   line=14 column=1
  end statement:     line=14 column=26
  source code:       for id in { 1 .. NPLAYERS}:
                                 ^
  stack:             [{:}, 1]

Step 128:
  program counter:   2053
  hvm code:          Push 4
  explanation:       push constant 4
  source code:       for id in { 1 .. NPLAYERS}:
                                      ^^^^^^^^
  stack:             [{:}, 1, 4]

Step 129:
  program counter:   2054
  hvm code:          2-ary ..
  explanation:       pop 2 values (4, 1); range of integers; push result ({ 1, 2, 3, 4 })
  source code:       for id in { 1 .. NPLAYERS}:
                                 ^^^^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }]

Step 130:
  program counter:   2055
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       for id in { 1 .. NPLAYERS}:
                     ^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 0]

Step 131:
  program counter:   2056
  hvm code:          Cut(id)
  explanation:       pop index (0) and value ({ 1, 2, 3, 4 }); assign value (1) to id; push new index (1) and True
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  method variables:  { id: 1 }
  stack:             [{:}, { 1, 2, 3, 4 }, 1, True]

Step 132:
  program counter:   2057
  hvm code:          JumpCond False 2065
  explanation:       pop value (True), compare to False, and jump to 2065 if the same
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  stack:             [{:}, { 1, 2, 3, 4 }, 1]

Step 133:
  program counter:   2058
  hvm code:          Push ?PC(2018)
  explanation:       push constant ?PC(2018)
  start statement:   line=15 column=5
  end statement:     line=15 column=20
  source code:       spawn player(id)
                           ^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 1, ?PC(2018)]

Step 134:
  program counter:   2059
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  source code:       spawn player(id)
                                  ^^
  stack:             [{:}, { 1, 2, 3, 4 }, 1, ?PC(2018), 1]

Step 135:
  program counter:   2060
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=15 column=18
  end expression:    line=15 column=19
  method variables:  { }

Step 136:
  program counter:   2061
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (1, ?PC(2018)); push result (?PC(2018)[1])
  source code:       spawn player(id)
                           ^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 1, ?PC(2018)[1]]

Step 137:
  program counter:   2062
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn player(id)
                     ^^^^^^^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 1, ?PC(2018)[1], {:}]

Step 138:
  program counter:   2063
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg (1), and pc (2018: "player"), and spawn thread
  start expression:  line=15 column=5
  end expression:    line=15 column=20
  stack:             [{:}, { 1, 2, 3, 4 }, 1]

Step 139:
  program counter:   2064
  hvm code:          Jump 2056
  explanation:       set program counter to 2056
  start statement:   line=14 column=1
  end statement:     line=14 column=26
  source code:       for id in { 1 .. NPLAYERS}:
                                              ^

Step 140:
  program counter:   2056
  hvm code:          Cut(id)
  explanation:       pop index (1) and value ({ 1, 2, 3, 4 }); assign value (2) to id; push new index (2) and True
  source code:       for id in { 1 .. NPLAYERS}:
                     ^^^
  method variables:  { id: 2 }
  stack:             [{:}, { 1, 2, 3, 4 }, 2, True]

Step 141:
  program counter:   2057
  hvm code:          JumpCond False 2065
  explanation:       pop value (True), compare to False, and jump to 2065 if the same
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  stack:             [{:}, { 1, 2, 3, 4 }, 2]

Step 142:
  program counter:   2058
  hvm code:          Push ?PC(2018)
  explanation:       push constant ?PC(2018)
  start statement:   line=15 column=5
  end statement:     line=15 column=20
  source code:       spawn player(id)
                           ^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 2, ?PC(2018)]

Step 143:
  program counter:   2059
  hvm code:          LoadVar id
  explanation:       push value (2) of variable "id"
  source code:       spawn player(id)
                                  ^^
  stack:             [{:}, { 1, 2, 3, 4 }, 2, ?PC(2018), 2]

Step 144:
  program counter:   2060
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=15 column=18
  end expression:    line=15 column=19
  method variables:  { }

Step 145:
  program counter:   2061
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (2, ?PC(2018)); push result (?PC(2018)[2])
  source code:       spawn player(id)
                           ^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 2, ?PC(2018)[2]]

Step 146:
  program counter:   2062
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn player(id)
                     ^^^^^^^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 2, ?PC(2018)[2], {:}]

Step 147:
  program counter:   2063
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg (2), and pc (2018: "player"), and spawn thread
  start expression:  line=15 column=5
  end expression:    line=15 column=20
  stack:             [{:}, { 1, 2, 3, 4 }, 2]

Step 148:
  program counter:   2064
  hvm code:          Jump 2056
  explanation:       set program counter to 2056
  start statement:   line=14 column=1
  end statement:     line=14 column=26
  source code:       for id in { 1 .. NPLAYERS}:
                                              ^

Step 149:
  program counter:   2056
  hvm code:          Cut(id)
  explanation:       pop index (2) and value ({ 1, 2, 3, 4 }); assign value (3) to id; push new index (3) and True
  source code:       for id in { 1 .. NPLAYERS}:
                     ^^^
  method variables:  { id: 3 }
  stack:             [{:}, { 1, 2, 3, 4 }, 3, True]

Step 150:
  program counter:   2057
  hvm code:          JumpCond False 2065
  explanation:       pop value (True), compare to False, and jump to 2065 if the same
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  stack:             [{:}, { 1, 2, 3, 4 }, 3]

Step 151:
  program counter:   2058
  hvm code:          Push ?PC(2018)
  explanation:       push constant ?PC(2018)
  start statement:   line=15 column=5
  end statement:     line=15 column=20
  source code:       spawn player(id)
                           ^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 3, ?PC(2018)]

Step 152:
  program counter:   2059
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       spawn player(id)
                                  ^^
  stack:             [{:}, { 1, 2, 3, 4 }, 3, ?PC(2018), 3]

Step 153:
  program counter:   2060
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=15 column=18
  end expression:    line=15 column=19
  method variables:  { }

Step 154:
  program counter:   2061
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (3, ?PC(2018)); push result (?PC(2018)[3])
  source code:       spawn player(id)
                           ^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 3, ?PC(2018)[3]]

Step 155:
  program counter:   2062
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn player(id)
                     ^^^^^^^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 3, ?PC(2018)[3], {:}]

Step 156:
  program counter:   2063
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg (3), and pc (2018: "player"), and spawn thread
  start expression:  line=15 column=5
  end expression:    line=15 column=20
  stack:             [{:}, { 1, 2, 3, 4 }, 3]

Step 157:
  program counter:   2064
  hvm code:          Jump 2056
  explanation:       set program counter to 2056
  start statement:   line=14 column=1
  end statement:     line=14 column=26
  source code:       for id in { 1 .. NPLAYERS}:
                                              ^

Step 158:
  program counter:   2056
  hvm code:          Cut(id)
  explanation:       pop index (3) and value ({ 1, 2, 3, 4 }); assign value (4) to id; push new index (4) and True
  source code:       for id in { 1 .. NPLAYERS}:
                     ^^^
  method variables:  { id: 4 }
  stack:             [{:}, { 1, 2, 3, 4 }, 4, True]

Step 159:
  program counter:   2057
  hvm code:          JumpCond False 2065
  explanation:       pop value (True), compare to False, and jump to 2065 if the same
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  stack:             [{:}, { 1, 2, 3, 4 }, 4]

Step 160:
  program counter:   2058
  hvm code:          Push ?PC(2018)
  explanation:       push constant ?PC(2018)
  start statement:   line=15 column=5
  end statement:     line=15 column=20
  source code:       spawn player(id)
                           ^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 4, ?PC(2018)]

Step 161:
  program counter:   2059
  hvm code:          LoadVar id
  explanation:       push value (4) of variable "id"
  source code:       spawn player(id)
                                  ^^
  stack:             [{:}, { 1, 2, 3, 4 }, 4, ?PC(2018), 4]

Step 162:
  program counter:   2060
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=15 column=18
  end expression:    line=15 column=19
  method variables:  { }

Step 163:
  program counter:   2061
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (4, ?PC(2018)); push result (?PC(2018)[4])
  source code:       spawn player(id)
                           ^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 4, ?PC(2018)[4]]

Step 164:
  program counter:   2062
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn player(id)
                     ^^^^^^^^^^^^^^^^
  stack:             [{:}, { 1, 2, 3, 4 }, 4, ?PC(2018)[4], {:}]

Step 165:
  program counter:   2063
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg (4), and pc (2018: "player"), and spawn thread
  start expression:  line=15 column=5
  end expression:    line=15 column=20
  stack:             [{:}, { 1, 2, 3, 4 }, 4]

Step 166:
  program counter:   2064
  hvm code:          Jump 2056
  explanation:       set program counter to 2056
  start statement:   line=14 column=1
  end statement:     line=14 column=26
  source code:       for id in { 1 .. NPLAYERS}:
                                              ^

Step 167:
  program counter:   2056
  hvm code:          Cut(id)
  explanation:       pop index (4) and value ({ 1, 2, 3, 4 }); out of range -> push False
  source code:       for id in { 1 .. NPLAYERS}:
                     ^^^
  stack:             [{:}, False]

Step 168:
  program counter:   2057
  hvm code:          JumpCond False 2065
  explanation:       pop value (False), compare to False, and jump to 2065 if the same
  start expression:  line=14 column=1
  end expression:    line=14 column=3
  stack:             [{:}]

Step 169:
  program counter:   2065
  hvm code:          DelVar id
  explanation:       delete method variable id
  start statement:   line=1 column=1
  end statement:     line=16 column=10
  source code:       from game import * 

Step 170:
  program counter:   2066
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start expression:  line=1 column=1
  end expression:    line=16 column=10
  new mode:          terminated
  stack:             [None]

================================================
Running thread T2: player(1)
mode:  runnable
stack: ['1']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1624 runnable game_umpire(?thegame)
    about to run method game_umpire with argument ?thegame
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T4: pc=2018 runnable player(3)
    about to run method player with argument 3
  T5: pc=2018 runnable player(4)
    about to run method player with argument 4
shared variables:
  thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": {:}, "team1": {}, "team2": {}, "waiting": [] }
state id: 2
================================================

Step 171:
  program counter:   2018
  hvm code:          Frame player(self)
  explanation:       pop argument (1), assign to self, and run method "player"
  start statement:   line=5 column=1
  end statement:     line=5 column=17
  source code:       def player(self):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { self: 1 }
  call trace:        player(1)
  stack:             [{:}]

Step 172:
  program counter:   2019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 173:
  program counter:   2020
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                     ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 174:
  program counter:   2021
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 175:
  program counter:   2022
  hvm code:          LoadVar self
  explanation:       push value (1) of variable "self"
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                              ^^^^
  stack:             [{:}, [ ?thegame ], 1]

Step 176:
  program counter:   2023
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, [?thegame]); insert first value into the second; push result ([?thegame, 1])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 1 ]]

Step 177:
  program counter:   2024
  hvm code:          Apply PC(1779)
  explanation:       pop an argument ([?thegame, 1]) and call method (1779: "game_join")
  source code:       let (team1, team2) = game_join(?thegame, self):
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, [ ?thegame, 1 ]]

Step 178:
  program counter:   1779
  hvm code:          Frame game_join(g, id)
  explanation:       pop argument ([?thegame, 1]), assign to (g, id), and run method "game_join"
  module:            game
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 179:
  program counter:   1780
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 180:
  program counter:   1781
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "lock"]

Step 181:
  program counter:   1782
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["lock"]]

Step 182:
  program counter:   1783
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, ?thegame["lock"]]

Step 183:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }]

Step 184:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(1) --> game_join(?thegame, 1) --> acquire(?thegame["lock"])

Step 185:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 186:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 187:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }, False]

Step 188:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }, True]

Step 189:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }]

Step 190:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 191:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 192:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 193:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 194:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }, ?thegame["lock"], True]

Step 195:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": {:}, "team1": {}, "team2": {}, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 28530, { "g": ?thegame, "id": 1 }]

Step 196:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 197:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, None]

Step 198:
  program counter:   1784
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 199:
  program counter:   1785
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=40 column=5
  end statement:     line=40 column=35
  source code:       g->waiting = g->waiting + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 200:
  program counter:   1786
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "waiting"]

Step 201:
  program counter:   1787
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"]]

Step 202:
  program counter:   1788
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->waiting = g->waiting + [id,]
                                  ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], ?thegame]

Step 203:
  program counter:   1789
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], ?thegame, "waiting"]

Step 204:
  program counter:   1790
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], ?thegame["waiting"]]

Step 205:
  program counter:   1791
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([])
  start expression:  line=40 column=18
  end expression:    line=40 column=27
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], []]

Step 206:
  program counter:   1792
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], [], []]

Step 207:
  program counter:   1793
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  source code:       g->waiting = g->waiting + [id,]
                                                ^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], [], [], 1]

Step 208:
  program counter:   1794
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, []); insert first value into the second; push result ([1])
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], [], [ 1 ]]

Step 209:
  program counter:   1795
  hvm code:          2-ary +
  explanation:       pop 2 values ([1], []); concatenate the lists; push result ([1])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["waiting"], [ 1 ]]

Step 210:
  program counter:   1796
  hvm code:          Store
  explanation:       pop value ([1]) and address (?thegame["waiting"]) and store
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": {:}, "team1": {}, "team2": {}, "waiting": [ 1 ] } }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 211:
  program counter:   1797
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=43 column=5
  end statement:     line=43 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 212:
  program counter:   1798
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team1"]

Step 213:
  program counter:   1799
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team1"]]

Step 214:
  program counter:   1800
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=43 column=13
  end expression:    line=43 column=20
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, {}]

Step 215:
  program counter:   1801
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0]

Step 216:
  program counter:   1802
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, 0]

Step 217:
  program counter:   1803
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, True]

Step 218:
  program counter:   1804
  hvm code:          JumpCond False 1813
  explanation:       pop value (True), compare to False, and jump to 1813 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 219:
  program counter:   1805
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                      ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 220:
  program counter:   1806
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                         ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team2"]

Step 221:
  program counter:   1807
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                      ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team2"]]

Step 222:
  program counter:   1808
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=43 column=38
  end expression:    line=43 column=45
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, {}]

Step 223:
  program counter:   1809
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                  ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0]

Step 224:
  program counter:   1810
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                                   ^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, 0]

Step 225:
  program counter:   1811
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, True]

Step 226:
  program counter:   1812
  hvm code:          Jump 1814
  explanation:       set program counter to 1814
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                             ^^^

Step 227:
  program counter:   1814
  hvm code:          JumpCond False 1820
  explanation:       pop value (True), compare to False, and jump to 1820 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 228:
  program counter:   1815
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=44 column=9
  end statement:     line=44 column=31
  source code:       notify(?g->active_game)
                             ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 229:
  program counter:   1816
  hvm code:          Push "active_game"
  explanation:       push constant "active_game"
  source code:       notify(?g->active_game)
                                ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "active_game"]

Step 230:
  program counter:   1817
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("active_game", ?thegame); push result (?thegame["active_game"])
  source code:       notify(?g->active_game)
                             ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["active_game"]]

Step 231:
  program counter:   1818
  hvm code:          Apply PC(1067)
  explanation:       pop an argument (?thegame["active_game"]) and call method (1067: "notify")
  source code:       notify(?g->active_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> notify(?thegame["active_game"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, ?thegame["active_game"]]

Step 232:
  program counter:   1067
  hvm code:          Frame notify(c)
  explanation:       pop argument (?thegame["active_game"]), assign to c, and run method "notify"
  module:            synch
  start statement:   line=56 column=1
  end statement:     line=56 column=14
  source code:       def notify(c):
                     ^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }]

Step 233:
  program counter:   1068
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=57 column=16
  end statement:     line=59 column=6
  source code:       atomically if !c != bag.empty():
  call trace:        player(1) --> game_join(?thegame, 1) --> notify(?thegame["active_game"])

Step 234:
  program counter:   1069
  hvm code:          LoadVar c
  explanation:       push value (?thegame["active_game"]) of variable "c"
  start statement:   line=57 column=16
  end statement:     line=57 column=36
  source code:       atomically if !c != bag.empty():
                                    ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, ?thegame["active_game"]]

Step 235:
  program counter:   1070
  hvm code:          Load
  explanation:       pop address (?thegame["active_game"]) and push value ({:})
  source code:       atomically if !c != bag.empty():
                                   ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}]

Step 236:
  program counter:   1071
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  source code:       atomically if !c != bag.empty():
                                         ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, PC(541)]

Step 237:
  program counter:   1072
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       atomically if !c != bag.empty():
                                                  ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, PC(541), []]

Step 238:
  program counter:   1073
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       atomically if !c != bag.empty():
                                         ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, ?PC(541)[[]]]

Step 239:
  program counter:   1074
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=57 column=25
  end expression:    line=57 column=35
  call trace:        player(1) --> game_join(?thegame, 1) --> notify(?thegame["active_game"]) --> empty()
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, [], 17186, []]

Step 240:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, [], 17186, { "c": ?thegame["active_game"] }]

Step 241:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, [], 17186, { "c": ?thegame["active_game"] }, {:}]

Step 242:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, [], 17186, { "c": ?thegame["active_game"] }]

Step 243:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"] }
  call trace:        player(1) --> game_join(?thegame, 1) --> notify(?thegame["active_game"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, {:}, {:}]

Step 244:
  program counter:   1075
  hvm code:          2-ary !=
  explanation:       pop 2 values ({:}, {:}); check if the values are unequal; push result (False)
  module:            synch
  start statement:   line=57 column=16
  end statement:     line=57 column=36
  source code:       atomically if !c != bag.empty():
                                   ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }, False]

Step 245:
  program counter:   1076
  hvm code:          JumpCond False 1093
  explanation:       pop value (False), compare to False, and jump to 1093 if the same
  source code:       atomically if !c != bag.empty():
                                ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29090, { "g": ?thegame, "id": 1 }]

Step 246:
  program counter:   1093
  hvm code:          DelVar c
  explanation:       delete method variable c
  source code:       atomically if !c != bag.empty():
                                ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }

Step 247:
  program counter:   1094
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start expression:  line=57 column=16
  end expression:    line=57 column=36

Step 248:
  program counter:   1095
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=56 column=1
  end statement:     line=56 column=14
  source code:       def notify(c):
                     ^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, None]

Step 249:
  program counter:   1819
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=44 column=9
  end statement:     line=44 column=31
  source code:       notify(?g->active_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 250:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 251:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team1"]

Step 252:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team1"]]

Step 253:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, {}]

Step 254:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0]

Step 255:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, ?thegame]

Step 256:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, ?thegame, "team2"]

Step 257:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, ?thegame["team2"]]

Step 258:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, 0, {}]

Step 259:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, 0]

Step 260:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 0); check if the values are unequal; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, False]

Step 261:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 262:
  program counter:   1832
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 263:
  program counter:   1833
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                       ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team1"]

Step 264:
  program counter:   1834
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team1"]]

Step 265:
  program counter:   1835
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=48 column=52
  end expression:    line=48 column=59
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, {}]

Step 266:
  program counter:   1836
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 0]

Step 267:
  program counter:   1837
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, 0, 0]

Step 268:
  program counter:   1838
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, True]

Step 269:
  program counter:   1839
  hvm code:          JumpCond True 1858
  explanation:       pop value (True), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 270:
  program counter:   1858
  hvm code:          Push True
  explanation:       push constant True
  start expression:  line=48 column=11
  end expression:    line=48 column=117
  stack:             [{:}, [], 32386, { "self": 1 }, True]

Step 271:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (True), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 272:
  program counter:   1860
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, []]

Step 273:
  program counter:   1861
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                           ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame]

Step 274:
  program counter:   1862
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       wait(?g->players, ?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame, "players"]

Step 275:
  program counter:   1863
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("players", ?thegame); push result (?thegame["players"])
  source code:       wait(?g->players, ?g->lock)
                           ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame["players"]]

Step 276:
  program counter:   1864
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["players"], []); insert first value into the second; push result ([?thegame["players"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ ?thegame["players"] ]]

Step 277:
  program counter:   1865
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                                        ^
  stack:             [{:}, [], 32386, { "self": 1 }, [ ?thegame["players"] ], ?thegame]

Step 278:
  program counter:   1866
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       wait(?g->players, ?g->lock)
                                           ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ ?thegame["players"] ], ?thegame, "lock"]

Step 279:
  program counter:   1867
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       wait(?g->players, ?g->lock)
                                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ ?thegame["players"] ], ?thegame["lock"]]

Step 280:
  program counter:   1868
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["lock"], [?thegame["players"]]); insert first value into the second; push result ([?thegame["players"], ?thegame["lock"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ ?thegame["players"], ?thegame["lock"] ]]

Step 281:
  program counter:   1869
  hvm code:          Apply PC(998)
  explanation:       pop an argument ([?thegame["players"], ?thegame["lock"]]) and call method (998: "wait")
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, [ ?thegame["players"], ?thegame["lock"] ]]

Step 282:
  program counter:   998
  hvm code:          Frame wait(c, lk)
  explanation:       pop argument ([?thegame["players"], ?thegame["lock"]]), assign to (c, lk), and run method "wait"
  module:            synch
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 283:
  program counter:   999
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=47 column=5
  end statement:     line=47 column=15
  source code:       var cnt = 0
                               ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, 0]

Step 284:
  program counter:   1000
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  source code:       var cnt = 0
                     ^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 285:
  program counter:   1001
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start statement:   line=48 column=5
  end statement:     line=48 column=24
  source code:       let (), ctx = save():
                                       ^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }

Step 286:
  program counter:   1002
  hvm code:          Push ()
  explanation:       push constant ()
  start expression:  line=48 column=23
  end expression:    line=48 column=24
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, []]

Step 287:
  program counter:   1003
  hvm code:          Save
  explanation:       pop a value and save context
  source code:       let (), ctx = save():
                                   ^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, [ [], CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 288:
  program counter:   1004
  hvm code:          Continue
  explanation:       a no-op, must follow a Stop or Save operation
  start expression:  line=48 column=19
  end expression:    line=48 column=24

Step 289:
  program counter:   1005
  hvm code:          StoreVar ((), ctx)
  explanation:       pop value ([[], CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]) and store locally in variable \"((), ctx)\"
  source code:       let (), ctx = save():
                     ^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 290:
  program counter:   1006
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])

Step 291:
  program counter:   1007
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605)]

Step 292:
  program counter:   1008
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), []]

Step 293:
  program counter:   1009
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                             ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [], ?thegame["players"]]

Step 294:
  program counter:   1010
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [], {:}]

Step 295:
  program counter:   1011
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:} ]]

Step 296:
  program counter:   1012
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])) of variable "ctx"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 297:
  program counter:   1013
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 298:
  program counter:   1014
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])], PC(605)); push result (?PC(605)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]])
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?PC(605)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 299:
  program counter:   1015
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]) and call method (605: "multiplicity")
  start expression:  line=50 column=19
  end expression:    line=50 column=43
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]))
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, [], 16242, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 300:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, 0]

Step 301:
  program counter:   1016
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  module:            synch
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                     ^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 302:
  program counter:   1017
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                      ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"]]

Step 303:
  program counter:   1018
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696)]

Step 304:
  program counter:   1019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), []]

Step 305:
  program counter:   1020
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       !c = bag.add(!c, ctx)
                                   ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), [], ?thegame["players"]]

Step 306:
  program counter:   1021
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       !c = bag.add(!c, ctx)
                                  ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), [], {:}]

Step 307:
  program counter:   1022
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), [ {:} ]]

Step 308:
  program counter:   1023
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])) of variable "ctx"
  source code:       !c = bag.add(!c, ctx)
                                      ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 309:
  program counter:   1024
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], PC(696), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 310:
  program counter:   1025
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])], PC(696)); push result (?PC(696)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]])
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], ?PC(696)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 311:
  program counter:   1026
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]) and call method (696: "add")
  start expression:  line=51 column=18
  end expression:    line=51 column=33
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"]) --> add({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]))
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], [], 16418, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 312:
  program counter:   696
  hvm code:          Frame add(bg, elt)
  explanation:       start of method add
  module:            bag
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["players"], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 313:
  program counter:   1027
  hvm code:          Store
  explanation:       pop value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }) and address (?thegame["players"]) and store
  module:            synch
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                     ^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1 ] } }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 314:
  program counter:   1028
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=52 column=13
  end statement:     line=52 column=23
  source code:       !lk = False
                      ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 315:
  program counter:   1029
  hvm code:          Push False
  explanation:       push constant False
  source code:       !lk = False
                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["lock"], False]

Step 316:
  program counter:   1030
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !lk = False
                     ^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1 ] } }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 317:
  program counter:   1031
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^

================================================
Running thread T4: player(3)
mode:  runnable
stack: ['3']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1624 runnable game_umpire(?thegame)
    about to run method game_umpire with argument ?thegame
  T2: pc=1032 blocked player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T5: pc=2018 runnable player(4)
    about to run method player with argument 4
shared variables:
  thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1 ] }
state id: 742
================================================

Step 318:
  program counter:   2018
  hvm code:          Frame player(self)
  explanation:       pop argument (3), assign to self, and run method "player"
  module:            __main__
  start statement:   line=5 column=1
  end statement:     line=5 column=17
  source code:       def player(self):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { self: 3 }
  call trace:        player(3)
  stack:             [{:}]

Step 319:
  program counter:   2019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 320:
  program counter:   2020
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                     ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 321:
  program counter:   2021
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 322:
  program counter:   2022
  hvm code:          LoadVar self
  explanation:       push value (3) of variable "self"
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                              ^^^^
  stack:             [{:}, [ ?thegame ], 3]

Step 323:
  program counter:   2023
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, [?thegame]); insert first value into the second; push result ([?thegame, 3])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 3 ]]

Step 324:
  program counter:   2024
  hvm code:          Apply PC(1779)
  explanation:       pop an argument ([?thegame, 3]) and call method (1779: "game_join")
  source code:       let (team1, team2) = game_join(?thegame, self):
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, [ ?thegame, 3 ]]

Step 325:
  program counter:   1779
  hvm code:          Frame game_join(g, id)
  explanation:       pop argument ([?thegame, 3]), assign to (g, id), and run method "game_join"
  module:            game
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 326:
  program counter:   1780
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 327:
  program counter:   1781
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "lock"]

Step 328:
  program counter:   1782
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["lock"]]

Step 329:
  program counter:   1783
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, ?thegame["lock"]]

Step 330:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }]

Step 331:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(3) --> game_join(?thegame, 3) --> acquire(?thegame["lock"])

Step 332:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 333:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 334:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }, False]

Step 335:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }, True]

Step 336:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }]

Step 337:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 338:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 339:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 340:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 341:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }, ?thegame["lock"], True]

Step 342:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1 ] } }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 28530, { "g": ?thegame, "id": 3 }]

Step 343:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 344:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, None]

Step 345:
  program counter:   1784
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 346:
  program counter:   1785
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=40 column=5
  end statement:     line=40 column=35
  source code:       g->waiting = g->waiting + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 347:
  program counter:   1786
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "waiting"]

Step 348:
  program counter:   1787
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"]]

Step 349:
  program counter:   1788
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->waiting = g->waiting + [id,]
                                  ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], ?thegame]

Step 350:
  program counter:   1789
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], ?thegame, "waiting"]

Step 351:
  program counter:   1790
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], ?thegame["waiting"]]

Step 352:
  program counter:   1791
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([1])
  start expression:  line=40 column=18
  end expression:    line=40 column=27
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], [ 1 ]]

Step 353:
  program counter:   1792
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], [ 1 ], []]

Step 354:
  program counter:   1793
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       g->waiting = g->waiting + [id,]
                                                ^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], [ 1 ], [], 3]

Step 355:
  program counter:   1794
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, []); insert first value into the second; push result ([3])
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], [ 1 ], [ 3 ]]

Step 356:
  program counter:   1795
  hvm code:          2-ary +
  explanation:       pop 2 values ([3], [1]); concatenate the lists; push result ([1, 3])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["waiting"], [ 1, 3 ]]

Step 357:
  program counter:   1796
  hvm code:          Store
  explanation:       pop value ([1, 3]) and address (?thegame["waiting"]) and store
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1, 3 ] } }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 358:
  program counter:   1797
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=43 column=5
  end statement:     line=43 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 359:
  program counter:   1798
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team1"]

Step 360:
  program counter:   1799
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team1"]]

Step 361:
  program counter:   1800
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=43 column=13
  end expression:    line=43 column=20
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, {}]

Step 362:
  program counter:   1801
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0]

Step 363:
  program counter:   1802
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, 0]

Step 364:
  program counter:   1803
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 365:
  program counter:   1804
  hvm code:          JumpCond False 1813
  explanation:       pop value (True), compare to False, and jump to 1813 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 366:
  program counter:   1805
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                      ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 367:
  program counter:   1806
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                         ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team2"]

Step 368:
  program counter:   1807
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                      ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team2"]]

Step 369:
  program counter:   1808
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=43 column=38
  end expression:    line=43 column=45
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, {}]

Step 370:
  program counter:   1809
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                  ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0]

Step 371:
  program counter:   1810
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                                   ^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, 0]

Step 372:
  program counter:   1811
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 373:
  program counter:   1812
  hvm code:          Jump 1814
  explanation:       set program counter to 1814
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                             ^^^

Step 374:
  program counter:   1814
  hvm code:          JumpCond False 1820
  explanation:       pop value (True), compare to False, and jump to 1820 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 375:
  program counter:   1815
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=44 column=9
  end statement:     line=44 column=31
  source code:       notify(?g->active_game)
                             ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 376:
  program counter:   1816
  hvm code:          Push "active_game"
  explanation:       push constant "active_game"
  source code:       notify(?g->active_game)
                                ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "active_game"]

Step 377:
  program counter:   1817
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("active_game", ?thegame); push result (?thegame["active_game"])
  source code:       notify(?g->active_game)
                             ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["active_game"]]

Step 378:
  program counter:   1818
  hvm code:          Apply PC(1067)
  explanation:       pop an argument (?thegame["active_game"]) and call method (1067: "notify")
  source code:       notify(?g->active_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> notify(?thegame["active_game"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, ?thegame["active_game"]]

Step 379:
  program counter:   1067
  hvm code:          Frame notify(c)
  explanation:       pop argument (?thegame["active_game"]), assign to c, and run method "notify"
  module:            synch
  start statement:   line=56 column=1
  end statement:     line=56 column=14
  source code:       def notify(c):
                     ^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }]

Step 380:
  program counter:   1068
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=57 column=16
  end statement:     line=59 column=6
  source code:       atomically if !c != bag.empty():
  call trace:        player(3) --> game_join(?thegame, 3) --> notify(?thegame["active_game"])

Step 381:
  program counter:   1069
  hvm code:          LoadVar c
  explanation:       push value (?thegame["active_game"]) of variable "c"
  start statement:   line=57 column=16
  end statement:     line=57 column=36
  source code:       atomically if !c != bag.empty():
                                    ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, ?thegame["active_game"]]

Step 382:
  program counter:   1070
  hvm code:          Load
  explanation:       pop address (?thegame["active_game"]) and push value ({:})
  source code:       atomically if !c != bag.empty():
                                   ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}]

Step 383:
  program counter:   1071
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  source code:       atomically if !c != bag.empty():
                                         ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, PC(541)]

Step 384:
  program counter:   1072
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       atomically if !c != bag.empty():
                                                  ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, PC(541), []]

Step 385:
  program counter:   1073
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       atomically if !c != bag.empty():
                                         ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, ?PC(541)[[]]]

Step 386:
  program counter:   1074
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=57 column=25
  end expression:    line=57 column=35
  call trace:        player(3) --> game_join(?thegame, 3) --> notify(?thegame["active_game"]) --> empty()
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, [], 17186, []]

Step 387:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, [], 17186, { "c": ?thegame["active_game"] }]

Step 388:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, [], 17186, { "c": ?thegame["active_game"] }, {:}]

Step 389:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, [], 17186, { "c": ?thegame["active_game"] }]

Step 390:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"] }
  call trace:        player(3) --> game_join(?thegame, 3) --> notify(?thegame["active_game"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, {:}, {:}]

Step 391:
  program counter:   1075
  hvm code:          2-ary !=
  explanation:       pop 2 values ({:}, {:}); check if the values are unequal; push result (False)
  module:            synch
  start statement:   line=57 column=16
  end statement:     line=57 column=36
  source code:       atomically if !c != bag.empty():
                                   ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }, False]

Step 392:
  program counter:   1076
  hvm code:          JumpCond False 1093
  explanation:       pop value (False), compare to False, and jump to 1093 if the same
  source code:       atomically if !c != bag.empty():
                                ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29090, { "g": ?thegame, "id": 3 }]

Step 393:
  program counter:   1093
  hvm code:          DelVar c
  explanation:       delete method variable c
  source code:       atomically if !c != bag.empty():
                                ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }

Step 394:
  program counter:   1094
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start expression:  line=57 column=16
  end expression:    line=57 column=36

Step 395:
  program counter:   1095
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=56 column=1
  end statement:     line=56 column=14
  source code:       def notify(c):
                     ^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, None]

Step 396:
  program counter:   1819
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=44 column=9
  end statement:     line=44 column=31
  source code:       notify(?g->active_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 397:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 398:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team1"]

Step 399:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team1"]]

Step 400:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, {}]

Step 401:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0]

Step 402:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, ?thegame]

Step 403:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, ?thegame, "team2"]

Step 404:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, ?thegame["team2"]]

Step 405:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, 0, {}]

Step 406:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, 0]

Step 407:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 0); check if the values are unequal; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, False]

Step 408:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 409:
  program counter:   1832
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 410:
  program counter:   1833
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                       ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team1"]

Step 411:
  program counter:   1834
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team1"]]

Step 412:
  program counter:   1835
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=48 column=52
  end expression:    line=48 column=59
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, {}]

Step 413:
  program counter:   1836
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 0]

Step 414:
  program counter:   1837
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, 0, 0]

Step 415:
  program counter:   1838
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 0); check if both values are the same; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 416:
  program counter:   1839
  hvm code:          JumpCond True 1858
  explanation:       pop value (True), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 417:
  program counter:   1858
  hvm code:          Push True
  explanation:       push constant True
  start expression:  line=48 column=11
  end expression:    line=48 column=117
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 418:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (True), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 419:
  program counter:   1860
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, []]

Step 420:
  program counter:   1861
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                           ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame]

Step 421:
  program counter:   1862
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       wait(?g->players, ?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame, "players"]

Step 422:
  program counter:   1863
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("players", ?thegame); push result (?thegame["players"])
  source code:       wait(?g->players, ?g->lock)
                           ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame["players"]]

Step 423:
  program counter:   1864
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["players"], []); insert first value into the second; push result ([?thegame["players"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ ?thegame["players"] ]]

Step 424:
  program counter:   1865
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                                        ^
  stack:             [{:}, [], 32386, { "self": 3 }, [ ?thegame["players"] ], ?thegame]

Step 425:
  program counter:   1866
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       wait(?g->players, ?g->lock)
                                           ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ ?thegame["players"] ], ?thegame, "lock"]

Step 426:
  program counter:   1867
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       wait(?g->players, ?g->lock)
                                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ ?thegame["players"] ], ?thegame["lock"]]

Step 427:
  program counter:   1868
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["lock"], [?thegame["players"]]); insert first value into the second; push result ([?thegame["players"], ?thegame["lock"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ ?thegame["players"], ?thegame["lock"] ]]

Step 428:
  program counter:   1869
  hvm code:          Apply PC(998)
  explanation:       pop an argument ([?thegame["players"], ?thegame["lock"]]) and call method (998: "wait")
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, [ ?thegame["players"], ?thegame["lock"] ]]

Step 429:
  program counter:   998
  hvm code:          Frame wait(c, lk)
  explanation:       pop argument ([?thegame["players"], ?thegame["lock"]]), assign to (c, lk), and run method "wait"
  module:            synch
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 430:
  program counter:   999
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=47 column=5
  end statement:     line=47 column=15
  source code:       var cnt = 0
                               ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, 0]

Step 431:
  program counter:   1000
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  source code:       var cnt = 0
                     ^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 432:
  program counter:   1001
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start statement:   line=48 column=5
  end statement:     line=48 column=24
  source code:       let (), ctx = save():
                                       ^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }

Step 433:
  program counter:   1002
  hvm code:          Push ()
  explanation:       push constant ()
  start expression:  line=48 column=23
  end expression:    line=48 column=24
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, []]

Step 434:
  program counter:   1003
  hvm code:          Save
  explanation:       pop a value and save context
  source code:       let (), ctx = save():
                                   ^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, [ [], CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 435:
  program counter:   1004
  hvm code:          Continue
  explanation:       a no-op, must follow a Stop or Save operation
  start expression:  line=48 column=19
  end expression:    line=48 column=24

Step 436:
  program counter:   1005
  hvm code:          StoreVar ((), ctx)
  explanation:       pop value ([[], CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]) and store locally in variable \"((), ctx)\"
  source code:       let (), ctx = save():
                     ^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 437:
  program counter:   1006
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])

Step 438:
  program counter:   1007
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605)]

Step 439:
  program counter:   1008
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), []]

Step 440:
  program counter:   1009
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                             ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [], ?thegame["players"]]

Step 441:
  program counter:   1010
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 })
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 442:
  program counter:   1011
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, []); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ]]

Step 443:
  program counter:   1012
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])) of variable "ctx"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 444:
  program counter:   1013
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]), [{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }]); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 445:
  program counter:   1014
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])], PC(605)); push result (?PC(605)[[{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]])
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?PC(605)[[ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 446:
  program counter:   1015
  hvm code:          Load
  explanation:       pop an argument ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]) and call method (605: "multiplicity")
  start expression:  line=50 column=19
  end expression:    line=50 column=43
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]))
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, [], 16242, [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 447:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, 0]

Step 448:
  program counter:   1016
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  module:            synch
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                     ^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 449:
  program counter:   1017
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                      ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"]]

Step 450:
  program counter:   1018
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696)]

Step 451:
  program counter:   1019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), []]

Step 452:
  program counter:   1020
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       !c = bag.add(!c, ctx)
                                   ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), [], ?thegame["players"]]

Step 453:
  program counter:   1021
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 })
  source code:       !c = bag.add(!c, ctx)
                                  ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), [], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 454:
  program counter:   1022
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, []); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ]]

Step 455:
  program counter:   1023
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])) of variable "ctx"
  source code:       !c = bag.add(!c, ctx)
                                      ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 456:
  program counter:   1024
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]), [{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }]); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 457:
  program counter:   1025
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])], PC(696)); push result (?PC(696)[[{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]])
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], ?PC(696)[[ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 458:
  program counter:   1026
  hvm code:          Load
  explanation:       pop an argument ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]) and call method (696: "add")
  start expression:  line=51 column=18
  end expression:    line=51 column=33
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"]) --> add({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]))
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], [], 16418, [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 459:
  program counter:   696
  hvm code:          Frame add(bg, elt)
  explanation:       start of method add
  module:            bag
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["players"], { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 460:
  program counter:   1027
  hvm code:          Store
  explanation:       pop value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]): 1, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]): 1 }) and address (?thegame["players"]) and store
  module:            synch
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                     ^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1, 3 ] } }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 461:
  program counter:   1028
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=52 column=13
  end statement:     line=52 column=23
  source code:       !lk = False
                      ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 462:
  program counter:   1029
  hvm code:          Push False
  explanation:       push constant False
  source code:       !lk = False
                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["lock"], False]

Step 463:
  program counter:   1030
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !lk = False
                     ^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1, 3 ] } }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 464:
  program counter:   1031
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^

================================================
Running thread T1: game_umpire(?thegame)
mode:  runnable
stack: ['?thegame']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T2: pc=1032 blocked player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T4: pc=1032 blocked player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T5: pc=2018 runnable player(4)
    about to run method player with argument 4
shared variables:
  thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1, 3 ] }
state id: 2553
================================================

Step 465:
  program counter:   1624
  hvm code:          Frame game_umpire(g)
  explanation:       pop argument (?thegame), assign to g, and run method "game_umpire"
  module:            game
  start statement:   line=9 column=1
  end statement:     line=9 column=19
  source code:       def game_umpire(g):
                     ^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 466:
  program counter:   1625
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=10 column=5
  end statement:     line=10 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, ?thegame]

Step 467:
  program counter:   1626
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, ?thegame, "lock"]

Step 468:
  program counter:   1627
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, ?thegame["lock"]]

Step 469:
  program counter:   1628
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 26050, ?thegame["lock"]]

Step 470:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 26050, { "g": ?thegame }]

Step 471:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        game_umpire(?thegame) --> acquire(?thegame["lock"])

Step 472:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 473:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }, ?thegame["lock"]]

Step 474:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }, False]

Step 475:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }, True]

Step 476:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }]

Step 477:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 478:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 479:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }, ?thegame["lock"]]

Step 480:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 481:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 26050, { "g": ?thegame }, ?thegame["lock"], True]

Step 482:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": {}, "team2": {}, "waiting": [ 1, 3 ] } }
  stack:             [{:}, [], 26050, { "g": ?thegame }]

Step 483:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 484:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame }
  call trace:        game_umpire(?thegame)
  stack:             [{:}, None]

Step 485:
  program counter:   1629
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=10 column=5
  end statement:     line=10 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 486:
  program counter:   1630
  hvm code:          Push True
  explanation:       push constant True
  start statement:   line=11 column=5
  end statement:     line=11 column=15
  source code:       while True:
                           ^^^^
  stack:             [{:}, True]

Step 487:
  program counter:   1631
  hvm code:          JumpCond False 1771
  explanation:       pop value (True), compare to False, and jump to 1771 if the same
  source code:       while True:
                     ^^^^^
  stack:             [{:}]

Step 488:
  program counter:   1632
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=14 column=9
  end statement:     line=14 column=84
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                ^
  stack:             [{:}, ?thegame]

Step 489:
  program counter:   1633
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                   ^^^^^^^
  stack:             [{:}, ?thegame, "waiting"]

Step 490:
  program counter:   1634
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                ^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"]]

Step 491:
  program counter:   1635
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([1, 3])
  start expression:  line=14 column=20
  end expression:    line=14 column=29
  call trace:        game_umpire(?thegame)
  stack:             [{:}, [ 1, 3 ]]

Step 492:
  program counter:   1636
  hvm code:          1-ary len
  explanation:       pop a value ([1, 3]); compute the length of the list; push result (2)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                            ^^^^^^^^^^^^^^^
  stack:             [{:}, 2]

Step 493:
  program counter:   1637
  hvm code:          Push 2
  explanation:       push constant 2
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                              ^
  stack:             [{:}, 2, 2]

Step 494:
  program counter:   1638
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 2); check if second value is less than the first; push result (False)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                            ^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, False]

Step 495:
  program counter:   1639
  hvm code:          JumpCond True 1656
  explanation:       pop value (False), compare to True, and jump to 1656 if the same
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 496:
  program counter:   1640
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                         ^
  stack:             [{:}, ?thegame]

Step 497:
  program counter:   1641
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                            ^^^^^
  stack:             [{:}, ?thegame, "team1"]

Step 498:
  program counter:   1642
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                         ^^^^^^^^
  stack:             [{:}, ?thegame["team1"]]

Step 499:
  program counter:   1643
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=14 column=45
  end expression:    line=14 column=52
  call trace:        game_umpire(?thegame)
  stack:             [{:}, {}]

Step 500:
  program counter:   1644
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                     ^^^^^^^^^^^^^
  stack:             [{:}, 0]

Step 501:
  program counter:   1645
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                      ^
  stack:             [{:}, 0, 0]

Step 502:
  program counter:   1646
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 0); check if the values are unequal; push result (False)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                     ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, False]

Step 503:
  program counter:   1647
  hvm code:          JumpCond True 1656
  explanation:       pop value (False), compare to True, and jump to 1656 if the same
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 504:
  program counter:   1648
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                                 ^
  stack:             [{:}, ?thegame]

Step 505:
  program counter:   1649
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                                    ^^^^^
  stack:             [{:}, ?thegame, "team2"]

Step 506:
  program counter:   1650
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                                 ^^^^^^^^
  stack:             [{:}, ?thegame["team2"]]

Step 507:
  program counter:   1651
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=14 column=69
  end expression:    line=14 column=76
  call trace:        game_umpire(?thegame)
  stack:             [{:}, {}]

Step 508:
  program counter:   1652
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                             ^^^^^^^^^^^^^
  stack:             [{:}, 0]

Step 509:
  program counter:   1653
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                                              ^
  stack:             [{:}, 0, 0]

Step 510:
  program counter:   1654
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 0); check if the values are unequal; push result (False)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                                             ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, False]

Step 511:
  program counter:   1655
  hvm code:          Jump 1657
  explanation:       set program counter to 1657
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                                 ^^

Step 512:
  program counter:   1657
  hvm code:          JumpCond False 1670
  explanation:       pop value (False), compare to False, and jump to 1670 if the same
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                     ^^^^^
  stack:             [{:}]

Step 513:
  program counter:   1670
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=18 column=9
  end statement:     line=18 column=67
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                             ^
  stack:             [{:}, ?thegame]

Step 514:
  program counter:   1671
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                ^^^^^^^
  stack:             [{:}, ?thegame, "waiting"]

Step 515:
  program counter:   1672
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                             ^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"]]

Step 516:
  program counter:   1673
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([1, 3])
  start expression:  line=18 column=33
  end expression:    line=18 column=42
  call trace:        game_umpire(?thegame)
  stack:             [{:}, [ 1, 3 ]]

Step 517:
  program counter:   1674
  hvm code:          1-ary len
  explanation:       pop a value ([1, 3]); compute the length of the list; push result (2)
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                         ^^^^^^^^^^^^^^^
  stack:             [{:}, 2]

Step 518:
  program counter:   1675
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                                ^
  stack:             [{:}, 2, ?thegame]

Step 519:
  program counter:   1676
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                                   ^^^^^^^
  stack:             [{:}, 2, ?thegame, "waiting"]

Step 520:
  program counter:   1677
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                                ^^^^^^^^^^
  stack:             [{:}, 2, ?thegame["waiting"]]

Step 521:
  program counter:   1678
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([1, 3])
  start expression:  line=18 column=52
  end expression:    line=18 column=61
  call trace:        game_umpire(?thegame)
  stack:             [{:}, 2, [ 1, 3 ]]

Step 522:
  program counter:   1679
  hvm code:          1-ary len
  explanation:       pop a value ([1, 3]); compute the length of the list; push result (2)
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                            ^^^^^^^^^^^^^^^
  stack:             [{:}, 2, 2]

Step 523:
  program counter:   1680
  hvm code:          Push 2
  explanation:       push constant 2
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                                              ^
  stack:             [{:}, 2, 2, 2]

Step 524:
  program counter:   1681
  hvm code:          2-ary %
  explanation:       pop 2 values (2, 2); second value modulo the first; push result (0)
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                                            ^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, 2, 0]

Step 525:
  program counter:   1682
  hvm code:          2-ary -
  explanation:       pop 2 values (0, 2); the second integer minus the first; push result (2)
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, 2]

Step 526:
  program counter:   1683
  hvm code:          StoreVar pairedplayers
  explanation:       pop value (2) and store locally in variable \"pairedplayers\"
  source code:       let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):
                     ^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, pairedplayers: 2 }
  stack:             [{:}]

Step 527:
  program counter:   1684
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=19 column=13
  end statement:     line=19 column=21
  source code:       var i = 0
                             ^
  stack:             [{:}, 0]

Step 528:
  program counter:   1685
  hvm code:          StoreVar i
  explanation:       pop value (0) and store locally in variable \"i\"
  source code:       var i = 0
                     ^^^^^^^^^
  method variables:  { g: ?thegame, i: 0, pairedplayers: 2 }
  stack:             [{:}]

Step 529:
  program counter:   1686
  hvm code:          LoadVar i
  explanation:       push value (0) of variable "i"
  start statement:   line=20 column=13
  end statement:     line=20 column=36
  source code:       while i < pairedplayers:
                           ^
  stack:             [{:}, 0]

Step 530:
  program counter:   1687
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       while i < pairedplayers:
                               ^^^^^^^^^^^^^
  stack:             [{:}, 0, 2]

Step 531:
  program counter:   1688
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 0); check if second value is less than the first; push result (True)
  source code:       while i < pairedplayers:
                           ^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 532:
  program counter:   1689
  hvm code:          JumpCond False 1734
  explanation:       pop value (True), compare to False, and jump to 1734 if the same
  source code:       while i < pairedplayers:
                     ^^^^^
  stack:             [{:}]

Step 533:
  program counter:   1690
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=21 column=17
  end statement:     line=21 column=55
  source code:       g->team1 = add(g->team1, g->waiting[i])
                     ^
  stack:             [{:}, ?thegame]

Step 534:
  program counter:   1691
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                        ^^^^^
  stack:             [{:}, ?thegame, "team1"]

Step 535:
  program counter:   1692
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                     ^^^^^^^^
  stack:             [{:}, ?thegame["team1"]]

Step 536:
  program counter:   1693
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                    ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], []]

Step 537:
  program counter:   1694
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                    ^
  stack:             [{:}, ?thegame["team1"], [], ?thegame]

Step 538:
  program counter:   1695
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                       ^^^^^
  stack:             [{:}, ?thegame["team1"], [], ?thegame, "team1"]

Step 539:
  program counter:   1696
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                    ^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [], ?thegame["team1"]]

Step 540:
  program counter:   1697
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({})
  start expression:  line=21 column=32
  end expression:    line=21 column=39
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team1"], [], {}]

Step 541:
  program counter:   1698
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({}, []); insert first value into the second; push result ([{}])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                    ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [ {} ]]

Step 542:
  program counter:   1699
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                              ^
  stack:             [{:}, ?thegame["team1"], [ {} ], ?thegame]

Step 543:
  program counter:   1700
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                                 ^^^^^^^
  stack:             [{:}, ?thegame["team1"], [ {} ], ?thegame, "waiting"]

Step 544:
  program counter:   1701
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                              ^^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [ {} ], ?thegame["waiting"]]

Step 545:
  program counter:   1702
  hvm code:          LoadVar i
  explanation:       push value (0) of variable "i"
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                                         ^
  stack:             [{:}, ?thegame["team1"], [ {} ], ?thegame["waiting"], 0]

Step 546:
  program counter:   1703
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (0, ?thegame["waiting"]); push result (?thegame["waiting"][0])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                              ^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [ {} ], ?thegame["waiting"][0]]

Step 547:
  program counter:   1704
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"][0]) and push value (1)
  start expression:  line=21 column=42
  end expression:    line=21 column=54
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team1"], [ {} ], 1]

Step 548:
  program counter:   1705
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, [{}]); insert first value into the second; push result ([{}, 1])
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                    ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [ {}, 1 ]]

Step 549:
  program counter:   1706
  hvm code:          Apply PC(1294)
  explanation:       pop an argument ([{}, 1]) and call method (1294: "add")
  source code:       g->team1 = add(g->team1, g->waiting[i])
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> add({}, 1)
  stack:             [{:}, ?thegame["team1"], [], 27298, [ {}, 1 ]]

Step 550:
  program counter:   1294
  hvm code:          Frame add(s, elt)
  explanation:       pop argument ([{}, 1]), assign to (s, elt), and run method "add"
  module:            set
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { elt: 1, s: {} }
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }]

Step 551:
  program counter:   1295
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=22 column=5
  end statement:     line=22 column=23
  source code:       result =  s | {elt}
                               ^

Step 552:
  program counter:   1296
  hvm code:          LoadVar s
  explanation:       push value ({}) of variable "s"
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}]

Step 553:
  program counter:   1297
  hvm code:          DelVar s
  explanation:       delete method variable s
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  method variables:  { elt: 1 }

Step 554:
  program counter:   1298
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       result =  s | {elt}
                                    ^^^
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, {}]

Step 555:
  program counter:   1299
  hvm code:          LoadVar elt
  explanation:       push value (1) of variable "elt"
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, {}, 1]

Step 556:
  program counter:   1300
  hvm code:          DelVar elt
  explanation:       delete method variable elt
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  method variables:  { }

Step 557:
  program counter:   1301
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (1, {}); insert first value into the second; push result ({ 1 })
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, { 1 }]

Step 558:
  program counter:   1302
  hvm code:          2-ary |
  explanation:       pop 2 values ({ 1 }, {}); union; push result ({ 1 })
  source code:       result =  s | {elt}
                               ^^^^^^^^^
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, { 1 }]

Step 559:
  program counter:   1303
  hvm code:          StoreVar result
  explanation:       pop value ({ 1 }) and store locally in variable \"result\"
  source code:       result =  s | {elt}
                     ^^^^^^^^
  method variables:  { result: { 1 } }
  stack:             [{:}, ?thegame["team1"], [], 27298, { "g": ?thegame, "i": 0, "pairedplayers": 2 }]

Step 560:
  program counter:   1304
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, i: 0, pairedplayers: 2 }
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team1"], { 1 }]

Step 561:
  program counter:   1707
  hvm code:          Store
  explanation:       pop value ({ 1 }) and address (?thegame["team1"]) and store
  module:            game
  start statement:   line=21 column=17
  end statement:     line=21 column=55
  source code:       g->team1 = add(g->team1, g->waiting[i])
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 1, 3 ] } }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 562:
  program counter:   1708
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=22 column=17
  end statement:     line=22 column=57
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                     ^
  stack:             [{:}, ?thegame]

Step 563:
  program counter:   1709
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                        ^^^^^
  stack:             [{:}, ?thegame, "team2"]

Step 564:
  program counter:   1710
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                     ^^^^^^^^
  stack:             [{:}, ?thegame["team2"]]

Step 565:
  program counter:   1711
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], []]

Step 566:
  program counter:   1712
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                    ^
  stack:             [{:}, ?thegame["team2"], [], ?thegame]

Step 567:
  program counter:   1713
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                       ^^^^^
  stack:             [{:}, ?thegame["team2"], [], ?thegame, "team2"]

Step 568:
  program counter:   1714
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                    ^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [], ?thegame["team2"]]

Step 569:
  program counter:   1715
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=22 column=32
  end expression:    line=22 column=39
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team2"], [], {}]

Step 570:
  program counter:   1716
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({}, []); insert first value into the second; push result ([{}])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [ {} ]]

Step 571:
  program counter:   1717
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                              ^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame]

Step 572:
  program counter:   1718
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                                 ^^^^^^^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame, "waiting"]

Step 573:
  program counter:   1719
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                              ^^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame["waiting"]]

Step 574:
  program counter:   1720
  hvm code:          LoadVar i
  explanation:       push value (0) of variable "i"
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                                         ^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame["waiting"], 0]

Step 575:
  program counter:   1721
  hvm code:          Push 1
  explanation:       push constant 1
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                                           ^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame["waiting"], 0, 1]

Step 576:
  program counter:   1722
  hvm code:          2-ary +
  explanation:       pop 2 values (1, 0); add the integers; push result (1)
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                                         ^^^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame["waiting"], 1]

Step 577:
  program counter:   1723
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (1, ?thegame["waiting"]); push result (?thegame["waiting"][1])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                              ^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [ {} ], ?thegame["waiting"][1]]

Step 578:
  program counter:   1724
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"][1]) and push value (3)
  start expression:  line=22 column=42
  end expression:    line=22 column=56
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team2"], [ {} ], 3]

Step 579:
  program counter:   1725
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, [{}]); insert first value into the second; push result ([{}, 3])
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [ {}, 3 ]]

Step 580:
  program counter:   1726
  hvm code:          Apply PC(1294)
  explanation:       pop an argument ([{}, 3]) and call method (1294: "add")
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> add({}, 3)
  stack:             [{:}, ?thegame["team2"], [], 27618, [ {}, 3 ]]

Step 581:
  program counter:   1294
  hvm code:          Frame add(s, elt)
  explanation:       pop argument ([{}, 3]), assign to (s, elt), and run method "add"
  module:            set
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { elt: 3, s: {} }
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }]

Step 582:
  program counter:   1295
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=22 column=5
  end statement:     line=22 column=23
  source code:       result =  s | {elt}
                               ^

Step 583:
  program counter:   1296
  hvm code:          LoadVar s
  explanation:       push value ({}) of variable "s"
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}]

Step 584:
  program counter:   1297
  hvm code:          DelVar s
  explanation:       delete method variable s
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  method variables:  { elt: 3 }

Step 585:
  program counter:   1298
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       result =  s | {elt}
                                    ^^^
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, {}]

Step 586:
  program counter:   1299
  hvm code:          LoadVar elt
  explanation:       push value (3) of variable "elt"
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, {}, 3]

Step 587:
  program counter:   1300
  hvm code:          DelVar elt
  explanation:       delete method variable elt
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  method variables:  { }

Step 588:
  program counter:   1301
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (3, {}); insert first value into the second; push result ({ 3 })
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, {}, { 3 }]

Step 589:
  program counter:   1302
  hvm code:          2-ary |
  explanation:       pop 2 values ({ 3 }, {}); union; push result ({ 3 })
  source code:       result =  s | {elt}
                               ^^^^^^^^^
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }, { 3 }]

Step 590:
  program counter:   1303
  hvm code:          StoreVar result
  explanation:       pop value ({ 3 }) and store locally in variable \"result\"
  source code:       result =  s | {elt}
                     ^^^^^^^^
  method variables:  { result: { 3 } }
  stack:             [{:}, ?thegame["team2"], [], 27618, { "g": ?thegame, "i": 0, "pairedplayers": 2 }]

Step 591:
  program counter:   1304
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, i: 0, pairedplayers: 2 }
  call trace:        game_umpire(?thegame)
  stack:             [{:}, ?thegame["team2"], { 3 }]

Step 592:
  program counter:   1727
  hvm code:          Store
  explanation:       pop value ({ 3 }) and address (?thegame["team2"]) and store
  module:            game
  start statement:   line=22 column=17
  end statement:     line=22 column=57
  source code:       g->team2 = add(g->team2, g->waiting[i+1])
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": { 3 }, "waiting": [ 1, 3 ] } }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 593:
  program counter:   1728
  hvm code:          LoadVar i
  explanation:       push value (0) of variable "i"
  start statement:   line=23 column=17
  end statement:     line=23 column=22
  source code:       i += 2
                     ^^^^^^
  stack:             [{:}, 0]

Step 594:
  program counter:   1729
  hvm code:          DelVar i
  explanation:       delete method variable i
  start expression:  line=23 column=17
  end expression:    line=23 column=22
  method variables:  { g: ?thegame, pairedplayers: 2 }

Step 595:
  program counter:   1730
  hvm code:          Push 2
  explanation:       push constant 2
  source code:       i += 2
                          ^
  stack:             [{:}, 0, 2]

Step 596:
  program counter:   1731
  hvm code:          2-ary +
  explanation:       pop 2 values (2, 0); add the integers; push result (2)
  source code:       i += 2
                     ^^^^^^
  stack:             [{:}, 2]

Step 597:
  program counter:   1732
  hvm code:          StoreVar i
  explanation:       pop value (2) and store locally in variable \"i\"
  source code:       i += 2
                     ^^^^
  method variables:  { g: ?thegame, i: 2, pairedplayers: 2 }
  stack:             [{:}]

Step 598:
  program counter:   1733
  hvm code:          Jump 1686
  explanation:       set program counter to 1686
  start statement:   line=20 column=13
  end statement:     line=20 column=36
  source code:       while i < pairedplayers:
                     ^^^^^^^^^^^^^^^^^^^^^^^^

Step 599:
  program counter:   1686
  hvm code:          LoadVar i
  explanation:       push value (2) of variable "i"
  source code:       while i < pairedplayers:
                           ^
  stack:             [{:}, 2]

Step 600:
  program counter:   1687
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       while i < pairedplayers:
                               ^^^^^^^^^^^^^
  stack:             [{:}, 2, 2]

Step 601:
  program counter:   1688
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 2); check if second value is less than the first; push result (False)
  source code:       while i < pairedplayers:
                           ^^^^^^^^^^^^^^^^^
  stack:             [{:}, False]

Step 602:
  program counter:   1689
  hvm code:          JumpCond False 1734
  explanation:       pop value (False), compare to False, and jump to 1734 if the same
  source code:       while i < pairedplayers:
                     ^^^^^
  stack:             [{:}]

Step 603:
  program counter:   1734
  hvm code:          DelVar i
  explanation:       delete method variable i
  start statement:   line=25 column=13
  end statement:     line=25 column=21
  source code:       var j = 0
                             ^
  method variables:  { g: ?thegame, pairedplayers: 2 }

Step 604:
  program counter:   1735
  hvm code:          Push 0
  explanation:       push constant 0
  start expression:  line=25 column=21
  end expression:    line=25 column=21
  stack:             [{:}, 0]

Step 605:
  program counter:   1736
  hvm code:          StoreVar j
  explanation:       pop value (0) and store locally in variable \"j\"
  source code:       var j = 0
                     ^^^^^^^^^
  method variables:  { g: ?thegame, j: 0, pairedplayers: 2 }
  stack:             [{:}]

Step 606:
  program counter:   1737
  hvm code:          LoadVar j
  explanation:       push value (0) of variable "j"
  start statement:   line=26 column=13
  end statement:     line=26 column=36
  source code:       while j < pairedplayers:
                           ^
  stack:             [{:}, 0]

Step 607:
  program counter:   1738
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       while j < pairedplayers:
                               ^^^^^^^^^^^^^
  stack:             [{:}, 0, 2]

Step 608:
  program counter:   1739
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 0); check if second value is less than the first; push result (True)
  source code:       while j < pairedplayers:
                           ^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 609:
  program counter:   1740
  hvm code:          JumpCond False 1753
  explanation:       pop value (True), compare to False, and jump to 1753 if the same
  source code:       while j < pairedplayers:
                     ^^^^^
  stack:             [{:}]

Step 610:
  program counter:   1741
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=27 column=17
  end statement:     line=27 column=33
  source code:       del g->waiting[0]
                         ^
  stack:             [{:}, ?thegame]

Step 611:
  program counter:   1742
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       del g->waiting[0]
                            ^^^^^^^
  stack:             [{:}, ?thegame, "waiting"]

Step 612:
  program counter:   1743
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       del g->waiting[0]
                         ^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"]]

Step 613:
  program counter:   1744
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       del g->waiting[0]
                                    ^
  stack:             [{:}, ?thegame["waiting"], 0]

Step 614:
  program counter:   1745
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (0, ?thegame["waiting"]); push result (?thegame["waiting"][0])
  source code:       del g->waiting[0]
                         ^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"][0]]

Step 615:
  program counter:   1746
  hvm code:          Del
  explanation:       pop an address and delete the shared variable at the address
  source code:       del g->waiting[0]
                     ^^^^^^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": { 3 }, "waiting": [ 3 ] } }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 616:
  program counter:   1747
  hvm code:          LoadVar j
  explanation:       push value (0) of variable "j"
  start statement:   line=28 column=17
  end statement:     line=28 column=22
  source code:       j += 1
                     ^^^^^^
  stack:             [{:}, 0]

Step 617:
  program counter:   1748
  hvm code:          DelVar j
  explanation:       delete method variable j
  start expression:  line=28 column=17
  end expression:    line=28 column=22
  method variables:  { g: ?thegame, pairedplayers: 2 }

Step 618:
  program counter:   1749
  hvm code:          Push 1
  explanation:       push constant 1
  source code:       j += 1
                          ^
  stack:             [{:}, 0, 1]

Step 619:
  program counter:   1750
  hvm code:          2-ary +
  explanation:       pop 2 values (1, 0); add the integers; push result (1)
  source code:       j += 1
                     ^^^^^^
  stack:             [{:}, 1]

Step 620:
  program counter:   1751
  hvm code:          StoreVar j
  explanation:       pop value (1) and store locally in variable \"j\"
  source code:       j += 1
                     ^^^^
  method variables:  { g: ?thegame, j: 1, pairedplayers: 2 }
  stack:             [{:}]

Step 621:
  program counter:   1752
  hvm code:          Jump 1737
  explanation:       set program counter to 1737
  start statement:   line=26 column=13
  end statement:     line=26 column=36
  source code:       while j < pairedplayers:
                     ^^^^^^^^^^^^^^^^^^^^^^^^

Step 622:
  program counter:   1737
  hvm code:          LoadVar j
  explanation:       push value (1) of variable "j"
  source code:       while j < pairedplayers:
                           ^
  stack:             [{:}, 1]

Step 623:
  program counter:   1738
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       while j < pairedplayers:
                               ^^^^^^^^^^^^^
  stack:             [{:}, 1, 2]

Step 624:
  program counter:   1739
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 1); check if second value is less than the first; push result (True)
  source code:       while j < pairedplayers:
                           ^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 625:
  program counter:   1740
  hvm code:          JumpCond False 1753
  explanation:       pop value (True), compare to False, and jump to 1753 if the same
  source code:       while j < pairedplayers:
                     ^^^^^
  stack:             [{:}]

Step 626:
  program counter:   1741
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=27 column=17
  end statement:     line=27 column=33
  source code:       del g->waiting[0]
                         ^
  stack:             [{:}, ?thegame]

Step 627:
  program counter:   1742
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       del g->waiting[0]
                            ^^^^^^^
  stack:             [{:}, ?thegame, "waiting"]

Step 628:
  program counter:   1743
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       del g->waiting[0]
                         ^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"]]

Step 629:
  program counter:   1744
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       del g->waiting[0]
                                    ^
  stack:             [{:}, ?thegame["waiting"], 0]

Step 630:
  program counter:   1745
  hvm code:          2-ary AddArg
  explanation:       pop 2 values (0, ?thegame["waiting"]); push result (?thegame["waiting"][0])
  source code:       del g->waiting[0]
                         ^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"][0]]

Step 631:
  program counter:   1746
  hvm code:          Del
  explanation:       pop an address and delete the shared variable at the address
  source code:       del g->waiting[0]
                     ^^^^^^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 0, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 632:
  program counter:   1747
  hvm code:          LoadVar j
  explanation:       push value (1) of variable "j"
  start statement:   line=28 column=17
  end statement:     line=28 column=22
  source code:       j += 1
                     ^^^^^^
  stack:             [{:}, 1]

Step 633:
  program counter:   1748
  hvm code:          DelVar j
  explanation:       delete method variable j
  start expression:  line=28 column=17
  end expression:    line=28 column=22
  method variables:  { g: ?thegame, pairedplayers: 2 }

Step 634:
  program counter:   1749
  hvm code:          Push 1
  explanation:       push constant 1
  source code:       j += 1
                          ^
  stack:             [{:}, 1, 1]

Step 635:
  program counter:   1750
  hvm code:          2-ary +
  explanation:       pop 2 values (1, 1); add the integers; push result (2)
  source code:       j += 1
                     ^^^^^^
  stack:             [{:}, 2]

Step 636:
  program counter:   1751
  hvm code:          StoreVar j
  explanation:       pop value (2) and store locally in variable \"j\"
  source code:       j += 1
                     ^^^^
  method variables:  { g: ?thegame, j: 2, pairedplayers: 2 }
  stack:             [{:}]

Step 637:
  program counter:   1752
  hvm code:          Jump 1737
  explanation:       set program counter to 1737
  start statement:   line=26 column=13
  end statement:     line=26 column=36
  source code:       while j < pairedplayers:
                     ^^^^^^^^^^^^^^^^^^^^^^^^

Step 638:
  program counter:   1737
  hvm code:          LoadVar j
  explanation:       push value (2) of variable "j"
  source code:       while j < pairedplayers:
                           ^
  stack:             [{:}, 2]

Step 639:
  program counter:   1738
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       while j < pairedplayers:
                               ^^^^^^^^^^^^^
  stack:             [{:}, 2, 2]

Step 640:
  program counter:   1739
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 2); check if second value is less than the first; push result (False)
  source code:       while j < pairedplayers:
                           ^^^^^^^^^^^^^^^^^
  stack:             [{:}, False]

Step 641:
  program counter:   1740
  hvm code:          JumpCond False 1753
  explanation:       pop value (False), compare to False, and jump to 1753 if the same
  source code:       while j < pairedplayers:
                     ^^^^^
  stack:             [{:}]

Step 642:
  program counter:   1753
  hvm code:          DelVar j
  explanation:       delete method variable j
  start statement:   line=29 column=13
  end statement:     line=29 column=45
  source code:       g->game_headcount = pairedplayers
                     ^
  method variables:  { g: ?thegame, pairedplayers: 2 }

Step 643:
  program counter:   1754
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start expression:  line=29 column=13
  end expression:    line=29 column=13
  stack:             [{:}, ?thegame]

Step 644:
  program counter:   1755
  hvm code:          Push "game_headcount"
  explanation:       push constant "game_headcount"
  source code:       g->game_headcount = pairedplayers
                        ^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame, "game_headcount"]

Step 645:
  program counter:   1756
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("game_headcount", ?thegame); push result (?thegame["game_headcount"])
  source code:       g->game_headcount = pairedplayers
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["game_headcount"]]

Step 646:
  program counter:   1757
  hvm code:          LoadVar pairedplayers
  explanation:       push value (2) of variable "pairedplayers"
  source code:       g->game_headcount = pairedplayers
                                         ^^^^^^^^^^^^^
  stack:             [{:}, ?thegame["game_headcount"], 2]

Step 647:
  program counter:   1758
  hvm code:          DelVar pairedplayers
  explanation:       delete method variable pairedplayers
  start expression:  line=29 column=33
  end expression:    line=29 column=45
  method variables:  { g: ?thegame }

Step 648:
  program counter:   1759
  hvm code:          Store
  explanation:       pop value (2) and address (?thegame["game_headcount"]) and store
  source code:       g->game_headcount = pairedplayers
                     ^^^^^^^^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 649:
  program counter:   1760
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=30 column=9
  end statement:     line=30 column=22
  source code:       g->exited = []
                     ^
  stack:             [{:}, ?thegame]

Step 650:
  program counter:   1761
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       g->exited = []
                        ^^^^^^
  stack:             [{:}, ?thegame, "exited"]

Step 651:
  program counter:   1762
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       g->exited = []
                     ^^^^^^^^^
  stack:             [{:}, ?thegame["exited"]]

Step 652:
  program counter:   1763
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       g->exited = []
                                 ^^
  stack:             [{:}, ?thegame["exited"], []]

Step 653:
  program counter:   1764
  hvm code:          Store
  explanation:       pop value ([]) and address (?thegame["exited"]) and store
  source code:       g->exited = []
                     ^^^^^^^^^^^
  call trace:        game_umpire(?thegame)
  stack:             [{:}]

Step 654:
  program counter:   1765
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=33 column=9
  end statement:     line=33 column=30
  source code:       notifyAll(?g->players)
                                ^
  stack:             [{:}, ?thegame]

Step 655:
  program counter:   1766
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       notifyAll(?g->players)
                                   ^^^^^^^
  stack:             [{:}, ?thegame, "players"]

Step 656:
  program counter:   1767
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("players", ?thegame); push result (?thegame["players"])
  source code:       notifyAll(?g->players)
                                ^^^^^^^^^^
  stack:             [{:}, ?thegame["players"]]

Step 657:
  program counter:   1768
  hvm code:          Apply PC(1097)
  explanation:       pop an argument (?thegame["players"]) and call method (1097: "notifyAll")
  source code:       notifyAll(?g->players)
                     ^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> notifyAll(?thegame["players"])
  stack:             [{:}, [], 28290, ?thegame["players"]]

Step 658:
  program counter:   1097
  hvm code:          Frame notifyAll(c)
  explanation:       pop argument (?thegame["players"]), assign to c, and run method "notifyAll"
  module:            synch
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"] }
  stack:             [{:}, [], 28290, { "g": ?thegame }]

Step 659:
  program counter:   1098
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> notifyAll(?thegame["players"])

Step 660:
  program counter:   1099
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       atomically !c = bag.empty()
                                 ^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"]]

Step 661:
  program counter:   1100
  hvm code:          DelVar c
  explanation:       delete method variable c
  start expression:  line=61 column=17
  end expression:    line=61 column=17
  method variables:  { }

Step 662:
  program counter:   1101
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], PC(541)]

Step 663:
  program counter:   1102
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       atomically !c = bag.empty()
                                              ^^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], PC(541), []]

Step 664:
  program counter:   1103
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^^^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], ?PC(541)[[]]]

Step 665:
  program counter:   1104
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=61 column=21
  end expression:    line=61 column=31
  call trace:        game_umpire(?thegame) --> notifyAll(?thegame["players"]) --> empty()
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], [], 17666, []]

Step 666:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], [], 17666, {:}]

Step 667:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], [], 17666, {:}, {:}]

Step 668:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], [], 17666, {:}]

Step 669:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        game_umpire(?thegame) --> notifyAll(?thegame["players"])
  stack:             [{:}, [], 28290, { "g": ?thegame }, ?thegame["players"], {:}]

Step 670:
  program counter:   1105
  hvm code:          Store
  explanation:       pop value ({:}) and address (?thegame["players"]) and store
  module:            synch
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^
  shared variables:  { thegame: { "active_game": {:}, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 28290, { "g": ?thegame }]

Step 671:
  program counter:   1106
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^

Step 672:
  program counter:   1107
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame }
  call trace:        game_umpire(?thegame)
  stack:             [{:}, None]

Step 673:
  program counter:   1769
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=33 column=9
  end statement:     line=33 column=30
  source code:       notifyAll(?g->players)
                     ^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 674:
  program counter:   1770
  hvm code:          Jump 1630
  explanation:       set program counter to 1630
  start statement:   line=11 column=5
  end statement:     line=11 column=15
  source code:       while True:
                     ^^^^^^^^^^^

Step 675:
  program counter:   1630
  hvm code:          Push True
  explanation:       push constant True
  source code:       while True:
                           ^^^^
  stack:             [{:}, True]

Step 676:
  program counter:   1631
  hvm code:          JumpCond False 1771
  explanation:       pop value (True), compare to False, and jump to 1771 if the same
  source code:       while True:
                     ^^^^^
  stack:             [{:}]

Step 677:
  program counter:   1632
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=14 column=9
  end statement:     line=14 column=84
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                ^
  stack:             [{:}, ?thegame]

Step 678:
  program counter:   1633
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                   ^^^^^^^
  stack:             [{:}, ?thegame, "waiting"]

Step 679:
  program counter:   1634
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                ^^^^^^^^^^
  stack:             [{:}, ?thegame["waiting"]]

Step 680:
  program counter:   1635
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([])
  start expression:  line=14 column=20
  end expression:    line=14 column=29
  call trace:        game_umpire(?thegame)
  stack:             [{:}, []]

Step 681:
  program counter:   1636
  hvm code:          1-ary len
  explanation:       pop a value ([]); push result (0)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                            ^^^^^^^^^^^^^^^
  stack:             [{:}, 0]

Step 682:
  program counter:   1637
  hvm code:          Push 2
  explanation:       push constant 2
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                                              ^
  stack:             [{:}, 0, 2]

Step 683:
  program counter:   1638
  hvm code:          2-ary <
  explanation:       pop 2 values (2, 0); check if second value is less than the first; push result (True)
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                            ^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 684:
  program counter:   1639
  hvm code:          JumpCond True 1656
  explanation:       pop value (True), compare to True, and jump to 1656 if the same
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 685:
  program counter:   1656
  hvm code:          Push True
  explanation:       push constant True
  start expression:  line=14 column=15
  end expression:    line=14 column=83
  stack:             [{:}, True]

Step 686:
  program counter:   1657
  hvm code:          JumpCond False 1670
  explanation:       pop value (True), compare to False, and jump to 1670 if the same
  source code:       while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):
                     ^^^^^
  stack:             [{:}]

Step 687:
  program counter:   1658
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=15 column=13
  end statement:     line=15 column=43
  source code:       wait(?g->active_game, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 688:
  program counter:   1659
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->active_game, ?g->lock)
                           ^
  stack:             [{:}, [], ?thegame]

Step 689:
  program counter:   1660
  hvm code:          Push "active_game"
  explanation:       push constant "active_game"
  source code:       wait(?g->active_game, ?g->lock)
                              ^^^^^^^^^^^
  stack:             [{:}, [], ?thegame, "active_game"]

Step 690:
  program counter:   1661
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("active_game", ?thegame); push result (?thegame["active_game"])
  source code:       wait(?g->active_game, ?g->lock)
                           ^^^^^^^^^^^^^^
  stack:             [{:}, [], ?thegame["active_game"]]

Step 691:
  program counter:   1662
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["active_game"], []); insert first value into the second; push result ([?thegame["active_game"]])
  source code:       wait(?g->active_game, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame["active_game"] ]]

Step 692:
  program counter:   1663
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->active_game, ?g->lock)
                                            ^
  stack:             [{:}, [ ?thegame["active_game"] ], ?thegame]

Step 693:
  program counter:   1664
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       wait(?g->active_game, ?g->lock)
                                               ^^^^
  stack:             [{:}, [ ?thegame["active_game"] ], ?thegame, "lock"]

Step 694:
  program counter:   1665
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       wait(?g->active_game, ?g->lock)
                                            ^^^^^^^
  stack:             [{:}, [ ?thegame["active_game"] ], ?thegame["lock"]]

Step 695:
  program counter:   1666
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["lock"], [?thegame["active_game"]]); insert first value into the second; push result ([?thegame["active_game"], ?thegame["lock"]])
  source code:       wait(?g->active_game, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame["active_game"], ?thegame["lock"] ]]

Step 696:
  program counter:   1667
  hvm code:          Apply PC(998)
  explanation:       pop an argument ([?thegame["active_game"], ?thegame["lock"]]) and call method (998: "wait")
  source code:       wait(?g->active_game, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
  stack:             [{:}, [], 26674, [ ?thegame["active_game"], ?thegame["lock"] ]]

Step 697:
  program counter:   998
  hvm code:          Frame wait(c, lk)
  explanation:       pop argument ([?thegame["active_game"], ?thegame["lock"]]), assign to (c, lk), and run method "wait"
  module:            synch
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"], lk: ?thegame["lock"] }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 698:
  program counter:   999
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=47 column=5
  end statement:     line=47 column=15
  source code:       var cnt = 0
                               ^
  stack:             [{:}, [], 26674, { "g": ?thegame }, 0]

Step 699:
  program counter:   1000
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  source code:       var cnt = 0
                     ^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"], cnt: 0, lk: ?thegame["lock"] }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 700:
  program counter:   1001
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start statement:   line=48 column=5
  end statement:     line=48 column=24
  source code:       let (), ctx = save():
                                       ^^
  method variables:  { c: ?thegame["active_game"], lk: ?thegame["lock"] }

Step 701:
  program counter:   1002
  hvm code:          Push ()
  explanation:       push constant ()
  start expression:  line=48 column=23
  end expression:    line=48 column=24
  stack:             [{:}, [], 26674, { "g": ?thegame }, []]

Step 702:
  program counter:   1003
  hvm code:          Save
  explanation:       pop a value and save context
  source code:       let (), ctx = save():
                                   ^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, [ [], CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 703:
  program counter:   1004
  hvm code:          Continue
  explanation:       a no-op, must follow a Stop or Save operation
  start expression:  line=48 column=19
  end expression:    line=48 column=24

Step 704:
  program counter:   1005
  hvm code:          StoreVar ((), ctx)
  explanation:       pop value ([[], CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])]) and store locally in variable \"((), ctx)\"
  source code:       let (), ctx = save():
                     ^^^^^^^^^^^^^
  method variables:  { c: ?thegame["active_game"], ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 705:
  program counter:   1006
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])

Step 706:
  program counter:   1007
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605)]

Step 707:
  program counter:   1008
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), []]

Step 708:
  program counter:   1009
  hvm code:          LoadVar c
  explanation:       push value (?thegame["active_game"]) of variable "c"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                             ^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), [], ?thegame["active_game"]]

Step 709:
  program counter:   1010
  hvm code:          Load
  explanation:       pop address (?thegame["active_game"]) and push value ({:})
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), [], {:}]

Step 710:
  program counter:   1011
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), [ {:} ]]

Step 711:
  program counter:   1012
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])) of variable "ctx"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                                ^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 712:
  program counter:   1013
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, PC(605), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 713:
  program counter:   1014
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])], PC(605)); push result (?PC(605)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])]])
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?PC(605)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 714:
  program counter:   1015
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])]) and call method (605: "multiplicity")
  start expression:  line=50 column=19
  end expression:    line=50 column=43
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"]) --> multiplicity({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }]))
  stack:             [{:}, [], 26674, { "g": ?thegame }, [], 16242, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 715:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
  stack:             [{:}, [], 26674, { "g": ?thegame }, 0]

Step 716:
  program counter:   1016
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  module:            synch
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                     ^^^^^
  method variables:  { c: ?thegame["active_game"], cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 717:
  program counter:   1017
  hvm code:          LoadVar c
  explanation:       push value (?thegame["active_game"]) of variable "c"
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                      ^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"]]

Step 718:
  program counter:   1018
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696)]

Step 719:
  program counter:   1019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), []]

Step 720:
  program counter:   1020
  hvm code:          LoadVar c
  explanation:       push value (?thegame["active_game"]) of variable "c"
  source code:       !c = bag.add(!c, ctx)
                                   ^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), [], ?thegame["active_game"]]

Step 721:
  program counter:   1021
  hvm code:          Load
  explanation:       pop address (?thegame["active_game"]) and push value ({:})
  source code:       !c = bag.add(!c, ctx)
                                  ^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), [], {:}]

Step 722:
  program counter:   1022
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), [ {:} ]]

Step 723:
  program counter:   1023
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])) of variable "ctx"
  source code:       !c = bag.add(!c, ctx)
                                      ^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 724:
  program counter:   1024
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], PC(696), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 725:
  program counter:   1025
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])], PC(696)); push result (?PC(696)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])]])
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], ?PC(696)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 726:
  program counter:   1026
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }])]) and call method (696: "add")
  start expression:  line=51 column=18
  end expression:    line=51 column=33
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"]) --> add({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }]))
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], [], 16418, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 727:
  program counter:   696
  hvm code:          Frame add(bg, elt)
  explanation:       start of method add
  module:            bag
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["active_game"], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 728:
  program counter:   1027
  hvm code:          Store
  explanation:       pop value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["active_game"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=1,sp=4,STACK[{:},[],26674,{ "g": ?thegame }]): 1 }) and address (?thegame["active_game"]) and store
  module:            synch
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                     ^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 729:
  program counter:   1028
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=52 column=13
  end statement:     line=52 column=23
  source code:       !lk = False
                      ^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["lock"]]

Step 730:
  program counter:   1029
  hvm code:          Push False
  explanation:       push constant False
  source code:       !lk = False
                           ^^^^^
  stack:             [{:}, [], 26674, { "g": ?thegame }, ?thegame["lock"], False]

Step 731:
  program counter:   1030
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !lk = False
                     ^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 26674, { "g": ?thegame }]

Step 732:
  program counter:   1031
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^

================================================
Running thread T2: player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
method variables:
  c: ?thegame["players"]
  cnt: 0
  ctx: CONTEXT({'type': 'pc', 'value': '1004'})
  lk: ?thegame["lock"]
mode:  runnable
stack: ['{:}', '[]', '32386', '{ "self": 1 }', '[]', '29906', '{ "g": ?thegame, "id": 1 }']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T4: pc=1032 runnable player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T5: pc=2018 runnable player(4)
    about to run method player with argument 4
shared variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] }
state id: 6096
================================================

Step 733:
  program counter:   1032
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=53 column=20
  end statement:     line=55 column=6
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])

Step 734:
  program counter:   1033
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):

Step 735:
  program counter:   1034
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                           ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 736:
  program counter:   1035
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                          ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, False]

Step 737:
  program counter:   1036
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, True]

Step 738:
  program counter:   1037
  hvm code:          JumpCond False 1050
  explanation:       pop value (True), compare to False, and jump to 1050 if the same
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 739:
  program counter:   1038
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605)]

Step 740:
  program counter:   1039
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), []]

Step 741:
  program counter:   1040
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                      ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [], ?thegame["players"]]

Step 742:
  program counter:   1041
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [], {:}]

Step 743:
  program counter:   1042
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:} ]]

Step 744:
  program counter:   1043
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])) of variable "ctx"
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                         ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 745:
  program counter:   1044
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, PC(605), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 746:
  program counter:   1045
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])], PC(605)); push result (?PC(605)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?PC(605)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 747:
  program counter:   1046
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }])]) and call method (605: "multiplicity")
  start expression:  line=53 column=40
  end expression:    line=53 column=64
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 1 },[],29906,{ "g": ?thegame, "id": 1 }]))
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, [], 16738, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 748:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, 0]

Step 749:
  program counter:   1047
  hvm code:          LoadVar cnt
  explanation:       push value (0) of variable "cnt"
  module:            synch
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                                 ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, 0, 0]

Step 750:
  program counter:   1048
  hvm code:          2-ary <=
  explanation:       pop 2 values (0, 0); check if second value is less than or equal to the first; push result (True)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, True]

Step 751:
  program counter:   1049
  hvm code:          Jump 1051
  explanation:       set program counter to 1051
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                               ^^^

Step 752:
  program counter:   1051
  hvm code:          JumpCond False 1056
  explanation:       pop value (True), compare to False, and jump to 1056 if the same
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 753:
  program counter:   1052
  hvm code:          DelVar c
  explanation:       delete method variable c
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                                    ^
  method variables:  { cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }

Step 754:
  program counter:   1053
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start expression:  line=53 column=72
  end expression:    line=53 column=72
  method variables:  { ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }

Step 755:
  program counter:   1054
  hvm code:          DelVar ctx
  explanation:       delete method variable ctx
  start expression:  line=53 column=72
  end expression:    line=53 column=72
  method variables:  { lk: ?thegame["lock"] }

Step 756:
  program counter:   1055
  hvm code:          Jump 1059
  explanation:       set program counter to 1059
  start expression:  line=53 column=72
  end expression:    line=53 column=72

Step 757:
  program counter:   1059
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 758:
  program counter:   1060
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=54 column=13
  end statement:     line=54 column=22
  source code:       !lk = True
                      ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 759:
  program counter:   1061
  hvm code:          DelVar lk
  explanation:       delete method variable lk
  start expression:  line=54 column=14
  end expression:    line=54 column=15
  method variables:  { }

Step 760:
  program counter:   1062
  hvm code:          Push True
  explanation:       push constant True
  source code:       !lk = True
                           ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }, ?thegame["lock"], True]

Step 761:
  program counter:   1063
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !lk = True
                     ^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 29906, { "g": ?thegame, "id": 1 }]

Step 762:
  program counter:   1064
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 763:
  program counter:   1065
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, None]

Step 764:
  program counter:   1870
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 765:
  program counter:   1871
  hvm code:          Jump 1820
  explanation:       set program counter to 1820
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 766:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 767:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team1"]

Step 768:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team1"]]

Step 769:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, { 1 }]

Step 770:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1]

Step 771:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame]

Step 772:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame, "team2"]

Step 773:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame["team2"]]

Step 774:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, 1, { 3 }]

Step 775:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({ 3 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, 1]

Step 776:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (1, 1); check if the values are unequal; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, False]

Step 777:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 778:
  program counter:   1832
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 779:
  program counter:   1833
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                       ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "team1"]

Step 780:
  program counter:   1834
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["team1"]]

Step 781:
  program counter:   1835
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=52
  end expression:    line=48 column=59
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, { 1 }]

Step 782:
  program counter:   1836
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1]

Step 783:
  program counter:   1837
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, 0]

Step 784:
  program counter:   1838
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, False]

Step 785:
  program counter:   1839
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 786:
  program counter:   1840
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                         ^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1]

Step 787:
  program counter:   1841
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                   ^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame]

Step 788:
  program counter:   1842
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                      ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame, "team1"]

Step 789:
  program counter:   1843
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                   ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, 1, ?thegame["team1"]]

Step 790:
  program counter:   1844
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=83
  end expression:    line=48 column=90
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, 1, { 1 }]

Step 791:
  program counter:   1845
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1 }, 1); check if the second value is a member of the first; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, True]

Step 792:
  program counter:   1846
  hvm code:          1-ary not
  explanation:       pop a value (True); logical not; push result (False)
  start expression:  line=48 column=73
  end expression:    line=48 column=90
  stack:             [{:}, [], 32386, { "self": 1 }, False]

Step 793:
  program counter:   1847
  hvm code:          JumpCond False 1856
  explanation:       pop value (False), compare to False, and jump to 1856 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 794:
  program counter:   1856
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=48 column=72
  end expression:    line=48 column=116
  stack:             [{:}, [], 32386, { "self": 1 }, False]

Step 795:
  program counter:   1857
  hvm code:          Jump 1859
  explanation:       set program counter to 1859
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                            ^^

Step 796:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (False), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 797:
  program counter:   1872
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=52 column=5
  end statement:     line=52 column=32
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, []]

Step 798:
  program counter:   1873
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       teams = (g->team1, g->team2)
                              ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame]

Step 799:
  program counter:   1874
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       teams = (g->team1, g->team2)
                                 ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame, "team1"]

Step 800:
  program counter:   1875
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], ?thegame["team1"]]

Step 801:
  program counter:   1876
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=52 column=14
  end expression:    line=52 column=21
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, [], { 1 }]

Step 802:
  program counter:   1877
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ 1 }, []); insert first value into the second; push result ([{ 1 }])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 } ]]

Step 803:
  program counter:   1878
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       teams = (g->team1, g->team2)
                                        ^
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 } ], ?thegame]

Step 804:
  program counter:   1879
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       teams = (g->team1, g->team2)
                                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 } ], ?thegame, "team2"]

Step 805:
  program counter:   1880
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       teams = (g->team1, g->team2)
                                        ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 } ], ?thegame["team2"]]

Step 806:
  program counter:   1881
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=52 column=24
  end expression:    line=52 column=31
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 } ], { 3 }]

Step 807:
  program counter:   1882
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ 3 }, [{ 1 }]); insert first value into the second; push result ([{ 1 }, { 3 }])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [ { 1 }, { 3 } ]]

Step 808:
  program counter:   1883
  hvm code:          StoreVar teams
  explanation:       pop value ([{ 1 }, { 3 }]) and store locally in variable \"teams\"
  source code:       teams = (g->team1, g->team2)
                     ^^^^^^^
  method variables:  { g: ?thegame, id: 1, teams: [ { 1 }, { 3 } ] }
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 809:
  program counter:   1884
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=55 column=5
  end statement:     line=55 column=33
  source code:       g->exited = g->exited + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 810:
  program counter:   1885
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       g->exited = g->exited + [id,]
                        ^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "exited"]

Step 811:
  program counter:   1886
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       g->exited = g->exited + [id,]
                     ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"]]

Step 812:
  program counter:   1887
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->exited = g->exited + [id,]
                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], ?thegame]

Step 813:
  program counter:   1888
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       g->exited = g->exited + [id,]
                                    ^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], ?thegame, "exited"]

Step 814:
  program counter:   1889
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       g->exited = g->exited + [id,]
                                 ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], ?thegame["exited"]]

Step 815:
  program counter:   1890
  hvm code:          Load
  explanation:       pop address (?thegame["exited"]) and push value ([])
  start expression:  line=55 column=17
  end expression:    line=55 column=25
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], []]

Step 816:
  program counter:   1891
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->exited = g->exited + [id,]
                                              ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], [], []]

Step 817:
  program counter:   1892
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  source code:       g->exited = g->exited + [id,]
                                              ^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], [], [], 1]

Step 818:
  program counter:   1893
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=55 column=30
  end expression:    line=55 column=31
  method variables:  { g: ?thegame, teams: [ { 1 }, { 3 } ] }

Step 819:
  program counter:   1894
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, []); insert first value into the second; push result ([1])
  source code:       g->exited = g->exited + [id,]
                                              ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], [], [ 1 ]]

Step 820:
  program counter:   1895
  hvm code:          2-ary +
  explanation:       pop 2 values ([1], []); concatenate the lists; push result ([1])
  source code:       g->exited = g->exited + [id,]
                                 ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["exited"], [ 1 ]]

Step 821:
  program counter:   1896
  hvm code:          Store
  explanation:       pop value ([1]) and address (?thegame["exited"]) and store
  source code:       g->exited = g->exited + [id,]
                     ^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 822:
  program counter:   1897
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=56 column=5
  end statement:     line=56 column=32
  source code:       notifyAll(?g->complete_game)
                                ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 823:
  program counter:   1898
  hvm code:          Push "complete_game"
  explanation:       push constant "complete_game"
  source code:       notifyAll(?g->complete_game)
                                   ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "complete_game"]

Step 824:
  program counter:   1899
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("complete_game", ?thegame); push result (?thegame["complete_game"])
  source code:       notifyAll(?g->complete_game)
                                ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["complete_game"]]

Step 825:
  program counter:   1900
  hvm code:          Apply PC(1097)
  explanation:       pop an argument (?thegame["complete_game"]) and call method (1097: "notifyAll")
  source code:       notifyAll(?g->complete_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> notifyAll(?thegame["complete_game"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, ?thegame["complete_game"]]

Step 826:
  program counter:   1097
  hvm code:          Frame notifyAll(c)
  explanation:       pop argument (?thegame["complete_game"]), assign to c, and run method "notifyAll"
  module:            synch
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["complete_game"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }]

Step 827:
  program counter:   1098
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> notifyAll(?thegame["complete_game"])

Step 828:
  program counter:   1099
  hvm code:          LoadVar c
  explanation:       push value (?thegame["complete_game"]) of variable "c"
  source code:       atomically !c = bag.empty()
                                 ^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"]]

Step 829:
  program counter:   1100
  hvm code:          DelVar c
  explanation:       delete method variable c
  start expression:  line=61 column=17
  end expression:    line=61 column=17
  method variables:  { }

Step 830:
  program counter:   1101
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], PC(541)]

Step 831:
  program counter:   1102
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       atomically !c = bag.empty()
                                              ^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], PC(541), []]

Step 832:
  program counter:   1103
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], ?PC(541)[[]]]

Step 833:
  program counter:   1104
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=61 column=21
  end expression:    line=61 column=31
  call trace:        player(1) --> game_join(?thegame, 1) --> notifyAll(?thegame["complete_game"]) --> empty()
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, []]

Step 834:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}]

Step 835:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}, {:}]

Step 836:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}]

Step 837:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        player(1) --> game_join(?thegame, 1) --> notifyAll(?thegame["complete_game"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], {:}]

Step 838:
  program counter:   1105
  hvm code:          Store
  explanation:       pop value ({:}) and address (?thegame["complete_game"]) and store
  module:            synch
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }]

Step 839:
  program counter:   1106
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^

Step 840:
  program counter:   1107
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, teams: [ { 1 }, { 3 } ] }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, None]

Step 841:
  program counter:   1901
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=56 column=5
  end statement:     line=56 column=32
  source code:       notifyAll(?g->complete_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 842:
  program counter:   1902
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=58 column=5
  end statement:     line=58 column=21
  source code:       release(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame]

Step 843:
  program counter:   1903
  hvm code:          DelVar g
  explanation:       delete method variable g
  start expression:  line=58 column=14
  end expression:    line=58 column=14
  method variables:  { teams: [ { 1 }, { 3 } ] }

Step 844:
  program counter:   1904
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       release(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame, "lock"]

Step 845:
  program counter:   1905
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       release(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, ?thegame["lock"]]

Step 846:
  program counter:   1906
  hvm code:          Apply PC(973)
  explanation:       pop an argument (?thegame["lock"]) and call method (973: "release")
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> release(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, ?thegame["lock"]]

Step 847:
  program counter:   973
  hvm code:          Frame release(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "release"
  module:            synch
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 848:
  program counter:   974
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(1) --> game_join(?thegame, 1) --> release(?thegame["lock"])

Step 849:
  program counter:   975
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 1 to 2: remains atomic
  start statement:   line=40 column=9
  end statement:     line=40 column=23
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 850:
  program counter:   976
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 851:
  program counter:   977
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  source code:       assert !binsema
                             ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"]]

Step 852:
  program counter:   978
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (True)
  source code:       assert !binsema
                            ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, True]

Step 853:
  program counter:   979
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert !binsema
                     ^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 854:
  program counter:   980
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 855:
  program counter:   981
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 2 to 1: remains atomic
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 856:
  program counter:   982
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=41 column=9
  end statement:     line=41 column=24
  source code:       !binsema = False
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"]]

Step 857:
  program counter:   983
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=41 column=10
  end expression:    line=41 column=16
  method variables:  { }

Step 858:
  program counter:   984
  hvm code:          Push False
  explanation:       push constant False
  source code:       !binsema = False
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"], False]

Step 859:
  program counter:   985
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !binsema = False
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1 ], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 1 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 860:
  program counter:   986
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^

Step 861:
  program counter:   987
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { teams: [ { 1 }, { 3 } ] }
  call trace:        player(1) --> game_join(?thegame, 1)
  stack:             [{:}, [], 32386, { "self": 1 }, None]

Step 862:
  program counter:   1907
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=58 column=5
  end statement:     line=58 column=21
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 1 }]

Step 863:
  program counter:   1908
  hvm code:          ReturnOp(teams)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { self: 1 }
  call trace:        player(1)
  stack:             [{:}, [ { 1 }, { 3 } ]]

Step 864:
  program counter:   2025
  hvm code:          StoreVar (team1, team2)
  explanation:       pop value ([{ 1 }, { 3 }]) and store locally in variable \"(team1, team2)\"
  module:            __main__
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                     ^^^^^^^^^^^^^^^^^^^^
  method variables:  { self: 1, team1: { 1 }, team2: { 3 } }
  stack:             [{:}]

Step 865:
  program counter:   2026
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=7 column=9
  end statement:     line=7 column=38
  source code:       assert self in (team1 | team2)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 866:
  program counter:   2027
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=7 column=9
  end expression:    line=7 column=38

Step 867:
  program counter:   2028
  hvm code:          LoadVar self
  explanation:       push value (1) of variable "self"
  source code:       assert self in (team1 | team2)
                            ^^^^
  stack:             [{:}, 1]

Step 868:
  program counter:   2029
  hvm code:          LoadVar team1
  explanation:       push value ({ 1 }) of variable "team1"
  source code:       assert self in (team1 | team2)
                                     ^^^^^
  stack:             [{:}, 1, { 1 }]

Step 869:
  program counter:   2030
  hvm code:          DelVar team1
  explanation:       delete method variable team1
  start expression:  line=7 column=25
  end expression:    line=7 column=29
  method variables:  { self: 1, team2: { 3 } }

Step 870:
  program counter:   2031
  hvm code:          LoadVar team2
  explanation:       push value ({ 3 }) of variable "team2"
  source code:       assert self in (team1 | team2)
                                             ^^^^^
  stack:             [{:}, 1, { 1 }, { 3 }]

Step 871:
  program counter:   2032
  hvm code:          DelVar team2
  explanation:       delete method variable team2
  start expression:  line=7 column=33
  end expression:    line=7 column=37
  method variables:  { self: 1 }

Step 872:
  program counter:   2033
  hvm code:          2-ary |
  explanation:       pop 2 values ({ 3 }, { 1 }); union; push result ({ 1, 3 })
  source code:       assert self in (team1 | team2)
                                     ^^^^^^^^^^^^^
  stack:             [{:}, 1, { 1, 3 }]

Step 873:
  program counter:   2034
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1, 3 }, 1); check if the second value is a member of the first; push result (True)
  source code:       assert self in (team1 | team2)
                            ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 874:
  program counter:   2035
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert self in (team1 | team2)
                     ^^^^^^
  stack:             [{:}]

Step 875:
  program counter:   2036
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert self in (team1 | team2)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 876:
  program counter:   2037
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start expression:  line=7 column=9
  end expression:    line=7 column=38

Step 877:
  program counter:   2038
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=9 column=5
  end statement:     line=9 column=30
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 878:
  program counter:   2039
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       game_leave(?thegame, self)
                                 ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 879:
  program counter:   2040
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 880:
  program counter:   2041
  hvm code:          LoadVar self
  explanation:       push value (1) of variable "self"
  source code:       game_leave(?thegame, self)
                                          ^^^^
  stack:             [{:}, [ ?thegame ], 1]

Step 881:
  program counter:   2042
  hvm code:          DelVar self
  explanation:       delete method variable self
  start expression:  line=9 column=26
  end expression:    line=9 column=29
  method variables:  { }

Step 882:
  program counter:   2043
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, [?thegame]); insert first value into the second; push result ([?thegame, 1])
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 1 ]]

Step 883:
  program counter:   2044
  hvm code:          Apply PC(1911)
  explanation:       pop an argument ([?thegame, 1]) and call method (1911: "game_leave")
  source code:       game_leave(?thegame, self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, [ ?thegame, 1 ]]

Step 884:
  program counter:   1911
  hvm code:          Frame game_leave(g, id)
  explanation:       pop argument ([?thegame, 1]), assign to (g, id), and run method "game_leave"
  module:            game
  start statement:   line=60 column=1
  end statement:     line=60 column=22
  source code:       def game_leave(g, id):
                     ^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  stack:             [{:}, [], 32706, {:}]

Step 885:
  program counter:   1912
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=61 column=5
  end statement:     line=61 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 886:
  program counter:   1913
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "lock"]

Step 887:
  program counter:   1914
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["lock"]]

Step 888:
  program counter:   1915
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32706, {:}, [], 30642, ?thegame["lock"]]

Step 889:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }]

================================================
Running thread T4: player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
method variables:
  c: ?thegame["players"]
  cnt: 0
  ctx: CONTEXT({'type': 'pc', 'value': '1004'})
  lk: ?thegame["lock"]
mode:  runnable
stack: ['{:}', '[]', '32386', '{ "self": 3 }', '[]', '29906', '{ "g": ?thegame, "id": 3 }']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T2: pc=955 runnable player(1) --> game_leave(?thegame, 1) --> acquire(?thegame["lock"])
    about to execute synch:35:     atomically when not !binsema:
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T5: pc=2018 runnable player(4)
    about to run method player with argument 4
shared variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1 ], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] }
state id: 8536
================================================

Step 890:
  program counter:   1032
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=53 column=20
  end statement:     line=55 column=6
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])

Step 891:
  program counter:   1033
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):

Step 892:
  program counter:   1034
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                           ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 893:
  program counter:   1035
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                          ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, False]

Step 894:
  program counter:   1036
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, True]

Step 895:
  program counter:   1037
  hvm code:          JumpCond False 1050
  explanation:       pop value (True), compare to False, and jump to 1050 if the same
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 896:
  program counter:   1038
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605)]

Step 897:
  program counter:   1039
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), []]

Step 898:
  program counter:   1040
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                      ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [], ?thegame["players"]]

Step 899:
  program counter:   1041
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [], {:}]

Step 900:
  program counter:   1042
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ {:} ]]

Step 901:
  program counter:   1043
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])) of variable "ctx"
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                         ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 902:
  program counter:   1044
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, PC(605), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 903:
  program counter:   1045
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])], PC(605)); push result (?PC(605)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]])
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?PC(605)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 904:
  program counter:   1046
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }])]) and call method (605: "multiplicity")
  start expression:  line=53 column=40
  end expression:    line=53 column=64
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 3 },[],29906,{ "g": ?thegame, "id": 3 }]))
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, [], 16738, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 905:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, 0]

Step 906:
  program counter:   1047
  hvm code:          LoadVar cnt
  explanation:       push value (0) of variable "cnt"
  module:            synch
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                                 ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, 0, 0]

Step 907:
  program counter:   1048
  hvm code:          2-ary <=
  explanation:       pop 2 values (0, 0); check if second value is less than or equal to the first; push result (True)
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, True]

Step 908:
  program counter:   1049
  hvm code:          Jump 1051
  explanation:       set program counter to 1051
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                               ^^^

Step 909:
  program counter:   1051
  hvm code:          JumpCond False 1056
  explanation:       pop value (True), compare to False, and jump to 1056 if the same
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 910:
  program counter:   1052
  hvm code:          DelVar c
  explanation:       delete method variable c
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                                                                    ^
  method variables:  { cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }

Step 911:
  program counter:   1053
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start expression:  line=53 column=72
  end expression:    line=53 column=72
  method variables:  { ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }

Step 912:
  program counter:   1054
  hvm code:          DelVar ctx
  explanation:       delete method variable ctx
  start expression:  line=53 column=72
  end expression:    line=53 column=72
  method variables:  { lk: ?thegame["lock"] }

Step 913:
  program counter:   1055
  hvm code:          Jump 1059
  explanation:       set program counter to 1059
  start expression:  line=53 column=72
  end expression:    line=53 column=72

Step 914:
  program counter:   1059
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 915:
  program counter:   1060
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=54 column=13
  end statement:     line=54 column=22
  source code:       !lk = True
                      ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 916:
  program counter:   1061
  hvm code:          DelVar lk
  explanation:       delete method variable lk
  start expression:  line=54 column=14
  end expression:    line=54 column=15
  method variables:  { }

Step 917:
  program counter:   1062
  hvm code:          Push True
  explanation:       push constant True
  source code:       !lk = True
                           ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }, ?thegame["lock"], True]

Step 918:
  program counter:   1063
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !lk = True
                     ^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 29906, { "g": ?thegame, "id": 3 }]

Step 919:
  program counter:   1064
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=53 column=20
  end statement:     line=53 column=72
  source code:       atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 920:
  program counter:   1065
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, None]

Step 921:
  program counter:   1870
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 922:
  program counter:   1871
  hvm code:          Jump 1820
  explanation:       set program counter to 1820
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 923:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 924:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team1"]

Step 925:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team1"]]

Step 926:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, { 1 }]

Step 927:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 1]

Step 928:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, 1, ?thegame]

Step 929:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 1, ?thegame, "team2"]

Step 930:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 1, ?thegame["team2"]]

Step 931:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, 1, { 3 }]

Step 932:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({ 3 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 1, 1]

Step 933:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (1, 1); check if the values are unequal; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, False]

Step 934:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 935:
  program counter:   1832
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 936:
  program counter:   1833
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                       ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "team1"]

Step 937:
  program counter:   1834
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                    ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["team1"]]

Step 938:
  program counter:   1835
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=52
  end expression:    line=48 column=59
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, { 1 }]

Step 939:
  program counter:   1836
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 1]

Step 940:
  program counter:   1837
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, 1, 0]

Step 941:
  program counter:   1838
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, False]

Step 942:
  program counter:   1839
  hvm code:          JumpCond True 1858
  explanation:       pop value (False), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 943:
  program counter:   1840
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                         ^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3]

Step 944:
  program counter:   1841
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                   ^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame]

Step 945:
  program counter:   1842
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                      ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame, "team1"]

Step 946:
  program counter:   1843
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                   ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame["team1"]]

Step 947:
  program counter:   1844
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=83
  end expression:    line=48 column=90
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, 3, { 1 }]

Step 948:
  program counter:   1845
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1 }, 3); check if the second value is a member of the first; push result (False)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, False]

Step 949:
  program counter:   1846
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  start expression:  line=48 column=73
  end expression:    line=48 column=90
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 950:
  program counter:   1847
  hvm code:          JumpCond False 1856
  explanation:       pop value (True), compare to False, and jump to 1856 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 951:
  program counter:   1848
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                                  ^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3]

Step 952:
  program counter:   1849
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                                            ^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame]

Step 953:
  program counter:   1850
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                                               ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame, "team2"]

Step 954:
  program counter:   1851
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                                            ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, 3, ?thegame["team2"]]

Step 955:
  program counter:   1852
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=48 column=108
  end expression:    line=48 column=115
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, 3, { 3 }]

Step 956:
  program counter:   1853
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 3 }, 3); check if the second value is a member of the first; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, True]

Step 957:
  program counter:   1854
  hvm code:          1-ary not
  explanation:       pop a value (True); logical not; push result (False)
  start expression:  line=48 column=98
  end expression:    line=48 column=115
  stack:             [{:}, [], 32386, { "self": 3 }, False]

Step 958:
  program counter:   1855
  hvm code:          Jump 1859
  explanation:       set program counter to 1859
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                                                                             ^^^

Step 959:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (False), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 960:
  program counter:   1872
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=52 column=5
  end statement:     line=52 column=32
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, []]

Step 961:
  program counter:   1873
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       teams = (g->team1, g->team2)
                              ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame]

Step 962:
  program counter:   1874
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       teams = (g->team1, g->team2)
                                 ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame, "team1"]

Step 963:
  program counter:   1875
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], ?thegame["team1"]]

Step 964:
  program counter:   1876
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=52 column=14
  end expression:    line=52 column=21
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, [], { 1 }]

Step 965:
  program counter:   1877
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ 1 }, []); insert first value into the second; push result ([{ 1 }])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 } ]]

Step 966:
  program counter:   1878
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       teams = (g->team1, g->team2)
                                        ^
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 } ], ?thegame]

Step 967:
  program counter:   1879
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       teams = (g->team1, g->team2)
                                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 } ], ?thegame, "team2"]

Step 968:
  program counter:   1880
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       teams = (g->team1, g->team2)
                                        ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 } ], ?thegame["team2"]]

Step 969:
  program counter:   1881
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=52 column=24
  end expression:    line=52 column=31
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 } ], { 3 }]

Step 970:
  program counter:   1882
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ 3 }, [{ 1 }]); insert first value into the second; push result ([{ 1 }, { 3 }])
  source code:       teams = (g->team1, g->team2)
                              ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [ { 1 }, { 3 } ]]

Step 971:
  program counter:   1883
  hvm code:          StoreVar teams
  explanation:       pop value ([{ 1 }, { 3 }]) and store locally in variable \"teams\"
  source code:       teams = (g->team1, g->team2)
                     ^^^^^^^
  method variables:  { g: ?thegame, id: 3, teams: [ { 1 }, { 3 } ] }
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 972:
  program counter:   1884
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=55 column=5
  end statement:     line=55 column=33
  source code:       g->exited = g->exited + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 973:
  program counter:   1885
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       g->exited = g->exited + [id,]
                        ^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "exited"]

Step 974:
  program counter:   1886
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       g->exited = g->exited + [id,]
                     ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"]]

Step 975:
  program counter:   1887
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->exited = g->exited + [id,]
                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], ?thegame]

Step 976:
  program counter:   1888
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       g->exited = g->exited + [id,]
                                    ^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], ?thegame, "exited"]

Step 977:
  program counter:   1889
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       g->exited = g->exited + [id,]
                                 ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], ?thegame["exited"]]

Step 978:
  program counter:   1890
  hvm code:          Load
  explanation:       pop address (?thegame["exited"]) and push value ([1])
  start expression:  line=55 column=17
  end expression:    line=55 column=25
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], [ 1 ]]

Step 979:
  program counter:   1891
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->exited = g->exited + [id,]
                                              ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], [ 1 ], []]

Step 980:
  program counter:   1892
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       g->exited = g->exited + [id,]
                                              ^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], [ 1 ], [], 3]

Step 981:
  program counter:   1893
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=55 column=30
  end expression:    line=55 column=31
  method variables:  { g: ?thegame, teams: [ { 1 }, { 3 } ] }

Step 982:
  program counter:   1894
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, []); insert first value into the second; push result ([3])
  source code:       g->exited = g->exited + [id,]
                                              ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], [ 1 ], [ 3 ]]

Step 983:
  program counter:   1895
  hvm code:          2-ary +
  explanation:       pop 2 values ([3], [1]); concatenate the lists; push result ([1, 3])
  source code:       g->exited = g->exited + [id,]
                                 ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["exited"], [ 1, 3 ]]

Step 984:
  program counter:   1896
  hvm code:          Store
  explanation:       pop value ([1, 3]) and address (?thegame["exited"]) and store
  source code:       g->exited = g->exited + [id,]
                     ^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 985:
  program counter:   1897
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=56 column=5
  end statement:     line=56 column=32
  source code:       notifyAll(?g->complete_game)
                                ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 986:
  program counter:   1898
  hvm code:          Push "complete_game"
  explanation:       push constant "complete_game"
  source code:       notifyAll(?g->complete_game)
                                   ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "complete_game"]

Step 987:
  program counter:   1899
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("complete_game", ?thegame); push result (?thegame["complete_game"])
  source code:       notifyAll(?g->complete_game)
                                ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["complete_game"]]

Step 988:
  program counter:   1900
  hvm code:          Apply PC(1097)
  explanation:       pop an argument (?thegame["complete_game"]) and call method (1097: "notifyAll")
  source code:       notifyAll(?g->complete_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> notifyAll(?thegame["complete_game"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, ?thegame["complete_game"]]

Step 989:
  program counter:   1097
  hvm code:          Frame notifyAll(c)
  explanation:       pop argument (?thegame["complete_game"]), assign to c, and run method "notifyAll"
  module:            synch
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["complete_game"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }]

Step 990:
  program counter:   1098
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> notifyAll(?thegame["complete_game"])

Step 991:
  program counter:   1099
  hvm code:          LoadVar c
  explanation:       push value (?thegame["complete_game"]) of variable "c"
  source code:       atomically !c = bag.empty()
                                 ^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"]]

Step 992:
  program counter:   1100
  hvm code:          DelVar c
  explanation:       delete method variable c
  start expression:  line=61 column=17
  end expression:    line=61 column=17
  method variables:  { }

Step 993:
  program counter:   1101
  hvm code:          Push PC(541)
  explanation:       push program counter constant 541 ()
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], PC(541)]

Step 994:
  program counter:   1102
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       atomically !c = bag.empty()
                                              ^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], PC(541), []]

Step 995:
  program counter:   1103
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([], PC(541)); push result (?PC(541)[[]])
  source code:       atomically !c = bag.empty()
                                     ^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], ?PC(541)[[]]]

Step 996:
  program counter:   1104
  hvm code:          Load
  explanation:       pop an argument ([]) and call method (541: "empty")
  start expression:  line=61 column=21
  end expression:    line=61 column=31
  call trace:        player(3) --> game_join(?thegame, 3) --> notifyAll(?thegame["complete_game"]) --> empty()
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, []]

Step 997:
  program counter:   541
  hvm code:          Frame empty()
  explanation:       pop argument () and run method "empty"
  module:            bag
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}]

Step 998:
  program counter:   542
  hvm code:          Push {:}
  explanation:       push constant {:}
  start statement:   line=2 column=5
  end statement:     line=2 column=12
  source code:       bg = {:}
                          ^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}, {:}]

Step 999:
  program counter:   543
  hvm code:          StoreVar bg
  explanation:       pop value ({:}) and store locally in variable \"bg\"
  source code:       bg = {:}
                     ^^^^
  method variables:  { bg: {:} }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], [], 17666, {:}]

Step 1000:
  program counter:   544
  hvm code:          ReturnOp(bg)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=1 column=23
  source code:       def empty() returns bg:
                     ^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { }
  call trace:        player(3) --> game_join(?thegame, 3) --> notifyAll(?thegame["complete_game"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }, ?thegame["complete_game"], {:}]

Step 1001:
  program counter:   1105
  hvm code:          Store
  explanation:       pop value ({:}) and address (?thegame["complete_game"]) and store
  module:            synch
  start statement:   line=61 column=16
  end statement:     line=61 column=31
  source code:       atomically !c = bag.empty()
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30402, { "g": ?thegame, "teams": [ { 1 }, { 3 } ] }]

Step 1002:
  program counter:   1106
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  source code:       atomically !c = bag.empty()
                                ^^^^^^^^^^^^^^^^

Step 1003:
  program counter:   1107
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=60 column=1
  end statement:     line=60 column=17
  source code:       def notifyAll(c):
                     ^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, teams: [ { 1 }, { 3 } ] }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, None]

Step 1004:
  program counter:   1901
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=56 column=5
  end statement:     line=56 column=32
  source code:       notifyAll(?g->complete_game)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 1005:
  program counter:   1902
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=58 column=5
  end statement:     line=58 column=21
  source code:       release(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame]

Step 1006:
  program counter:   1903
  hvm code:          DelVar g
  explanation:       delete method variable g
  start expression:  line=58 column=14
  end expression:    line=58 column=14
  method variables:  { teams: [ { 1 }, { 3 } ] }

Step 1007:
  program counter:   1904
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       release(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame, "lock"]

Step 1008:
  program counter:   1905
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       release(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, ?thegame["lock"]]

Step 1009:
  program counter:   1906
  hvm code:          Apply PC(973)
  explanation:       pop an argument (?thegame["lock"]) and call method (973: "release")
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> release(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, ?thegame["lock"]]

Step 1010:
  program counter:   973
  hvm code:          Frame release(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "release"
  module:            synch
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 1011:
  program counter:   974
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(3) --> game_join(?thegame, 3) --> release(?thegame["lock"])

Step 1012:
  program counter:   975
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 1 to 2: remains atomic
  start statement:   line=40 column=9
  end statement:     line=40 column=23
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1013:
  program counter:   976
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1014:
  program counter:   977
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  source code:       assert !binsema
                             ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"]]

Step 1015:
  program counter:   978
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (True)
  source code:       assert !binsema
                            ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, True]

Step 1016:
  program counter:   979
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert !binsema
                     ^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 1017:
  program counter:   980
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1018:
  program counter:   981
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 2 to 1: remains atomic
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1019:
  program counter:   982
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=41 column=9
  end statement:     line=41 column=24
  source code:       !binsema = False
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"]]

Step 1020:
  program counter:   983
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=41 column=10
  end expression:    line=41 column=16
  method variables:  { }

Step 1021:
  program counter:   984
  hvm code:          Push False
  explanation:       push constant False
  source code:       !binsema = False
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }, ?thegame["lock"], False]

Step 1022:
  program counter:   985
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !binsema = False
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 3 }, [], 30498, { "teams": [ { 1 }, { 3 } ] }]

Step 1023:
  program counter:   986
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^

Step 1024:
  program counter:   987
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { teams: [ { 1 }, { 3 } ] }
  call trace:        player(3) --> game_join(?thegame, 3)
  stack:             [{:}, [], 32386, { "self": 3 }, None]

Step 1025:
  program counter:   1907
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=58 column=5
  end statement:     line=58 column=21
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 3 }]

Step 1026:
  program counter:   1908
  hvm code:          ReturnOp(teams)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { self: 3 }
  call trace:        player(3)
  stack:             [{:}, [ { 1 }, { 3 } ]]

Step 1027:
  program counter:   2025
  hvm code:          StoreVar (team1, team2)
  explanation:       pop value ([{ 1 }, { 3 }]) and store locally in variable \"(team1, team2)\"
  module:            __main__
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                     ^^^^^^^^^^^^^^^^^^^^
  method variables:  { self: 3, team1: { 1 }, team2: { 3 } }
  stack:             [{:}]

Step 1028:
  program counter:   2026
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=7 column=9
  end statement:     line=7 column=38
  source code:       assert self in (team1 | team2)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 1029:
  program counter:   2027
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=7 column=9
  end expression:    line=7 column=38

Step 1030:
  program counter:   2028
  hvm code:          LoadVar self
  explanation:       push value (3) of variable "self"
  source code:       assert self in (team1 | team2)
                            ^^^^
  stack:             [{:}, 3]

Step 1031:
  program counter:   2029
  hvm code:          LoadVar team1
  explanation:       push value ({ 1 }) of variable "team1"
  source code:       assert self in (team1 | team2)
                                     ^^^^^
  stack:             [{:}, 3, { 1 }]

Step 1032:
  program counter:   2030
  hvm code:          DelVar team1
  explanation:       delete method variable team1
  start expression:  line=7 column=25
  end expression:    line=7 column=29
  method variables:  { self: 3, team2: { 3 } }

Step 1033:
  program counter:   2031
  hvm code:          LoadVar team2
  explanation:       push value ({ 3 }) of variable "team2"
  source code:       assert self in (team1 | team2)
                                             ^^^^^
  stack:             [{:}, 3, { 1 }, { 3 }]

Step 1034:
  program counter:   2032
  hvm code:          DelVar team2
  explanation:       delete method variable team2
  start expression:  line=7 column=33
  end expression:    line=7 column=37
  method variables:  { self: 3 }

Step 1035:
  program counter:   2033
  hvm code:          2-ary |
  explanation:       pop 2 values ({ 3 }, { 1 }); union; push result ({ 1, 3 })
  source code:       assert self in (team1 | team2)
                                     ^^^^^^^^^^^^^
  stack:             [{:}, 3, { 1, 3 }]

Step 1036:
  program counter:   2034
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1, 3 }, 3); check if the second value is a member of the first; push result (True)
  source code:       assert self in (team1 | team2)
                            ^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, True]

Step 1037:
  program counter:   2035
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert self in (team1 | team2)
                     ^^^^^^
  stack:             [{:}]

Step 1038:
  program counter:   2036
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert self in (team1 | team2)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 1039:
  program counter:   2037
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start expression:  line=7 column=9
  end expression:    line=7 column=38

Step 1040:
  program counter:   2038
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=9 column=5
  end statement:     line=9 column=30
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 1041:
  program counter:   2039
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       game_leave(?thegame, self)
                                 ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 1042:
  program counter:   2040
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 1043:
  program counter:   2041
  hvm code:          LoadVar self
  explanation:       push value (3) of variable "self"
  source code:       game_leave(?thegame, self)
                                          ^^^^
  stack:             [{:}, [ ?thegame ], 3]

Step 1044:
  program counter:   2042
  hvm code:          DelVar self
  explanation:       delete method variable self
  start expression:  line=9 column=26
  end expression:    line=9 column=29
  method variables:  { }

Step 1045:
  program counter:   2043
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, [?thegame]); insert first value into the second; push result ([?thegame, 3])
  source code:       game_leave(?thegame, self)
                                ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 3 ]]

Step 1046:
  program counter:   2044
  hvm code:          Apply PC(1911)
  explanation:       pop an argument ([?thegame, 3]) and call method (1911: "game_leave")
  source code:       game_leave(?thegame, self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, [ ?thegame, 3 ]]

Step 1047:
  program counter:   1911
  hvm code:          Frame game_leave(g, id)
  explanation:       pop argument ([?thegame, 3]), assign to (g, id), and run method "game_leave"
  module:            game
  start statement:   line=60 column=1
  end statement:     line=60 column=22
  source code:       def game_leave(g, id):
                     ^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  stack:             [{:}, [], 32706, {:}]

Step 1048:
  program counter:   1912
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=61 column=5
  end statement:     line=61 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1049:
  program counter:   1913
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "lock"]

Step 1050:
  program counter:   1914
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["lock"]]

Step 1051:
  program counter:   1915
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32706, {:}, [], 30642, ?thegame["lock"]]

Step 1052:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }]

Step 1053:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(3) --> game_leave(?thegame, 3) --> acquire(?thegame["lock"])

Step 1054:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 1055:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 1056:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }, False]

Step 1057:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }, True]

Step 1058:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }]

Step 1059:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 1060:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1061:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }, ?thegame["lock"]]

Step 1062:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 1063:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }, ?thegame["lock"], True]

Step 1064:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": { 3 }, "waiting": [] } }
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 3 }]

Step 1065:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1066:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 3 }
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, None]

Step 1067:
  program counter:   1916
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=61 column=5
  end statement:     line=61 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1068:
  program counter:   1917
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=63 column=5
  end statement:     line=63 column=48
  source code:       while (len(g->exited) != g->game_headcount):
                                ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1069:
  program counter:   1918
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       while (len(g->exited) != g->game_headcount):
                                   ^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "exited"]

Step 1070:
  program counter:   1919
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       while (len(g->exited) != g->game_headcount):
                                ^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["exited"]]

Step 1071:
  program counter:   1920
  hvm code:          Load
  explanation:       pop address (?thegame["exited"]) and push value ([1, 3])
  start expression:  line=63 column=16
  end expression:    line=63 column=24
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, [ 1, 3 ]]

Step 1072:
  program counter:   1921
  hvm code:          1-ary len
  explanation:       pop a value ([1, 3]); compute the length of the list; push result (2)
  source code:       while (len(g->exited) != g->game_headcount):
                            ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2]

Step 1073:
  program counter:   1922
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->exited) != g->game_headcount):
                                              ^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame]

Step 1074:
  program counter:   1923
  hvm code:          Push "game_headcount"
  explanation:       push constant "game_headcount"
  source code:       while (len(g->exited) != g->game_headcount):
                                                 ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame, "game_headcount"]

Step 1075:
  program counter:   1924
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("game_headcount", ?thegame); push result (?thegame["game_headcount"])
  source code:       while (len(g->exited) != g->game_headcount):
                                              ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame["game_headcount"]]

Step 1076:
  program counter:   1925
  hvm code:          Load
  explanation:       pop address (?thegame["game_headcount"]) and push value (2)
  start expression:  line=63 column=30
  end expression:    line=63 column=46
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, 2, 2]

Step 1077:
  program counter:   1926
  hvm code:          2-ary !=
  explanation:       pop 2 values (2, 2); check if the values are unequal; push result (False)
  source code:       while (len(g->exited) != g->game_headcount):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, False]

Step 1078:
  program counter:   1927
  hvm code:          JumpCond False 1940
  explanation:       pop value (False), compare to False, and jump to 1940 if the same
  source code:       while (len(g->exited) != g->game_headcount):
                     ^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1079:
  program counter:   1940
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  start statement:   line=67 column=5
  end statement:     line=67 column=22
  source code:       if id in g->team1:
                        ^^
  stack:             [{:}, [], 32706, {:}, 3]

Step 1080:
  program counter:   1941
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       if id in g->team1:
                              ^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame]

Step 1081:
  program counter:   1942
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if id in g->team1:
                                 ^^^^^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame, "team1"]

Step 1082:
  program counter:   1943
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if id in g->team1:
                              ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame["team1"]]

Step 1083:
  program counter:   1944
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=67 column=14
  end expression:    line=67 column=21
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, 3, { 1 }]

Step 1084:
  program counter:   1945
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1 }, 3); check if the second value is a member of the first; push result (False)
  source code:       if id in g->team1:
                        ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, False]

Step 1085:
  program counter:   1946
  hvm code:          JumpCond False 1962
  explanation:       pop value (False), compare to False, and jump to 1962 if the same
  source code:       if id in g->team1:
                     ^^
  stack:             [{:}, [], 32706, {:}]

Step 1086:
  program counter:   1962
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  start statement:   line=69 column=5
  end statement:     line=69 column=24
  source code:       elif id in g->team2:
                          ^^
  stack:             [{:}, [], 32706, {:}, 3]

Step 1087:
  program counter:   1963
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       elif id in g->team2:
                                ^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame]

Step 1088:
  program counter:   1964
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       elif id in g->team2:
                                   ^^^^^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame, "team2"]

Step 1089:
  program counter:   1965
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       elif id in g->team2:
                                ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 3, ?thegame["team2"]]

Step 1090:
  program counter:   1966
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=69 column=16
  end expression:    line=69 column=23
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, 3, { 3 }]

Step 1091:
  program counter:   1967
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 3 }, 3); check if the second value is a member of the first; push result (True)
  source code:       elif id in g->team2:
                          ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, True]

Step 1092:
  program counter:   1968
  hvm code:          JumpCond False 1983
  explanation:       pop value (True), compare to False, and jump to 1983 if the same
  source code:       elif id in g->team2:
                     ^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1093:
  program counter:   1969
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=70 column=9
  end statement:     line=70 column=39
  source code:       g->team2 = remove(g->team2, id)
                     ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1094:
  program counter:   1970
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       g->team2 = remove(g->team2, id)
                        ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "team2"]

Step 1095:
  program counter:   1971
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       g->team2 = remove(g->team2, id)
                     ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"]]

Step 1096:
  program counter:   1972
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->team2 = remove(g->team2, id)
                                       ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], []]

Step 1097:
  program counter:   1973
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team2 = remove(g->team2, id)
                                       ^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], ?thegame]

Step 1098:
  program counter:   1974
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       g->team2 = remove(g->team2, id)
                                          ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], ?thegame, "team2"]

Step 1099:
  program counter:   1975
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       g->team2 = remove(g->team2, id)
                                       ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], ?thegame["team2"]]

Step 1100:
  program counter:   1976
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({ 3 })
  start expression:  line=70 column=27
  end expression:    line=70 column=34
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], { 3 }]

Step 1101:
  program counter:   1977
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ 3 }, []); insert first value into the second; push result ([{ 3 }])
  source code:       g->team2 = remove(g->team2, id)
                                       ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [ { 3 } ]]

Step 1102:
  program counter:   1978
  hvm code:          LoadVar id
  explanation:       push value (3) of variable "id"
  source code:       g->team2 = remove(g->team2, id)
                                                 ^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [ { 3 } ], 3]

Step 1103:
  program counter:   1979
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=70 column=37
  end expression:    line=70 column=38
  method variables:  { g: ?thegame }

Step 1104:
  program counter:   1980
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (3, [{ 3 }]); insert first value into the second; push result ([{ 3 }, 3])
  source code:       g->team2 = remove(g->team2, id)
                                       ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [ { 3 }, 3 ]]

Step 1105:
  program counter:   1981
  hvm code:          Apply PC(1306)
  explanation:       pop an argument ([{ 3 }, 3]) and call method (1306: "remove")
  source code:       g->team2 = remove(g->team2, id)
                                ^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3) --> remove({ 3 }, 3)
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, [ { 3 }, 3 ]]

Step 1106:
  program counter:   1306
  hvm code:          Frame remove(s, elt)
  explanation:       pop argument ([{ 3 }, 3]), assign to (s, elt), and run method "remove"
  module:            set
  start statement:   line=24 column=1
  end statement:     line=24 column=34
  source code:       def remove(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { elt: 3, s: { 3 } }
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }]

Step 1107:
  program counter:   1307
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=25 column=5
  end statement:     line=25 column=22
  source code:       result = s - {elt}
                              ^

Step 1108:
  program counter:   1308
  hvm code:          LoadVar s
  explanation:       push value ({ 3 }) of variable "s"
  start expression:  line=25 column=14
  end expression:    line=25 column=14
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }, { 3 }]

Step 1109:
  program counter:   1309
  hvm code:          DelVar s
  explanation:       delete method variable s
  start expression:  line=25 column=14
  end expression:    line=25 column=14
  method variables:  { elt: 3 }

Step 1110:
  program counter:   1310
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       result = s - {elt}
                                   ^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }, { 3 }, {}]

Step 1111:
  program counter:   1311
  hvm code:          LoadVar elt
  explanation:       push value (3) of variable "elt"
  start expression:  line=25 column=19
  end expression:    line=25 column=21
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }, { 3 }, {}, 3]

Step 1112:
  program counter:   1312
  hvm code:          DelVar elt
  explanation:       delete method variable elt
  start expression:  line=25 column=19
  end expression:    line=25 column=21
  method variables:  { }

Step 1113:
  program counter:   1313
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (3, {}); insert first value into the second; push result ({ 3 })
  start expression:  line=25 column=19
  end expression:    line=25 column=21
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }, { 3 }, { 3 }]

Step 1114:
  program counter:   1314
  hvm code:          2-ary -
  explanation:       pop 2 values ({ 3 }, { 3 }); the second integer minus the first; push result ({})
  source code:       result = s - {elt}
                              ^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }, {}]

Step 1115:
  program counter:   1315
  hvm code:          StoreVar result
  explanation:       pop value ({}) and store locally in variable \"result\"
  source code:       result = s - {elt}
                     ^^^^^^^^
  method variables:  { result: {} }
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], [], 31698, { "g": ?thegame }]

Step 1116:
  program counter:   1316
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=24 column=1
  end statement:     line=24 column=34
  source code:       def remove(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame }
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, ?thegame["team2"], {}]

Step 1117:
  program counter:   1982
  hvm code:          Store
  explanation:       pop value ({}) and address (?thegame["team2"]) and store
  module:            game
  start statement:   line=70 column=9
  end statement:     line=70 column=39
  source code:       g->team2 = remove(g->team2, id)
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": {}, "waiting": [] } }
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}]

Step 1118:
  program counter:   1983
  hvm code:          DelVar id
  explanation:       delete method variable id
  start statement:   line=73 column=5
  end statement:     line=73 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^

Step 1119:
  program counter:   1984
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start expression:  line=73 column=13
  end expression:    line=73 column=13
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1120:
  program counter:   1985
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "team1"]

Step 1121:
  program counter:   1986
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"]]

Step 1122:
  program counter:   1987
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=73 column=13
  end expression:    line=73 column=20
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, { 1 }]

Step 1123:
  program counter:   1988
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 1]

Step 1124:
  program counter:   1989
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32706, {:}, 1, 0]

Step 1125:
  program counter:   1990
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, False]

Step 1126:
  program counter:   1991
  hvm code:          JumpCond False 2000
  explanation:       pop value (False), compare to False, and jump to 2000 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1127:
  program counter:   2000
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=73 column=8
  end expression:    line=73 column=52
  stack:             [{:}, [], 32706, {:}, False]

Step 1128:
  program counter:   2001
  hvm code:          JumpCond False 2007
  explanation:       pop value (False), compare to False, and jump to 2007 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32706, {:}]

Step 1129:
  program counter:   2007
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=76 column=5
  end statement:     line=76 column=21
  source code:       release(?g->lock)
                              ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1130:
  program counter:   2008
  hvm code:          DelVar g
  explanation:       delete method variable g
  start expression:  line=76 column=14
  end expression:    line=76 column=14
  method variables:  { }

Step 1131:
  program counter:   2009
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       release(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "lock"]

Step 1132:
  program counter:   2010
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       release(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["lock"]]

Step 1133:
  program counter:   2011
  hvm code:          Apply PC(973)
  explanation:       pop an argument (?thegame["lock"]) and call method (973: "release")
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3) --> release(?thegame["lock"])
  stack:             [{:}, [], 32706, {:}, [], 32178, ?thegame["lock"]]

Step 1134:
  program counter:   973
  hvm code:          Frame release(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "release"
  module:            synch
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1135:
  program counter:   974
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3) --> release(?thegame["lock"])

Step 1136:
  program counter:   975
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 1 to 2: remains atomic
  start statement:   line=40 column=9
  end statement:     line=40 column=23
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1137:
  program counter:   976
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1138:
  program counter:   977
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  source code:       assert !binsema
                             ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"]]

Step 1139:
  program counter:   978
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (True)
  source code:       assert !binsema
                            ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, True]

Step 1140:
  program counter:   979
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert !binsema
                     ^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1141:
  program counter:   980
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1142:
  program counter:   981
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 2 to 1: remains atomic
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1143:
  program counter:   982
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=41 column=9
  end statement:     line=41 column=24
  source code:       !binsema = False
                      ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"]]

Step 1144:
  program counter:   983
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=41 column=10
  end expression:    line=41 column=16
  method variables:  { }

Step 1145:
  program counter:   984
  hvm code:          Push False
  explanation:       push constant False
  source code:       !binsema = False
                                ^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"], False]

Step 1146:
  program counter:   985
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !binsema = False
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": {}, "waiting": [] } }
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1147:
  program counter:   986
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^

Step 1148:
  program counter:   987
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3) --> game_leave(?thegame, 3)
  stack:             [{:}, [], 32706, {:}, None]

Step 1149:
  program counter:   2012
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=76 column=5
  end statement:     line=76 column=21
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1150:
  program counter:   2013
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=60 column=1
  end statement:     line=60 column=22
  source code:       def game_leave(g, id):
                     ^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(3)
  stack:             [{:}, None]

Step 1151:
  program counter:   2045
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            __main__
  start statement:   line=9 column=5
  end statement:     line=9 column=30
  source code:       game_leave(?thegame, self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 1152:
  program counter:   2046
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=5 column=1
  end statement:     line=5 column=17
  source code:       def player(self):
                     ^^^^^^^^^^^^^^^^^
  new mode:          terminated
  stack:             [None]

================================================
Running thread T5: player(4)
mode:  runnable
stack: ['4']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T2: pc=955 runnable player(1) --> game_leave(?thegame, 1) --> acquire(?thegame["lock"])
    about to execute synch:35:     atomically when not !binsema:
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T4: pc=2046 terminated player(3)
shared variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": {:}, "team1": { 1 }, "team2": {}, "waiting": [] }
state id: 25176
================================================

Step 1153:
  program counter:   2018
  hvm code:          Frame player(self)
  explanation:       pop argument (4), assign to self, and run method "player"
  start expression:  line=5 column=1
  end expression:    line=5 column=17
  method variables:  { self: 4 }
  call trace:        player(4)
  stack:             [{:}]

Step 1154:
  program counter:   2019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 1155:
  program counter:   2020
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                     ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 1156:
  program counter:   2021
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 1157:
  program counter:   2022
  hvm code:          LoadVar self
  explanation:       push value (4) of variable "self"
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                              ^^^^
  stack:             [{:}, [ ?thegame ], 4]

Step 1158:
  program counter:   2023
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (4, [?thegame]); insert first value into the second; push result ([?thegame, 4])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 4 ]]

Step 1159:
  program counter:   2024
  hvm code:          Apply PC(1779)
  explanation:       pop an argument ([?thegame, 4]) and call method (1779: "game_join")
  source code:       let (team1, team2) = game_join(?thegame, self):
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, [ ?thegame, 4 ]]

Step 1160:
  program counter:   1779
  hvm code:          Frame game_join(g, id)
  explanation:       pop argument ([?thegame, 4]), assign to (g, id), and run method "game_join"
  module:            game
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 4 }
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1161:
  program counter:   1780
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame]

Step 1162:
  program counter:   1781
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame, "lock"]

Step 1163:
  program counter:   1782
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["lock"]]

Step 1164:
  program counter:   1783
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, ?thegame["lock"]]

Step 1165:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }]

Step 1166:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(4) --> game_join(?thegame, 4) --> acquire(?thegame["lock"])

Step 1167:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 1168:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }, ?thegame["lock"]]

Step 1169:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }, False]

Step 1170:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }, True]

Step 1171:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }]

Step 1172:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 1173:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1174:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }, ?thegame["lock"]]

Step 1175:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 1176:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }, ?thegame["lock"], True]

Step 1177:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": {}, "waiting": [] } }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 28530, { "g": ?thegame, "id": 4 }]

Step 1178:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1179:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 4 }
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }, None]

Step 1180:
  program counter:   1784
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1181:
  program counter:   1785
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=40 column=5
  end statement:     line=40 column=35
  source code:       g->waiting = g->waiting + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame]

Step 1182:
  program counter:   1786
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame, "waiting"]

Step 1183:
  program counter:   1787
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"]]

Step 1184:
  program counter:   1788
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->waiting = g->waiting + [id,]
                                  ^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], ?thegame]

Step 1185:
  program counter:   1789
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], ?thegame, "waiting"]

Step 1186:
  program counter:   1790
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], ?thegame["waiting"]]

Step 1187:
  program counter:   1791
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([])
  start expression:  line=40 column=18
  end expression:    line=40 column=27
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], []]

Step 1188:
  program counter:   1792
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], [], []]

Step 1189:
  program counter:   1793
  hvm code:          LoadVar id
  explanation:       push value (4) of variable "id"
  source code:       g->waiting = g->waiting + [id,]
                                                ^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], [], [], 4]

Step 1190:
  program counter:   1794
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (4, []); insert first value into the second; push result ([4])
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], [], [ 4 ]]

Step 1191:
  program counter:   1795
  hvm code:          2-ary +
  explanation:       pop 2 values ([4], []); concatenate the lists; push result ([4])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["waiting"], [ 4 ]]

Step 1192:
  program counter:   1796
  hvm code:          Store
  explanation:       pop value ([4]) and address (?thegame["waiting"]) and store
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": {:}, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1193:
  program counter:   1797
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=43 column=5
  end statement:     line=43 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame]

Step 1194:
  program counter:   1798
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame, "team1"]

Step 1195:
  program counter:   1799
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["team1"]]

Step 1196:
  program counter:   1800
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=43 column=13
  end expression:    line=43 column=20
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }, { 1 }]

Step 1197:
  program counter:   1801
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, 1]

Step 1198:
  program counter:   1802
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32386, { "self": 4 }, 1, 0]

Step 1199:
  program counter:   1803
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, False]

Step 1200:
  program counter:   1804
  hvm code:          JumpCond False 1813
  explanation:       pop value (False), compare to False, and jump to 1813 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1201:
  program counter:   1813
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=43 column=8
  end expression:    line=43 column=52
  stack:             [{:}, [], 32386, { "self": 4 }, False]

Step 1202:
  program counter:   1814
  hvm code:          JumpCond False 1820
  explanation:       pop value (False), compare to False, and jump to 1820 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1203:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame]

Step 1204:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame, "team1"]

Step 1205:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, ?thegame["team1"]]

Step 1206:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }, { 1 }]

Step 1207:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, 1]

Step 1208:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 4 }, 1, ?thegame]

Step 1209:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, 1, ?thegame, "team2"]

Step 1210:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, 1, ?thegame["team2"]]

Step 1211:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(4) --> game_join(?thegame, 4)
  stack:             [{:}, [], 32386, { "self": 4 }, 1, {}]

Step 1212:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, 1, 0]

Step 1213:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 1); check if the values are unequal; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, True]

Step 1214:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (True), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1215:
  program counter:   1858
  hvm code:          Push True
  explanation:       push constant True
  start expression:  line=48 column=11
  end expression:    line=48 column=117
  stack:             [{:}, [], 32386, { "self": 4 }, True]

Step 1216:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (True), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }]

Step 1217:
  program counter:   1860
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, []]

Step 1218:
  program counter:   1861
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                           ^
  stack:             [{:}, [], 32386, { "self": 4 }, [], ?thegame]

Step 1219:
  program counter:   1862
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       wait(?g->players, ?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], ?thegame, "players"]

Step 1220:
  program counter:   1863
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("players", ?thegame); push result (?thegame["players"])
  source code:       wait(?g->players, ?g->lock)
                           ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], ?thegame["players"]]

Step 1221:
  program counter:   1864
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["players"], []); insert first value into the second; push result ([?thegame["players"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [ ?thegame["players"] ]]

Step 1222:
  program counter:   1865
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                                        ^
  stack:             [{:}, [], 32386, { "self": 4 }, [ ?thegame["players"] ], ?thegame]

Step 1223:
  program counter:   1866
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       wait(?g->players, ?g->lock)
                                           ^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [ ?thegame["players"] ], ?thegame, "lock"]

Step 1224:
  program counter:   1867
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       wait(?g->players, ?g->lock)
                                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [ ?thegame["players"] ], ?thegame["lock"]]

Step 1225:
  program counter:   1868
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["lock"], [?thegame["players"]]); insert first value into the second; push result ([?thegame["players"], ?thegame["lock"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [ ?thegame["players"], ?thegame["lock"] ]]

Step 1226:
  program counter:   1869
  hvm code:          Apply PC(998)
  explanation:       pop an argument ([?thegame["players"], ?thegame["lock"]]) and call method (998: "wait")
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, [ ?thegame["players"], ?thegame["lock"] ]]

Step 1227:
  program counter:   998
  hvm code:          Frame wait(c, lk)
  explanation:       pop argument ([?thegame["players"], ?thegame["lock"]]), assign to (c, lk), and run method "wait"
  module:            synch
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1228:
  program counter:   999
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=47 column=5
  end statement:     line=47 column=15
  source code:       var cnt = 0
                               ^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, 0]

Step 1229:
  program counter:   1000
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  source code:       var cnt = 0
                     ^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1230:
  program counter:   1001
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start statement:   line=48 column=5
  end statement:     line=48 column=24
  source code:       let (), ctx = save():
                                       ^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }

Step 1231:
  program counter:   1002
  hvm code:          Push ()
  explanation:       push constant ()
  start expression:  line=48 column=23
  end expression:    line=48 column=24
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, []]

Step 1232:
  program counter:   1003
  hvm code:          Save
  explanation:       pop a value and save context
  source code:       let (), ctx = save():
                                   ^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, [ [], CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1233:
  program counter:   1004
  hvm code:          Continue
  explanation:       a no-op, must follow a Stop or Save operation
  start expression:  line=48 column=19
  end expression:    line=48 column=24

Step 1234:
  program counter:   1005
  hvm code:          StoreVar ((), ctx)
  explanation:       pop value ([[], CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])]) and store locally in variable \"((), ctx)\"
  source code:       let (), ctx = save():
                     ^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1235:
  program counter:   1006
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])

Step 1236:
  program counter:   1007
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605)]

Step 1237:
  program counter:   1008
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), []]

Step 1238:
  program counter:   1009
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                             ^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), [], ?thegame["players"]]

Step 1239:
  program counter:   1010
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), [], {:}]

Step 1240:
  program counter:   1011
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), [ {:} ]]

Step 1241:
  program counter:   1012
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])) of variable "ctx"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 1242:
  program counter:   1013
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, PC(605), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1243:
  program counter:   1014
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])], PC(605)); push result (?PC(605)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])]])
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?PC(605)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 1244:
  program counter:   1015
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])]) and call method (605: "multiplicity")
  start expression:  line=50 column=19
  end expression:    line=50 column=43
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]))
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, [], 16242, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1245:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, 0]

Step 1246:
  program counter:   1016
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  module:            synch
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                     ^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1247:
  program counter:   1017
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                      ^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"]]

Step 1248:
  program counter:   1018
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696)]

Step 1249:
  program counter:   1019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), []]

Step 1250:
  program counter:   1020
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       !c = bag.add(!c, ctx)
                                   ^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), [], ?thegame["players"]]

Step 1251:
  program counter:   1021
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({:})
  source code:       !c = bag.add(!c, ctx)
                                  ^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), [], {:}]

Step 1252:
  program counter:   1022
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({:}, []); insert first value into the second; push result ([{:}])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), [ {:} ]]

Step 1253:
  program counter:   1023
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])) of variable "ctx"
  source code:       !c = bag.add(!c, ctx)
                                      ^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), [ {:} ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 1254:
  program counter:   1024
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]), [{:}]); insert first value into the second; push result ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], PC(696), [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1255:
  program counter:   1025
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])], PC(696)); push result (?PC(696)[[{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])]])
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], ?PC(696)[[ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 1256:
  program counter:   1026
  hvm code:          Load
  explanation:       pop an argument ([{:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }])]) and call method (696: "add")
  start expression:  line=51 column=18
  end expression:    line=51 column=33
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"]) --> add({:}, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]))
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], [], 16418, [ {:}, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1257:
  program counter:   696
  hvm code:          Frame add(bg, elt)
  explanation:       start of method add
  module:            bag
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["players"], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 1258:
  program counter:   1027
  hvm code:          Store
  explanation:       pop value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }) and address (?thegame["players"]) and store
  module:            synch
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                     ^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1259:
  program counter:   1028
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=52 column=13
  end statement:     line=52 column=23
  source code:       !lk = False
                      ^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["lock"]]

Step 1260:
  program counter:   1029
  hvm code:          Push False
  explanation:       push constant False
  source code:       !lk = False
                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }, ?thegame["lock"], False]

Step 1261:
  program counter:   1030
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !lk = False
                     ^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  stack:             [{:}, [], 32386, { "self": 4 }, [], 29906, { "g": ?thegame, "id": 4 }]

Step 1262:
  program counter:   1031
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^

================================================
Running thread T2: player(1) --> game_leave(?thegame, 1) --> acquire(?thegame["lock"])
method variables:
  binsema: ?thegame["lock"]
mode:  runnable
stack: ['{:}', '[]', '32706', '{:}', '[]', '30642', '{ "g": ?thegame, "id": 1 }']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T3: pc=2018 runnable player(2)
    about to run method player with argument 2
  T4: pc=2046 terminated player(3)
  T5: pc=1032 blocked player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
shared variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] }
state id: 37088
================================================

Step 1263:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(1) --> game_leave(?thegame, 1) --> acquire(?thegame["lock"])

Step 1264:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 1265:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 1266:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }, False]

Step 1267:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }, True]

Step 1268:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }]

Step 1269:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 1270:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1271:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }, ?thegame["lock"]]

Step 1272:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 1273:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }, ?thegame["lock"], True]

Step 1274:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  stack:             [{:}, [], 32706, {:}, [], 30642, { "g": ?thegame, "id": 1 }]

Step 1275:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1276:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 1 }
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, None]

Step 1277:
  program counter:   1916
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=61 column=5
  end statement:     line=61 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1278:
  program counter:   1917
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=63 column=5
  end statement:     line=63 column=48
  source code:       while (len(g->exited) != g->game_headcount):
                                ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1279:
  program counter:   1918
  hvm code:          Push "exited"
  explanation:       push constant "exited"
  source code:       while (len(g->exited) != g->game_headcount):
                                   ^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "exited"]

Step 1280:
  program counter:   1919
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("exited", ?thegame); push result (?thegame["exited"])
  source code:       while (len(g->exited) != g->game_headcount):
                                ^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["exited"]]

Step 1281:
  program counter:   1920
  hvm code:          Load
  explanation:       pop address (?thegame["exited"]) and push value ([1, 3])
  start expression:  line=63 column=16
  end expression:    line=63 column=24
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, [ 1, 3 ]]

Step 1282:
  program counter:   1921
  hvm code:          1-ary len
  explanation:       pop a value ([1, 3]); compute the length of the list; push result (2)
  source code:       while (len(g->exited) != g->game_headcount):
                            ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2]

Step 1283:
  program counter:   1922
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->exited) != g->game_headcount):
                                              ^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame]

Step 1284:
  program counter:   1923
  hvm code:          Push "game_headcount"
  explanation:       push constant "game_headcount"
  source code:       while (len(g->exited) != g->game_headcount):
                                                 ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame, "game_headcount"]

Step 1285:
  program counter:   1924
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("game_headcount", ?thegame); push result (?thegame["game_headcount"])
  source code:       while (len(g->exited) != g->game_headcount):
                                              ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 2, ?thegame["game_headcount"]]

Step 1286:
  program counter:   1925
  hvm code:          Load
  explanation:       pop address (?thegame["game_headcount"]) and push value (2)
  start expression:  line=63 column=30
  end expression:    line=63 column=46
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, 2, 2]

Step 1287:
  program counter:   1926
  hvm code:          2-ary !=
  explanation:       pop 2 values (2, 2); check if the values are unequal; push result (False)
  source code:       while (len(g->exited) != g->game_headcount):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, False]

Step 1288:
  program counter:   1927
  hvm code:          JumpCond False 1940
  explanation:       pop value (False), compare to False, and jump to 1940 if the same
  source code:       while (len(g->exited) != g->game_headcount):
                     ^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1289:
  program counter:   1940
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  start statement:   line=67 column=5
  end statement:     line=67 column=22
  source code:       if id in g->team1:
                        ^^
  stack:             [{:}, [], 32706, {:}, 1]

Step 1290:
  program counter:   1941
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       if id in g->team1:
                              ^
  stack:             [{:}, [], 32706, {:}, 1, ?thegame]

Step 1291:
  program counter:   1942
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if id in g->team1:
                                 ^^^^^
  stack:             [{:}, [], 32706, {:}, 1, ?thegame, "team1"]

Step 1292:
  program counter:   1943
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if id in g->team1:
                              ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 1, ?thegame["team1"]]

Step 1293:
  program counter:   1944
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=67 column=14
  end expression:    line=67 column=21
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, 1, { 1 }]

Step 1294:
  program counter:   1945
  hvm code:          2-ary in
  explanation:       pop 2 values ({ 1 }, 1); check if the second value is a member of the first; push result (True)
  source code:       if id in g->team1:
                        ^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, True]

Step 1295:
  program counter:   1946
  hvm code:          JumpCond False 1962
  explanation:       pop value (True), compare to False, and jump to 1962 if the same
  source code:       if id in g->team1:
                     ^^
  stack:             [{:}, [], 32706, {:}]

Step 1296:
  program counter:   1947
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=68 column=9
  end statement:     line=68 column=36
  source code:       g->team1 = add(g->team2, id)
                     ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1297:
  program counter:   1948
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       g->team1 = add(g->team2, id)
                        ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "team1"]

Step 1298:
  program counter:   1949
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       g->team1 = add(g->team2, id)
                     ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"]]

Step 1299:
  program counter:   1950
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->team1 = add(g->team2, id)
                                    ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], []]

Step 1300:
  program counter:   1951
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->team1 = add(g->team2, id)
                                    ^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], ?thegame]

Step 1301:
  program counter:   1952
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       g->team1 = add(g->team2, id)
                                       ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], ?thegame, "team2"]

Step 1302:
  program counter:   1953
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       g->team1 = add(g->team2, id)
                                    ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], ?thegame["team2"]]

Step 1303:
  program counter:   1954
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=68 column=24
  end expression:    line=68 column=31
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], {}]

Step 1304:
  program counter:   1955
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({}, []); insert first value into the second; push result ([{}])
  source code:       g->team1 = add(g->team2, id)
                                    ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [ {} ]]

Step 1305:
  program counter:   1956
  hvm code:          LoadVar id
  explanation:       push value (1) of variable "id"
  source code:       g->team1 = add(g->team2, id)
                                              ^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [ {} ], 1]

Step 1306:
  program counter:   1957
  hvm code:          DelVar id
  explanation:       delete method variable id
  start expression:  line=68 column=34
  end expression:    line=68 column=35
  method variables:  { g: ?thegame }

Step 1307:
  program counter:   1958
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (1, [{}]); insert first value into the second; push result ([{}, 1])
  source code:       g->team1 = add(g->team2, id)
                                    ^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [ {}, 1 ]]

Step 1308:
  program counter:   1959
  hvm code:          Apply PC(1294)
  explanation:       pop an argument ([{}, 1]) and call method (1294: "add")
  source code:       g->team1 = add(g->team2, id)
                                ^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1) --> add({}, 1)
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, [ {}, 1 ]]

Step 1309:
  program counter:   1294
  hvm code:          Frame add(s, elt)
  explanation:       pop argument ([{}, 1]), assign to (s, elt), and run method "add"
  module:            set
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { elt: 1, s: {} }
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }]

Step 1310:
  program counter:   1295
  hvm code:          DelVar result
  explanation:       delete method variable result
  start statement:   line=22 column=5
  end statement:     line=22 column=23
  source code:       result =  s | {elt}
                               ^

Step 1311:
  program counter:   1296
  hvm code:          LoadVar s
  explanation:       push value ({}) of variable "s"
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }, {}]

Step 1312:
  program counter:   1297
  hvm code:          DelVar s
  explanation:       delete method variable s
  start expression:  line=22 column=15
  end expression:    line=22 column=15
  method variables:  { elt: 1 }

Step 1313:
  program counter:   1298
  hvm code:          Push {}
  explanation:       push constant {}
  source code:       result =  s | {elt}
                                    ^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }, {}, {}]

Step 1314:
  program counter:   1299
  hvm code:          LoadVar elt
  explanation:       push value (1) of variable "elt"
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }, {}, {}, 1]

Step 1315:
  program counter:   1300
  hvm code:          DelVar elt
  explanation:       delete method variable elt
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  method variables:  { }

Step 1316:
  program counter:   1301
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (1, {}); insert first value into the second; push result ({ 1 })
  start expression:  line=22 column=20
  end expression:    line=22 column=22
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }, {}, { 1 }]

Step 1317:
  program counter:   1302
  hvm code:          2-ary |
  explanation:       pop 2 values ({ 1 }, {}); union; push result ({ 1 })
  source code:       result =  s | {elt}
                               ^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }, { 1 }]

Step 1318:
  program counter:   1303
  hvm code:          StoreVar result
  explanation:       pop value ({ 1 }) and store locally in variable \"result\"
  source code:       result =  s | {elt}
                     ^^^^^^^^
  method variables:  { result: { 1 } }
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], [], 31346, { "g": ?thegame }]

Step 1319:
  program counter:   1304
  hvm code:          ReturnOp(result)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=21 column=1
  end statement:     line=21 column=31
  source code:       def add(s, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame }
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"], { 1 }]

Step 1320:
  program counter:   1960
  hvm code:          Store
  explanation:       pop value ({ 1 }) and address (?thegame["team1"]) and store
  module:            game
  start statement:   line=68 column=9
  end statement:     line=68 column=36
  source code:       g->team1 = add(g->team2, id)
                     ^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}]

Step 1321:
  program counter:   1961
  hvm code:          Jump 1983
  explanation:       set program counter to 1983
  start statement:   line=67 column=5
  end statement:     line=67 column=22
  source code:       if id in g->team1:
                     ^^^^^^^^^^^^^^^^^^

Step 1322:
  program counter:   1983
  hvm code:          DelVar id
  explanation:       delete method variable id
  start statement:   line=73 column=5
  end statement:     line=73 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^

Step 1323:
  program counter:   1984
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start expression:  line=73 column=13
  end expression:    line=73 column=13
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1324:
  program counter:   1985
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "team1"]

Step 1325:
  program counter:   1986
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["team1"]]

Step 1326:
  program counter:   1987
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=73 column=13
  end expression:    line=73 column=20
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, { 1 }]

Step 1327:
  program counter:   1988
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, 1]

Step 1328:
  program counter:   1989
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32706, {:}, 1, 0]

Step 1329:
  program counter:   1990
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}, False]

Step 1330:
  program counter:   1991
  hvm code:          JumpCond False 2000
  explanation:       pop value (False), compare to False, and jump to 2000 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1331:
  program counter:   2000
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=73 column=8
  end expression:    line=73 column=52
  stack:             [{:}, [], 32706, {:}, False]

Step 1332:
  program counter:   2001
  hvm code:          JumpCond False 2007
  explanation:       pop value (False), compare to False, and jump to 2007 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32706, {:}]

Step 1333:
  program counter:   2007
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=76 column=5
  end statement:     line=76 column=21
  source code:       release(?g->lock)
                              ^
  stack:             [{:}, [], 32706, {:}, ?thegame]

Step 1334:
  program counter:   2008
  hvm code:          DelVar g
  explanation:       delete method variable g
  start expression:  line=76 column=14
  end expression:    line=76 column=14
  method variables:  { }

Step 1335:
  program counter:   2009
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       release(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame, "lock"]

Step 1336:
  program counter:   2010
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       release(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32706, {:}, ?thegame["lock"]]

Step 1337:
  program counter:   2011
  hvm code:          Apply PC(973)
  explanation:       pop an argument (?thegame["lock"]) and call method (973: "release")
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1) --> release(?thegame["lock"])
  stack:             [{:}, [], 32706, {:}, [], 32178, ?thegame["lock"]]

Step 1338:
  program counter:   973
  hvm code:          Frame release(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "release"
  module:            synch
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1339:
  program counter:   974
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1) --> release(?thegame["lock"])

Step 1340:
  program counter:   975
  hvm code:          AtomicInc(lazy)
  explanation:       increment atomic counter from 1 to 2: remains atomic
  start statement:   line=40 column=9
  end statement:     line=40 column=23
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1341:
  program counter:   976
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1342:
  program counter:   977
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  source code:       assert !binsema
                             ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"]]

Step 1343:
  program counter:   978
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (True)
  source code:       assert !binsema
                            ^^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, True]

Step 1344:
  program counter:   979
  hvm code:          Assert
  explanation:       pop a value (True); do not raise exception
  source code:       assert !binsema
                     ^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1345:
  program counter:   980
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       assert !binsema
                     ^^^^^^^^^^^^^^^

Step 1346:
  program counter:   981
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 2 to 1: remains atomic
  start expression:  line=40 column=9
  end expression:    line=40 column=23

Step 1347:
  program counter:   982
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=41 column=9
  end statement:     line=41 column=24
  source code:       !binsema = False
                      ^^^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"]]

Step 1348:
  program counter:   983
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=41 column=10
  end expression:    line=41 column=16
  method variables:  { }

Step 1349:
  program counter:   984
  hvm code:          Push False
  explanation:       push constant False
  source code:       !binsema = False
                                ^^^^^
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}, ?thegame["lock"], False]

Step 1350:
  program counter:   985
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !binsema = False
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  stack:             [{:}, [], 32706, {:}, [], 32178, {:}]

Step 1351:
  program counter:   986
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=39 column=5
  end statement:     line=39 column=15
  source code:       atomically:
                     ^^^^^^^^^^^

Step 1352:
  program counter:   987
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=38 column=1
  end statement:     line=38 column=21
  source code:       def release(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1) --> game_leave(?thegame, 1)
  stack:             [{:}, [], 32706, {:}, None]

Step 1353:
  program counter:   2012
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=76 column=5
  end statement:     line=76 column=21
  source code:       release(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32706, {:}]

Step 1354:
  program counter:   2013
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=60 column=1
  end statement:     line=60 column=22
  source code:       def game_leave(g, id):
                     ^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(1)
  stack:             [{:}, None]

Step 1355:
  program counter:   2045
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            __main__
  start statement:   line=9 column=5
  end statement:     line=9 column=30
  source code:       game_leave(?thegame, self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}]

Step 1356:
  program counter:   2046
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=5 column=1
  end statement:     line=5 column=17
  source code:       def player(self):
                     ^^^^^^^^^^^^^^^^^
  new mode:          terminated
  stack:             [None]

================================================
Running thread T3: player(2)
mode:  runnable
stack: ['2']
other threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T2: pc=2046 terminated player(1)
  T4: pc=2046 terminated player(3)
  T5: pc=1032 blocked player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
shared variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] }
state id: 48779
================================================

Step 1357:
  program counter:   2018
  hvm code:          Frame player(self)
  explanation:       pop argument (2), assign to self, and run method "player"
  start expression:  line=5 column=1
  end expression:    line=5 column=17
  method variables:  { self: 2 }
  call trace:        player(2)
  stack:             [{:}]

Step 1358:
  program counter:   2019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=6 column=5
  end statement:     line=6 column=50
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, []]

Step 1359:
  program counter:   2020
  hvm code:          Push ?thegame
  explanation:       push constant ?thegame
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                     ^^^^^^^
  stack:             [{:}, [], ?thegame]

Step 1360:
  program counter:   2021
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame, []); insert first value into the second; push result ([?thegame])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame ]]

Step 1361:
  program counter:   2022
  hvm code:          LoadVar self
  explanation:       push value (2) of variable "self"
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                              ^^^^
  stack:             [{:}, [ ?thegame ], 2]

Step 1362:
  program counter:   2023
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (2, [?thegame]); insert first value into the second; push result ([?thegame, 2])
  source code:       let (team1, team2) = game_join(?thegame, self):
                                                    ^^^^^^^^^^^^^^
  stack:             [{:}, [ ?thegame, 2 ]]

Step 1363:
  program counter:   2024
  hvm code:          Apply PC(1779)
  explanation:       pop an argument ([?thegame, 2]) and call method (1779: "game_join")
  source code:       let (team1, team2) = game_join(?thegame, self):
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, [ ?thegame, 2 ]]

Step 1364:
  program counter:   1779
  hvm code:          Frame game_join(g, id)
  explanation:       pop argument ([?thegame, 2]), assign to (g, id), and run method "game_join"
  module:            game
  start statement:   line=37 column=1
  end statement:     line=37 column=35
  source code:       def game_join(g, id) returns teams:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 2 }
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1365:
  program counter:   1780
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                              ^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame]

Step 1366:
  program counter:   1781
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       acquire(?g->lock)
                                 ^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame, "lock"]

Step 1367:
  program counter:   1782
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       acquire(?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["lock"]]

Step 1368:
  program counter:   1783
  hvm code:          Apply PC(954)
  explanation:       pop an argument (?thegame["lock"]) and call method (954: "acquire")
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2) --> acquire(?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, ?thegame["lock"]]

Step 1369:
  program counter:   954
  hvm code:          Frame acquire(binsema)
  explanation:       pop argument (?thegame["lock"]), assign to binsema, and run method "acquire"
  module:            synch
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { binsema: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }]

Step 1370:
  program counter:   955
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=35 column=16
  end statement:     line=37 column=6
  source code:       atomically when not !binsema:
  call trace:        player(2) --> game_join(?thegame, 2) --> acquire(?thegame["lock"])

Step 1371:
  program counter:   956
  hvm code:          ReadonlyInc
  explanation:       increment readonly counter from 0 to 1: becomes readonly
  source code:       atomically when not !binsema:

Step 1372:
  program counter:   957
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }, ?thegame["lock"]]

Step 1373:
  program counter:   958
  hvm code:          Load
  explanation:       pop address (?thegame["lock"]) and push value (False)
  source code:       atomically when not !binsema:
                                         ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }, False]

Step 1374:
  program counter:   959
  hvm code:          1-ary not
  explanation:       pop a value (False); logical not; push result (True)
  source code:       atomically when not !binsema:
                                     ^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }, True]

Step 1375:
  program counter:   960
  hvm code:          JumpCond False 962
  explanation:       pop value (True), compare to False, and jump to 962 if the same
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }]

Step 1376:
  program counter:   961
  hvm code:          Jump 965
  explanation:       set program counter to 965
  source code:       atomically when not !binsema:
                                                ^

Step 1377:
  program counter:   965
  hvm code:          ReadonlyDec
  explanation:       decrement readonly counter from 1 to 0: no longer readonly
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1378:
  program counter:   966
  hvm code:          LoadVar binsema
  explanation:       push value (?thegame["lock"]) of variable "binsema"
  start statement:   line=36 column=9
  end statement:     line=36 column=23
  source code:       !binsema = True
                      ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }, ?thegame["lock"]]

Step 1379:
  program counter:   967
  hvm code:          DelVar binsema
  explanation:       delete method variable binsema
  start expression:  line=36 column=10
  end expression:    line=36 column=16
  method variables:  { }

Step 1380:
  program counter:   968
  hvm code:          Push True
  explanation:       push constant True
  source code:       !binsema = True
                                ^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }, ?thegame["lock"], True]

Step 1381:
  program counter:   969
  hvm code:          Store
  explanation:       pop value (True) and address (?thegame["lock"]) and store
  source code:       !binsema = True
                     ^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4 ] } }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 28530, { "g": ?thegame, "id": 2 }]

Step 1382:
  program counter:   970
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=35 column=16
  end statement:     line=35 column=32
  source code:       atomically when not !binsema:
                                ^^^^^^^^^^^^^^^^^

Step 1383:
  program counter:   971
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (), or terminate if no caller
  start statement:   line=34 column=1
  end statement:     line=34 column=21
  source code:       def acquire(binsema):
                     ^^^^^^^^^^^^^^^^^^^^^
  method variables:  { g: ?thegame, id: 2 }
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }, None]

Step 1384:
  program counter:   1784
  hvm code:          Pop
  explanation:       pop and discard value ()
  module:            game
  start statement:   line=38 column=5
  end statement:     line=38 column=21
  source code:       acquire(?g->lock)
                     ^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1385:
  program counter:   1785
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=40 column=5
  end statement:     line=40 column=35
  source code:       g->waiting = g->waiting + [id,]
                     ^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame]

Step 1386:
  program counter:   1786
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame, "waiting"]

Step 1387:
  program counter:   1787
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"]]

Step 1388:
  program counter:   1788
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       g->waiting = g->waiting + [id,]
                                  ^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], ?thegame]

Step 1389:
  program counter:   1789
  hvm code:          Push "waiting"
  explanation:       push constant "waiting"
  source code:       g->waiting = g->waiting + [id,]
                                     ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], ?thegame, "waiting"]

Step 1390:
  program counter:   1790
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("waiting", ?thegame); push result (?thegame["waiting"])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], ?thegame["waiting"]]

Step 1391:
  program counter:   1791
  hvm code:          Load
  explanation:       pop address (?thegame["waiting"]) and push value ([4])
  start expression:  line=40 column=18
  end expression:    line=40 column=27
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], [ 4 ]]

Step 1392:
  program counter:   1792
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], [ 4 ], []]

Step 1393:
  program counter:   1793
  hvm code:          LoadVar id
  explanation:       push value (2) of variable "id"
  source code:       g->waiting = g->waiting + [id,]
                                                ^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], [ 4 ], [], 2]

Step 1394:
  program counter:   1794
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (2, []); insert first value into the second; push result ([2])
  source code:       g->waiting = g->waiting + [id,]
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], [ 4 ], [ 2 ]]

Step 1395:
  program counter:   1795
  hvm code:          2-ary +
  explanation:       pop 2 values ([2], [4]); concatenate the lists; push result ([4, 2])
  source code:       g->waiting = g->waiting + [id,]
                                  ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["waiting"], [ 4, 2 ]]

Step 1396:
  program counter:   1796
  hvm code:          Store
  explanation:       pop value ([4, 2]) and address (?thegame["waiting"]) and store
  source code:       g->waiting = g->waiting + [id,]
                     ^^^^^^^^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4, 2 ] } }
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1397:
  program counter:   1797
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=43 column=5
  end statement:     line=43 column=53
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame]

Step 1398:
  program counter:   1798
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                ^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame, "team1"]

Step 1399:
  program counter:   1799
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                             ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["team1"]]

Step 1400:
  program counter:   1800
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=43 column=13
  end expression:    line=43 column=20
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }, { 1 }]

Step 1401:
  program counter:   1801
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, 1]

Step 1402:
  program counter:   1802
  hvm code:          Push 0
  explanation:       push constant 0
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                                          ^
  stack:             [{:}, [], 32386, { "self": 2 }, 1, 0]

Step 1403:
  program counter:   1803
  hvm code:          2-ary ==
  explanation:       pop 2 values (0, 1); check if both values are the same; push result (False)
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                         ^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, False]

Step 1404:
  program counter:   1804
  hvm code:          JumpCond False 1813
  explanation:       pop value (False), compare to False, and jump to 1813 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1405:
  program counter:   1813
  hvm code:          Push False
  explanation:       push constant False
  start expression:  line=43 column=8
  end expression:    line=43 column=52
  stack:             [{:}, [], 32386, { "self": 2 }, False]

Step 1406:
  program counter:   1814
  hvm code:          JumpCond False 1820
  explanation:       pop value (False), compare to False, and jump to 1820 if the same
  source code:       if (len(g->team1) == 0) and (len(g->team2) == 0):
                     ^^
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1407:
  program counter:   1820
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  start statement:   line=48 column=5
  end statement:     line=48 column=118
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame]

Step 1408:
  program counter:   1821
  hvm code:          Push "team1"
  explanation:       push constant "team1"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                   ^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame, "team1"]

Step 1409:
  program counter:   1822
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team1", ?thegame); push result (?thegame["team1"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, ?thegame["team1"]]

Step 1410:
  program counter:   1823
  hvm code:          Load
  explanation:       pop address (?thegame["team1"]) and push value ({ 1 })
  start expression:  line=48 column=16
  end expression:    line=48 column=23
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }, { 1 }]

Step 1411:
  program counter:   1824
  hvm code:          1-ary len
  explanation:       pop a value ({ 1 }); compute cardinality; push result (1)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, 1]

Step 1412:
  program counter:   1825
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^
  stack:             [{:}, [], 32386, { "self": 2 }, 1, ?thegame]

Step 1413:
  program counter:   1826
  hvm code:          Push "team2"
  explanation:       push constant "team2"
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                    ^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, 1, ?thegame, "team2"]

Step 1414:
  program counter:   1827
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("team2", ?thegame); push result (?thegame["team2"])
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                                 ^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, 1, ?thegame["team2"]]

Step 1415:
  program counter:   1828
  hvm code:          Load
  explanation:       pop address (?thegame["team2"]) and push value ({})
  start expression:  line=48 column=33
  end expression:    line=48 column=40
  call trace:        player(2) --> game_join(?thegame, 2)
  stack:             [{:}, [], 32386, { "self": 2 }, 1, {}]

Step 1416:
  program counter:   1829
  hvm code:          1-ary len
  explanation:       pop a value ({}); push result (0)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                                             ^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, 1, 0]

Step 1417:
  program counter:   1830
  hvm code:          2-ary !=
  explanation:       pop 2 values (0, 1); check if the values are unequal; push result (True)
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, True]

Step 1418:
  program counter:   1831
  hvm code:          JumpCond True 1858
  explanation:       pop value (True), compare to True, and jump to 1858 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1419:
  program counter:   1858
  hvm code:          Push True
  explanation:       push constant True
  start expression:  line=48 column=11
  end expression:    line=48 column=117
  stack:             [{:}, [], 32386, { "self": 2 }, True]

Step 1420:
  program counter:   1859
  hvm code:          JumpCond False 1872
  explanation:       pop value (True), compare to False, and jump to 1872 if the same
  source code:       while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):
                     ^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }]

Step 1421:
  program counter:   1860
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  start statement:   line=49 column=9
  end statement:     line=49 column=35
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, []]

Step 1422:
  program counter:   1861
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                           ^
  stack:             [{:}, [], 32386, { "self": 2 }, [], ?thegame]

Step 1423:
  program counter:   1862
  hvm code:          Push "players"
  explanation:       push constant "players"
  source code:       wait(?g->players, ?g->lock)
                              ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], ?thegame, "players"]

Step 1424:
  program counter:   1863
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("players", ?thegame); push result (?thegame["players"])
  source code:       wait(?g->players, ?g->lock)
                           ^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], ?thegame["players"]]

Step 1425:
  program counter:   1864
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["players"], []); insert first value into the second; push result ([?thegame["players"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [ ?thegame["players"] ]]

Step 1426:
  program counter:   1865
  hvm code:          LoadVar g
  explanation:       push value (?thegame) of variable "g"
  source code:       wait(?g->players, ?g->lock)
                                        ^
  stack:             [{:}, [], 32386, { "self": 2 }, [ ?thegame["players"] ], ?thegame]

Step 1427:
  program counter:   1866
  hvm code:          Push "lock"
  explanation:       push constant "lock"
  source code:       wait(?g->players, ?g->lock)
                                           ^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [ ?thegame["players"] ], ?thegame, "lock"]

Step 1428:
  program counter:   1867
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ("lock", ?thegame); push result (?thegame["lock"])
  source code:       wait(?g->players, ?g->lock)
                                        ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [ ?thegame["players"] ], ?thegame["lock"]]

Step 1429:
  program counter:   1868
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (?thegame["lock"], [?thegame["players"]]); insert first value into the second; push result ([?thegame["players"], ?thegame["lock"]])
  source code:       wait(?g->players, ?g->lock)
                          ^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [ ?thegame["players"], ?thegame["lock"] ]]

Step 1430:
  program counter:   1869
  hvm code:          Apply PC(998)
  explanation:       pop an argument ([?thegame["players"], ?thegame["lock"]]) and call method (998: "wait")
  source code:       wait(?g->players, ?g->lock)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, [ ?thegame["players"], ?thegame["lock"] ]]

Step 1431:
  program counter:   998
  hvm code:          Frame wait(c, lk)
  explanation:       pop argument ([?thegame["players"], ?thegame["lock"]]), assign to (c, lk), and run method "wait"
  module:            synch
  start statement:   line=46 column=1
  end statement:     line=46 column=16
  source code:       def wait(c, lk):
                     ^^^^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1432:
  program counter:   999
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=47 column=5
  end statement:     line=47 column=15
  source code:       var cnt = 0
                               ^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, 0]

Step 1433:
  program counter:   1000
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  source code:       var cnt = 0
                     ^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1434:
  program counter:   1001
  hvm code:          DelVar cnt
  explanation:       delete method variable cnt
  start statement:   line=48 column=5
  end statement:     line=48 column=24
  source code:       let (), ctx = save():
                                       ^^
  method variables:  { c: ?thegame["players"], lk: ?thegame["lock"] }

Step 1435:
  program counter:   1002
  hvm code:          Push ()
  explanation:       push constant ()
  start expression:  line=48 column=23
  end expression:    line=48 column=24
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, []]

Step 1436:
  program counter:   1003
  hvm code:          Save
  explanation:       pop a value and save context
  source code:       let (), ctx = save():
                                   ^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, [ [], CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1437:
  program counter:   1004
  hvm code:          Continue
  explanation:       a no-op, must follow a Stop or Save operation
  start expression:  line=48 column=19
  end expression:    line=48 column=24

Step 1438:
  program counter:   1005
  hvm code:          StoreVar ((), ctx)
  explanation:       pop value ([[], CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])]) and store locally in variable \"((), ctx)\"
  source code:       let (), ctx = save():
                     ^^^^^^^^^^^^^
  method variables:  { c: ?thegame["players"], ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1439:
  program counter:   1006
  hvm code:          AtomicInc(eager)
  explanation:       increment atomic counter from 0 to 1: becomes atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"])

Step 1440:
  program counter:   1007
  hvm code:          Push PC(605)
  explanation:       push constant PC(605)
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605)]

Step 1441:
  program counter:   1008
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), []]

Step 1442:
  program counter:   1009
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                             ^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), [], ?thegame["players"]]

Step 1443:
  program counter:   1010
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 })
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), [], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 1444:
  program counter:   1011
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, []); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ]]

Step 1445:
  program counter:   1012
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])) of variable "ctx"
  source code:       cnt = bag.multiplicity(!c, ctx)
                                                ^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 1446:
  program counter:   1013
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }]), [{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }]); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])])
  source code:       cnt = bag.multiplicity(!c, ctx)
                                            ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, PC(605), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1447:
  program counter:   1014
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])], PC(605)); push result (?PC(605)[[{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])]])
  source code:       cnt = bag.multiplicity(!c, ctx)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?PC(605)[[ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 1448:
  program counter:   1015
  hvm code:          Load
  explanation:       pop an argument ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])]) and call method (605: "multiplicity")
  start expression:  line=50 column=19
  end expression:    line=50 column=43
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"]) --> multiplicity({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }]))
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, [], 16242, [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1449:
  program counter:   605
  hvm code:          Frame multiplicity(bg, elt)
  explanation:       start of method multiplicity
  module:            bag
  start statement:   line=16 column=1
  end statement:     line=16 column=40
  source code:       def multiplicity(bg, elt) returns count:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, 0]

Step 1450:
  program counter:   1016
  hvm code:          StoreVar cnt
  explanation:       pop value (0) and store locally in variable \"cnt\"
  module:            synch
  start statement:   line=50 column=13
  end statement:     line=50 column=43
  source code:       cnt = bag.multiplicity(!c, ctx)
                     ^^^^^
  method variables:  { c: ?thegame["players"], cnt: 0, ctx: CONTEXT({'type': 'pc', 'value': '1004'}), lk: ?thegame["lock"] }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1451:
  program counter:   1017
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                      ^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"]]

Step 1452:
  program counter:   1018
  hvm code:          Push PC(696)
  explanation:       push constant PC(696)
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696)]

Step 1453:
  program counter:   1019
  hvm code:          Push ()
  explanation:       building a tuple: push constant ()
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), []]

Step 1454:
  program counter:   1020
  hvm code:          LoadVar c
  explanation:       push value (?thegame["players"]) of variable "c"
  source code:       !c = bag.add(!c, ctx)
                                   ^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), [], ?thegame["players"]]

Step 1455:
  program counter:   1021
  hvm code:          Load
  explanation:       pop address (?thegame["players"]) and push value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 })
  source code:       !c = bag.add(!c, ctx)
                                  ^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), [], { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 1456:
  program counter:   1022
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, []); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ]]

Step 1457:
  program counter:   1023
  hvm code:          LoadVar ctx
  explanation:       push value (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])) of variable "ctx"
  source code:       !c = bag.add(!c, ctx)
                                      ^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 } ], CONTEXT({'type': 'pc', 'value': '1004'})]

Step 1458:
  program counter:   1024
  hvm code:          2-ary ListAdd
  explanation:       pop 2 values (CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }]), [{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }]); insert first value into the second; push result ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])])
  source code:       !c = bag.add(!c, ctx)
                                  ^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], PC(696), [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1459:
  program counter:   1025
  hvm code:          2-ary Closure
  explanation:       pop 2 values ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])], PC(696)); push result (?PC(696)[[{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])]])
  source code:       !c = bag.add(!c, ctx)
                          ^^^^^^^^^^^^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], ?PC(696)[[ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]]

Step 1460:
  program counter:   1026
  hvm code:          Load
  explanation:       pop an argument ([{ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }])]) and call method (696: "add")
  start expression:  line=51 column=18
  end expression:    line=51 column=33
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"]) --> add({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1 }, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }]))
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], [], 16418, [ { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, CONTEXT({'type': 'pc', 'value': '1004'}) ]]

Step 1461:
  program counter:   696
  hvm code:          Frame add(bg, elt)
  explanation:       start of method add
  module:            bag
  start statement:   line=42 column=1
  end statement:     line=42 column=32
  source code:       def add(bg, elt) returns result:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  call trace:        player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"])
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["players"], { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }]

Step 1462:
  program counter:   1027
  hvm code:          Store
  explanation:       pop value ({ CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 4 },[],29906,{ "g": ?thegame, "id": 4 }]): 1, CONTEXT(pc=1004,vars={ "c": ?thegame["players"], "lk": ?thegame["lock"] },readonly=0,atomic=0,aflag=0,il=0,stopped=1,terminated=0,eternal=0,sp=7,STACK[{:},[],32386,{ "self": 2 },[],29906,{ "g": ?thegame, "id": 2 }]): 1 }) and address (?thegame["players"]) and store
  module:            synch
  start statement:   line=51 column=13
  end statement:     line=51 column=33
  source code:       !c = bag.add(!c, ctx)
                     ^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": True, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4, 2 ] } }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1463:
  program counter:   1028
  hvm code:          LoadVar lk
  explanation:       push value (?thegame["lock"]) of variable "lk"
  start statement:   line=52 column=13
  end statement:     line=52 column=23
  source code:       !lk = False
                      ^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["lock"]]

Step 1464:
  program counter:   1029
  hvm code:          Push False
  explanation:       push constant False
  source code:       !lk = False
                           ^^^^^
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }, ?thegame["lock"], False]

Step 1465:
  program counter:   1030
  hvm code:          Store
  explanation:       pop value (False) and address (?thegame["lock"]) and store
  source code:       !lk = False
                     ^^^^^
  shared variables:  { thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4, 2 ] } }
  stack:             [{:}, [], 32386, { "self": 2 }, [], 29906, { "g": ?thegame, "id": 2 }]

Step 1466:
  program counter:   1031
  hvm code:          AtomicDec
  explanation:       decrement atomic counter from 1 to 0: no longer atomic
  start statement:   line=49 column=9
  end statement:     line=49 column=19
  source code:       atomically:
                     ^^^^^^^^^^^

================================================
Final state
================================================
Threads:
  T0: pc=2066 terminated atomic __init__()
  T1: pc=1032 blocked game_umpire(?thegame) --> wait(?thegame["active_game"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T2: pc=2046 terminated player(1)
  T3: pc=1032 blocked player(2) --> game_join(?thegame, 2) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
  T4: pc=2046 terminated player(3)
  T5: pc=1032 blocked player(4) --> game_join(?thegame, 4) --> wait(?thegame["players"], ?thegame["lock"])
    about to execute synch:53:         atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):
Variables:
  thegame: { "active_game": { CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "complete_game": {:}, "exited": [ 1, 3 ], "game_headcount": 2, "lock": False, "players": { CONTEXT({'type': 'pc', 'value': '1004'}): 1, CONTEXT({'type': 'pc', 'value': '1004'}): 1 }, "team1": { 1 }, "team2": {}, "waiting": [ 4, 2 ] }
