{
  "labels": {
    "__end__": 2021
  },
  "modules": {
    "list": {
      "file": "/Users/katherineheatzig/Library/Python/3.12/lib/python/site-packages/harmony_model_checker/modules/list.hny",
      "lines": [
        "# return s[b:e]",
        "def subseq(s, b, e) returns result:",
        "    result = [ s[x] for x in {b..e-1} ]",
        "",
        "def append(s, e) returns result:",
        "    result = s + [e,]",
        "",
        "def head(s) returns result:",
        "    result = s[0]",
        "",
        "builtin tail \"list$tail\"",
        "def tail(s) returns result:",
        "    result = subseq(s, 1, len(s))",
        "",
        "# sum of a list or set",
        "def sum(a) returns accu:",
        "    accu = 0",
        "    for v in a:",
        "        accu += v",
        "",
        "# convert list (or values of a dict) to a set",
        "def set(a) returns result:",
        "    result = { v for v in a }",
        "",
        "# convert set into a (sorted) list",
        "def list(a) returns result:",
        "    result = [ v for v in a ]",
        "",
        "# convert values of a dictionary into a list",
        "def values(d) returns result:",
        "    result = [ v for _:v in d ]",
        "",
        "# like Python .items()",
        "def items(d) returns result:",
        "    result = [ (k, v) for k:v in d ]",
        "",
        "# quicksort of a list",
        "def qsort(a) returns sorted:",
        "    if a == []:",
        "        sorted = []",
        "    else:",
        "        let (pivot, rest) = head(a), tail(a)",
        "        let lower = [ v for v in rest where v < pivot ]",
        "        let higher = [ v for v in rest where v >= pivot ]:",
        "            sorted = qsort(lower) + [pivot,] + qsort(higher)",
        "",
        "# like Python sorted()",
        "def sorted(d) returns result:",
        "    result = qsort(list(d))",
        "",
        "# like Python reversed()",
        "def reversed(d) returns result:",
        "    let n = len(d):",
        "        result = [ d[n-i] for i in { 1..n } ]",
        "",
        "# like Python index()",
        "def index(d, e) returns i:",
        "    i = 0",
        "    while d[i] != e:",
        "        i += 1",
        "",
        "# like Python startswith (only defined for strings)",
        "def startswith(d, prefix) returns result:",
        "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
        "",
        "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
        "def foldl(d, f, z) returns result:",
        "    result = z",
        "    for e in d:",
        "        result = f(result, e)",
        "",
        "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
        "def foldr(d, f, z) returns result:",
        "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
        "",
        "# Python functools reduce operator",
        "def reduce(f, d, z) returns result:",
        "    result = foldl(d, f, z)",
        "",
        "# Return a permutation of set s",
        "def permuted(s) returns perm:",
        "    perm = []",
        "    var c = s",
        "    while c != {}:",
        "        let e = choose c:",
        "            perm += [ e, ]",
        "            c -= { e }",
        "",
        "# Return a list of elements satisfying the condition",
        "def filter(cond, s) returns t:",
        "    t = [ e for e in s where cond(e) ]",
        "",
        "# Return a list of elements mapped by f",
        "def map(f, s) returns t:",
        "    t = [ f(e) for e in s ]"
      ],
      "identifiers": {
        "s": "local-const",
        "b": "local-const",
        "e": "local-const",
        "x": "local-const",
        "a": "local-const",
        "v": "local-const",
        "d": "local-const",
        "k": "local-const",
        "pivot": "local-const",
        "rest": "local-const",
        "lower": "local-const",
        "higher": "local-const",
        "n": "local-const",
        "i": "local-const",
        "prefix": "local-const",
        "f": "local-const",
        "z": "local-const",
        "c": "local-var",
        "cond": "local-const",
        "this": "local-var",
        "subseq": "constant",
        "append": "constant",
        "head": "constant",
        "tail": "constant",
        "sum": "constant",
        "set": "constant",
        "list": "constant",
        "values": "constant",
        "items": "constant",
        "qsort": "constant",
        "sorted": "constant",
        "reversed": "constant",
        "index": "constant",
        "startswith": "constant",
        "foldl": "constant",
        "foldr": "constant",
        "reduce": "constant",
        "permuted": "constant",
        "filter": "constant",
        "map": "constant",
        "___": "___"
      }
    },
    "bag": {
      "file": "/Users/katherineheatzig/Library/Python/3.12/lib/python/site-packages/harmony_model_checker/modules/bag.hny",
      "lines": [
        "def empty() returns bg:",
        "    bg = {:}",
        "",
        "def fromSet(s) returns bg:",
        "    bg = { elt:1 for elt in s }",
        "",
        "def fromList(a) returns bg:",
        "    bg = {:}",
        "    for v in a:",
        "        if v in bg:",
        "            bg[v] += 1",
        "        else:",
        "            bg[v] = 1",
        "",
        "builtin multiplicity \"bag$multiplicity\"",
        "def multiplicity(bg, elt) returns count:",
        "    if elt in bg:",
        "        count = bg[elt]",
        "    else:",
        "        count = 0",
        "",
        "builtin size \"bag$size\"",
        "def size(bg) returns count:",
        "    count = 0",
        "    for _:c in bg:",
        "        count += c",
        "",
        "builtin bmin \"bag$bmin\"",
        "def bmin(bg) returns count:",
        "    assert bg != {:}",
        "    count = min(keys(bg))",
        "",
        "builtin bmax \"bag$bmax\"",
        "def bmax(bg) returns count:",
        "    assert bg != {:}",
        "    count = max(keys(bg))",
        "",
        "def bchoose(bg) returns elt:",
        "    elt = choose(keys(bg))",
        "",
        "builtin add \"bag$add\"",
        "def add(bg, elt) returns result:",
        "    result = bg",
        "    if elt in result:",
        "        result[elt] += 1",
        "    else:",
        "        result[elt] = 1",
        "",
        "builtin remove \"bag$remove\"",
        "def remove(bg, elt) returns result:",
        "    result = bg",
        "    if elt in result:",
        "        assert result[elt] > 0",
        "        result[elt] -= 1",
        "        if result[elt] == 0:",
        "            del result[elt]",
        "",
        "# Return set of all subbags of bg of size k",
        "def combinations(bg, k) returns result:",
        "    if k == 0:",
        "        result = { {:} }",
        "    else:",
        "        let n = size(bg):",
        "            if k > n:",
        "                result = {}",
        "            elif k == n:",
        "                result = { bg }",
        "            else:",
        "                let hd = bmin(bg) let tl = remove(bg, hd):",
        "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
        "                                | combinations(tl, k)"
      ],
      "identifiers": {
        "s": "local-const",
        "elt": "local-const",
        "a": "local-const",
        "v": "local-const",
        "bg": "local-const",
        "c": "local-const",
        "k": "local-const",
        "n": "local-const",
        "hd": "local-const",
        "tl": "local-const",
        "x": "local-const",
        "this": "local-var",
        "empty": "constant",
        "fromSet": "constant",
        "fromList": "constant",
        "multiplicity": "constant",
        "size": "constant",
        "bmin": "constant",
        "bmax": "constant",
        "bchoose": "constant",
        "add": "constant",
        "remove": "constant",
        "combinations": "constant",
        "___": "___"
      }
    },
    "synch": {
      "file": "/Users/katherineheatzig/Library/Python/3.12/lib/python/site-packages/harmony_model_checker/modules/synch.hny",
      "lines": [
        "import list",
        "import bag",
        "",
        "def atomic_load(p) returns current:",
        "    atomically current = !p",
        "",
        "def atomic_store(p, v):",
        "    atomically !p = v",
        "",
        "def tas(lk) returns oldvalue:",
        "    atomically:",
        "        oldvalue = !lk",
        "        !lk = True",
        "",
        "def cas(p, old, new) returns success:",
        "    atomically:",
        "        success = !p == old",
        "        if success:",
        "            !p = new",
        "",
        "def BinSema(initial) returns sema:",
        "    assert initial in { False, True }",
        "    sema = initial",
        "",
        "def Lock() returns result:",
        "    result = BinSema(False)",
        "",
        "def acquired(binsema) returns result:",
        "    result = !binsema",
        "    ",
        "def held(binsema) returns result:",
        "    result = !binsema",
        "",
        "def acquire(binsema):",
        "    atomically when not !binsema:",
        "        !binsema = True",
        "",
        "def release(binsema):",
        "    atomically:",
        "        assert !binsema",
        "        !binsema = False",
        "",
        "def Condition() returns result:",
        "    result = bag.empty()",
        "",
        "def wait(c, lk):",
        "    var cnt = 0",
        "    let (), ctx = save():",
        "        atomically:",
        "            cnt = bag.multiplicity(!c, ctx)",
        "            !c = bag.add(!c, ctx)",
        "            !lk = False",
        "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):",
        "            !lk = True",
        "",
        "def notify(c):",
        "    atomically if !c != bag.empty():",
        "        !c = bag.remove(!c, bag.bchoose(!c))",
        "",
        "def notifyAll(c):",
        "    atomically !c = bag.empty()",
        "",
        "def Semaphore(cnt) returns result:",
        "    result = cnt",
        "",
        "def P(sema):",
        "    atomically when !sema > 0:",
        "        !sema -= 1",
        "",
        "def V(sema):",
        "    atomically !sema += 1",
        "    ",
        "def Queue() returns result:",
        "    result = []",
        "",
        "def get(q) returns result:",
        "    atomically when !q != []:",
        "        result = list.head(!q)",
        "        !q = list.tail(!q)",
        "",
        "def put(q, item):",
        "    atomically !q = list.append(!q, item)"
      ],
      "identifiers": {
        "list": "module",
        "bag": "module",
        "p": "local-const",
        "v": "local-const",
        "lk": "local-const",
        "old": "local-const",
        "new": "local-const",
        "initial": "local-const",
        "binsema": "local-const",
        "c": "local-const",
        "cnt": "local-const",
        "ctx": "local-const",
        "sema": "local-const",
        "q": "local-const",
        "item": "local-const",
        "this": "local-var",
        "atomic_load": "constant",
        "atomic_store": "constant",
        "tas": "constant",
        "cas": "constant",
        "BinSema": "constant",
        "Lock": "constant",
        "acquired": "constant",
        "held": "constant",
        "acquire": "constant",
        "release": "constant",
        "Condition": "constant",
        "wait": "constant",
        "notify": "constant",
        "notifyAll": "constant",
        "Semaphore": "constant",
        "P": "constant",
        "V": "constant",
        "Queue": "constant",
        "get": "constant",
        "put": "constant",
        "___": "___"
      }
    },
    "set": {
      "file": "/Users/katherineheatzig/Library/Python/3.12/lib/python/site-packages/harmony_model_checker/modules/set.hny",
      "lines": [
        "import list",
        "",
        "def issubset(s, t) returns result:",
        "    result = (s & t) == s",
        "",
        "def issubseteq(s, t) returns result:",
        "    result = (s & t) == s",
        "",
        "def issubsetstrict(s, t) returns result:",
        "    result = (s != t) and ((s & t) == s)",
        "",
        "def issuperset(s, t) returns result:",
        "    result = (s & t) == t",
        "",
        "def issuperseteq(s, t) returns result:",
        "    result = (s & t) == t",
        "",
        "def issupersetstrict(s, t) returns result:",
        "    result = (s != t) and ((s & t) == t)",
        "",
        "def add(s, elt) returns result:",
        "    result =  s | {elt}",
        "",
        "def remove(s, elt) returns result:",
        "    result = s - {elt}",
        "",
        "# Return the set of all subsets of S",
        "def subsets(s) returns result:",
        "    result = {s} | union { subsets(s - {e}) for e in s }",
        "",
        "# s is a set of sets.  Return the union of the sets",
        "def union(s) returns result:",
        "    result = {}",
        "    for e in s:",
        "        result |= e",
        "",
        "# d is a list of sets.  Return the Cartesian product.",
        "def cartesian(d) returns result:",
        "    result = { [] } if d == [] else { [e,] + t for t in cartesian(list.tail(d)) for e in d[0] }",
        "",
        "# return set of all subsets of s of size k",
        "def combinations(s, k) returns result:",
        "    if k == 0:",
        "        result = { {} }",
        "    else:",
        "        let n = len(s):",
        "            if k > n:",
        "                result = {}",
        "            elif k == n:",
        "                result = { s }",
        "            else:",
        "                let hd = min(s) let tl = s - {hd}:",
        "                    result = { ({hd} | x) for x in combinations(tl, k - 1) }",
        "                                | combinations(tl, k)",
        "",
        "# Python functools reduce operator",
        "def reduce(f, d, z) returns result:",
        "    result = z",
        "    for e in d:",
        "        result = f(result, e)",
        "",
        "# Return a set of elements satisfying the condition",
        "def filter(cond, s) returns t:",
        "    t = { e for e in s where cond(e) }",
        "",
        "# Return a set of elements mapped by f",
        "def map(f, s) returns t:",
        "    t = { f(e) for e in s }"
      ],
      "identifiers": {
        "list": "module",
        "s": "local-const",
        "t": "local-const",
        "elt": "local-const",
        "e": "local-const",
        "d": "local-const",
        "k": "local-const",
        "n": "local-const",
        "hd": "local-const",
        "tl": "local-const",
        "x": "local-const",
        "f": "local-const",
        "z": "local-const",
        "cond": "local-const",
        "this": "local-var",
        "issubset": "constant",
        "issubseteq": "constant",
        "issubsetstrict": "constant",
        "issuperset": "constant",
        "issuperseteq": "constant",
        "issupersetstrict": "constant",
        "add": "constant",
        "remove": "constant",
        "subsets": "constant",
        "union": "constant",
        "cartesian": "constant",
        "combinations": "constant",
        "reduce": "constant",
        "filter": "constant",
        "map": "constant",
        "___": "___"
      }
    },
    "game": {
      "file": "game_broken.hny",
      "lines": [
        "from synch import *",
        "from set import *",
        "",
        "def Game() returns game:",
        "    game = { .waiting: [], .team1: {}, .team2: {}, .lock: Lock(), ",
        "            .active_game: Condition(), .players: Condition()}",
        "",
        "def game_umpire(g):",
        "    acquire(?g->lock)",
        "    while True:",
        "        ",
        "        # If there's an active game, wait for it to finish",
        "        while (len(g->waiting) < 2) or (len(g->team1) != 0) or (len(g->team2) != 0):",
        "            wait(?g->active_game, ?g->lock)",
        "       ",
        "       #let gives me an error here on the next line",
        "        let pairedplayers = len(g->waiting) - (len(g->waiting) % 2):",
        "            var i = 0",
        "            while i < pairedplayers:",
        "                g->team1 = add(g->team1, g->waiting[i])",
        "                g->team2 = add(g->team2, g->waiting[i+1])",
        "                i += 2",
        "",
        "            var j = 0",
        "            while j < pairedplayers:",
        "                del g->waiting[0]",
        "                j += 1",
        "",
        "        # Signal players to start the game",
        "        # assert (len(g->waiting) <= 1)",
        "        notifyAll(?g->players)",
        "    release(?g->lock)",
        "",
        "",
        "def game_join(g, id) returns teams:",
        "    acquire(?g->lock)",
        "    # Add player to waiting list",
        "    g->waiting = g->waiting + [id,]",
        "",
        "    # If teams are empty (game complete), signal umpire to make new teams",
        "    if (len(g->team1) == 0) and (len(g->team2) == 0):",
        "        notify(?g->active_game)",
        "    ",
        "    # Wait for the game to start, don't enter unless one team has no players, team sizes uneven,",
        "    # or player is not on either team yet",
        "    while (len(g->team1) != len(g->team2)) or (len(g->team1) == 0) or ((id not in g->team1) and (id not in g->team2)):",
        "        wait(?g->players, ?g->lock)",
        "",
        "    # Return tuple of teams",
        "    teams = (g->team1, g->team2)",
        "",
        "    release(?g->lock)",
        "",
        "def game_leave(g, id):",
        "    acquire(?g->lock)",
        "    ",
        "    # Remove player from team",
        "    if id in g->team1:",
        "        g->team1 = remove(g->team1, id)",
        "    elif id in g->team2:",
        "        g->team1 = add(g->team2, id)",
        "        g->team2 = remove(g->team2, id)",
        "",
        "    ",
        "    # If teams are empty (game complete), signal umpire to make new teams",
        "    if (len(g->team1) == 0) and (len(g->team2) == 0):",
        "        notify(?g->active_game)",
        "",
        "    release(?g->lock)"
      ],
      "identifiers": {
        "synch": "module",
        "cas": "imported",
        "atomic_load": "imported",
        "tas": "imported",
        "atomic_store": "imported",
        "notifyAll": "imported",
        "V": "imported",
        "P": "imported",
        "held": "imported",
        "acquired": "imported",
        "Lock": "imported",
        "put": "imported",
        "BinSema": "imported",
        "release": "imported",
        "notify": "imported",
        "Queue": "imported",
        "Semaphore": "imported",
        "acquire": "imported",
        "Condition": "imported",
        "get": "imported",
        "wait": "imported",
        "set": "module",
        "combinations": "imported",
        "issupersetstrict": "imported",
        "issubseteq": "imported",
        "reduce": "imported",
        "issuperseteq": "imported",
        "issubsetstrict": "imported",
        "add": "imported",
        "issubset": "imported",
        "cartesian": "imported",
        "map": "imported",
        "filter": "imported",
        "union": "imported",
        "issuperset": "imported",
        "remove": "imported",
        "subsets": "imported",
        "g": "local-const",
        "pairedplayers": "local-const",
        "i": "local-var",
        "j": "local-var",
        "id": "local-const",
        "this": "local-var",
        "Game": "constant",
        "game_umpire": "constant",
        "game_join": "constant",
        "game_leave": "constant",
        "___": "___"
      }
    },
    "__main__": {
      "file": "teamsDummy.hny",
      "lines": [
        "from game import * ",
        "",
        "const NPLAYERS = 6",
        "thegame = Game()",
        "def player(self):",
        "    let (team1, team2) = game_join(?thegame, self):",
        "        assert self in (team1 | team2)",
        "",
        "    game_leave(?thegame, self)",
        "",
        "",
        "spawn eternal game_umpire(?thegame)",
        "",
        "for id in { 1 .. NPLAYERS}:",
        "    spawn player(id)"
      ],
      "identifiers": {
        "game": "module",
        "Game": "imported",
        "game_leave": "imported",
        "game_join": "imported",
        "game_umpire": "imported",
        "NPLAYERS": "constant",
        "self": "local-const",
        "team1": "local-const",
        "team2": "local-const",
        "id": "local-const",
        "this": "local-var",
        "player": "constant",
        "thegame": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "54" },
    { "op": "Frame", "name": "subseq", "args": "(s, b, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "b" },
    { "op": "DelVar", "value": "b" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "26", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "Jump", "pc": "14" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "54" },
    { "op": "Frame", "name": "append", "args": "(s, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "54" },
    { "op": "Frame", "name": "head", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "57" } },
    { "op": "Builtin", "value": "list$tail" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "tail", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "2" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "sum", "args": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "accu" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "87", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "accu" },
    { "op": "DelVar", "value": "accu" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "accu" },
    { "op": "Jump", "pc": "78" },
    { "op": "DelVar", "value": "v" },
    { "op": "Return", "result": "accu" },
    { "op": "DelVar", "value": "accu" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "set", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu72" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "107", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu72" },
    { "op": "DelVar", "value": "$accu72" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu72" },
    { "op": "Jump", "pc": "98" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu72" },
    { "op": "DelVar", "value": "$accu72" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "list", "args": "a" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu88" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "129", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu88" },
    { "op": "DelVar", "value": "$accu88" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu88" },
    { "op": "Jump", "pc": "120" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu88" },
    { "op": "DelVar", "value": "$accu88" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "values", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu104" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "v" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "152", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu104" },
    { "op": "DelVar", "value": "$accu104" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu104" },
    { "op": "Jump", "pc": "142" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu104" },
    { "op": "DelVar", "value": "$accu104" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "items", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "k", "value": "v" },
    { "op": "JumpCond", "pc": "179", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "Jump", "pc": "165" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "qsort", "args": "a" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "195", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "sorted" },
    { "op": "Jump", "pc": "261" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "45" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "57" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "(pivot, rest)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu155" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "222", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "208", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu155" },
    { "op": "DelVar", "value": "$accu155" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu155" },
    { "op": "Jump", "pc": "208" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu155" },
    { "op": "DelVar", "value": "$accu155" },
    { "op": "StoreVar", "value": "lower" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "DelVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "245", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "JumpCond", "pc": "231", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "Jump", "pc": "231" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "StoreVar", "value": "higher" },
    { "op": "LoadVar", "value": "lower" },
    { "op": "DelVar", "value": "lower" },
    { "op": "Apply", "value": { "type": "pc", "value": "186" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "DelVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "higher" },
    { "op": "DelVar", "value": "higher" },
    { "op": "Apply", "value": { "type": "pc", "value": "186" } },
    { "op": "Nary", "arity": 3, "value": "+" },
    { "op": "StoreVar", "value": "sorted" },
    { "op": "Return", "result": "sorted" },
    { "op": "DelVar", "value": "sorted" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "sorted", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Apply", "value": { "type": "pc", "value": "113" } },
    { "op": "Apply", "value": { "type": "pc", "value": "186" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "reversed", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "StoreVar", "value": "n" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu211" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "298", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu211" },
    { "op": "DelVar", "value": "$accu211" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "n" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu211" },
    { "op": "Jump", "pc": "284" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "n" },
    { "op": "LoadVar", "value": "$accu211" },
    { "op": "DelVar", "value": "$accu211" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "index", "args": "(d, e)" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "322", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "309" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "e" },
    { "op": "Return", "result": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "startswith", "args": "(d, prefix)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "JumpCond", "pc": "368", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu257" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "361", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu257" },
    { "op": "DelVar", "value": "$accu257" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu257" },
    { "op": "Jump", "pc": "344" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "LoadVar", "value": "$accu257" },
    { "op": "DelVar", "value": "$accu257" },
    { "op": "Nary", "arity": 1, "value": "all" },
    { "op": "Jump", "pc": "371" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "foldl", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "396", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "382" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "foldr", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "412", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Jump", "pc": "434" },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Apply", "value": { "type": "pc", "value": "57" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "400" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "reduce", "args": "(f, d, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "374" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "permuted", "args": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "StoreVar", "value": "c" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "482", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "e" },
    { "op": "LoadVar", "value": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "c" },
    { "op": "Jump", "pc": "459" },
    { "op": "DelVar", "value": "c" },
    { "op": "Return", "result": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "filter", "args": "(cond, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu377" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "e" },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "507", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "cond" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "492", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu377" },
    { "op": "DelVar", "value": "$accu377" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu377" },
    { "op": "Jump", "pc": "492" },
    { "op": "DelVar", "value": "cond" },
    { "op": "DelVar", "value": "e" },
    { "op": "LoadVar", "value": "$accu377" },
    { "op": "DelVar", "value": "$accu377" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "map", "args": "(f, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu398" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "533", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu398" },
    { "op": "DelVar", "value": "$accu398" },
    { "op": "LoadVar", "value": "f" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu398" },
    { "op": "Jump", "pc": "521" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "$accu398" },
    { "op": "DelVar", "value": "$accu398" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "empty", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "bg" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "fromSet", "args": "s" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "$accu422" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "elt" },
    { "op": "JumpCond", "pc": "563", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu422" },
    { "op": "DelVar", "value": "$accu422" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "$accu422" },
    { "op": "Jump", "pc": "553" },
    { "op": "DelVar", "value": "elt" },
    { "op": "LoadVar", "value": "$accu422" },
    { "op": "DelVar", "value": "$accu422" },
    { "op": "StoreVar", "value": "bg" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Jump", "pc": "602" },
    { "op": "Frame", "name": "fromList", "args": "a" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "bg" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "599", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "592", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "bg" }] } },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "576" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "bg" }] } },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "576" },
    { "op": "DelVar", "value": "v" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Push", "value": { "type": "pc", "value": "605" } },
    { "op": "Builtin", "value": "bag$multiplicity" },
    { "op": "Jump", "pc": "624" },
    { "op": "Frame", "name": "multiplicity", "args": "(bg, elt)" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "618", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Jump", "pc": "622" },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "627" } },
    { "op": "Builtin", "value": "bag$size" },
    { "op": "Jump", "pc": "646" },
    { "op": "Frame", "name": "size", "args": "bg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "count" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "c" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "643", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Jump", "pc": "633" },
    { "op": "DelVar", "value": "c" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "649" } },
    { "op": "Builtin", "value": "bag$bmin" },
    { "op": "Jump", "pc": "665" },
    { "op": "Frame", "name": "bmin", "args": "bg" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 1, "value": "min" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "668" } },
    { "op": "Builtin", "value": "bag$bmax" },
    { "op": "Jump", "pc": "693" },
    { "op": "Frame", "name": "bmax", "args": "bg" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 1, "value": "max" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Jump", "pc": "693" },
    { "op": "Frame", "name": "bchoose", "args": "bg" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "elt" },
    { "op": "Return", "result": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "pc", "value": "696" } },
    { "op": "Builtin", "value": "bag$add" },
    { "op": "Jump", "pc": "722" },
    { "op": "Frame", "name": "add", "args": "(bg, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "715", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "721" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "StoreVar" },
    { "op": "Return", "result": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "725" } },
    { "op": "Builtin", "value": "bag$remove" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "remove", "args": "(bg, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "765", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "765", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "DelVar" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "combinations", "args": "(bg, k)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "781", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "k" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "856" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Apply", "value": { "type": "pc", "value": "627" } },
    { "op": "StoreVar", "value": "n" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "794", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "n" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "856" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "DelVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "806", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "k" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "856" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Apply", "value": { "type": "pc", "value": "649" } },
    { "op": "StoreVar", "value": "hd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "725" } },
    { "op": "StoreVar", "value": "tl" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu645" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "768" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "842", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu645" },
    { "op": "DelVar", "value": "$accu645" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "696" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu645" },
    { "op": "Jump", "pc": "828" },
    { "op": "DelVar", "value": "hd" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu645" },
    { "op": "DelVar", "value": "$accu645" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "DelVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "768" } },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "atomic_load", "args": "p" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "current" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "current" },
    { "op": "DelVar", "value": "current" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "atomic_store", "args": "(p, v)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "tas", "args": "lk" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "oldvalue" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "oldvalue" },
    { "op": "DelVar", "value": "oldvalue" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "cas", "args": "(p, old, new)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "old" },
    { "op": "DelVar", "value": "old" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "success" },
    { "op": "LoadVar", "value": "success" },
    { "op": "JumpCond", "pc": "906", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "new" },
    { "op": "DelVar", "value": "new" },
    { "op": "Store" },
    { "op": "DelVar", "value": "new" },
    { "op": "DelVar", "value": "p" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "success" },
    { "op": "DelVar", "value": "success" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "BinSema", "args": "initial" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "initial" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "initial" },
    { "op": "DelVar", "value": "initial" },
    { "op": "StoreVar", "value": "sema" },
    { "op": "Return", "result": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Apply", "value": { "type": "pc", "value": "912" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "acquired", "args": "binsema" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "DelVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "held", "args": "binsema" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "DelVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "acquire", "args": "binsema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "962", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "965" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "955" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "DelVar", "value": "binsema" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "release", "args": "binsema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "DelVar", "value": "binsema" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "Condition", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "541" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "wait", "args": "(c, lk)" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "cnt" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Save" },
    { "op": "Continue" },
    { "op": "StoreVar", "value": "((), ctx)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Push", "value": { "type": "pc", "value": "605" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "cnt" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "696" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "1050", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "605" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "Jump", "pc": "1051" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "1056", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "c" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "DelVar", "value": "ctx" },
    { "op": "Jump", "pc": "1059" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1032" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "notify", "args": "c" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "pc", "value": "541" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1093", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "725" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "685" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "DelVar", "value": "c" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "notifyAll", "args": "c" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "541" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "Semaphore", "args": "cnt" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "P", "args": "sema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "1125", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "1128" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1117" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "V", "args": "sema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "Queue", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "get", "args": "q" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "DelVar", "value": "result" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1167", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "1170" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1158" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "pc", "value": "45" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Push", "value": { "type": "pc", "value": "57" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "DelVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "put", "args": "(q, item)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Push", "value": { "type": "pc", "value": "33" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "q" },
    { "op": "DelVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "item" },
    { "op": "DelVar", "value": "item" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issubset", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issubseteq", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issubsetstrict", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1244", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "1247" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "t" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issuperset", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issuperseteq", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "issupersetstrict", "args": "(s, t)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1288", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "&" },
    { "op": "LoadVar", "value": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "1291" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "t" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "add", "args": "(s, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "remove", "args": "(s, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "subsets", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu1076" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1341", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu1076" },
    { "op": "DelVar", "value": "$accu1076" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Apply", "value": { "type": "pc", "value": "1318" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu1076" },
    { "op": "Jump", "pc": "1327" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "s" },
    { "op": "LoadVar", "value": "$accu1076" },
    { "op": "DelVar", "value": "$accu1076" },
    { "op": "Apply", "value": { "type": "pc", "value": "1350" } },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "union", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1366", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "1357" },
    { "op": "DelVar", "value": "e" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "cartesian", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1380", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Jump", "pc": "1415" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu1121" },
    { "op": "Push", "value": { "type": "pc", "value": "57" } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Apply", "value": { "type": "pc", "value": "1369" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "t" },
    { "op": "JumpCond", "pc": "1411", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1408", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu1121" },
    { "op": "DelVar", "value": "$accu1121" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "t" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu1121" },
    { "op": "Jump", "pc": "1395" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "1388" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "t" },
    { "op": "LoadVar", "value": "$accu1121" },
    { "op": "DelVar", "value": "$accu1121" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "combinations", "args": "(s, k)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1431", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "1504" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "StoreVar", "value": "n" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "1444", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "n" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "1504" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "DelVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1456", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "k" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "1504" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 1, "value": "min" },
    { "op": "StoreVar", "value": "hd" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "tl" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu1190" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1418" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "1490", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu1190" },
    { "op": "DelVar", "value": "$accu1190" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu1190" },
    { "op": "Jump", "pc": "1477" },
    { "op": "DelVar", "value": "hd" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu1190" },
    { "op": "DelVar", "value": "$accu1190" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "DelVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1418" } },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "reduce", "args": "(f, d, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1528", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "1514" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "filter", "args": "(cond, s)" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu1243" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "e" },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1553", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "cond" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "1538", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu1243" },
    { "op": "DelVar", "value": "$accu1243" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu1243" },
    { "op": "Jump", "pc": "1538" },
    { "op": "DelVar", "value": "cond" },
    { "op": "DelVar", "value": "e" },
    { "op": "LoadVar", "value": "$accu1243" },
    { "op": "DelVar", "value": "$accu1243" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "map", "args": "(f, s)" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu1264" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "1579", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu1264" },
    { "op": "DelVar", "value": "$accu1264" },
    { "op": "LoadVar", "value": "f" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu1264" },
    { "op": "Jump", "pc": "1567" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "$accu1264" },
    { "op": "DelVar", "value": "$accu1264" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "Game", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "931" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "active_game" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "989" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "players" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "989" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "game" },
    { "op": "Return", "result": "game" },
    { "op": "DelVar", "value": "game" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "game_umpire", "args": "g" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "954" } },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "1751", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1646", "cond": { "type": "bool", "value": "True" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1646", "cond": { "type": "bool", "value": "True" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Jump", "pc": "1647" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "1660", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "active_game" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "998" } },
    { "op": "Pop" },
    { "op": "Jump", "pc": "1622" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "%" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "pairedplayers" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "pairedplayers" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1724", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1294" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1294" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "1676" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "j" },
    { "op": "LoadVar", "value": "j" },
    { "op": "LoadVar", "value": "pairedplayers" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1743", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Del" },
    { "op": "LoadVar", "value": "j" },
    { "op": "DelVar", "value": "j" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "j" },
    { "op": "Jump", "pc": "1727" },
    { "op": "DelVar", "value": "j" },
    { "op": "DelVar", "value": "pairedplayers" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "players" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "1097" } },
    { "op": "Pop" },
    { "op": "Jump", "pc": "1620" },
    { "op": "LoadVar", "value": "g" },
    { "op": "DelVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "973" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "game_join", "args": "(g, id)" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "954" } },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "waiting" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "id" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1793", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "1794" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "1800", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "active_game" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "1067" } },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1838", "cond": { "type": "bool", "value": "True" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1838", "cond": { "type": "bool", "value": "True" } },
    { "op": "LoadVar", "value": "id" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "1836", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "id" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Jump", "pc": "1839" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "1839" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "1852", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "players" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "998" } },
    { "op": "Pop" },
    { "op": "Jump", "pc": "1800" },
    { "op": "DelVar", "value": "id" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "teams" },
    { "op": "LoadVar", "value": "g" },
    { "op": "DelVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "973" } },
    { "op": "Pop" },
    { "op": "Return", "result": "teams" },
    { "op": "DelVar", "value": "teams" },
    { "op": "Jump", "pc": "1967" },
    { "op": "Frame", "name": "game_leave", "args": "(g, id)" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "954" } },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "id" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "1902", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "id" },
    { "op": "DelVar", "value": "id" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1306" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "1936" },
    { "op": "LoadVar", "value": "id" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "1936", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "id" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1294" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "id" },
    { "op": "DelVar", "value": "id" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1306" } },
    { "op": "Store" },
    { "op": "DelVar", "value": "id" },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team1" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1953", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "team2" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "1954" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "1960", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "active_game" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "1067" } },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "g" },
    { "op": "DelVar", "value": "g" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "973" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "1587" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "thegame"}] },
    { "op": "Jump", "pc": "2000" },
    { "op": "Frame", "name": "player", "args": "self" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thegame" }] } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1759" } },
    { "op": "StoreVar", "value": "(team1, team2)" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "self" },
    { "op": "LoadVar", "value": "team1" },
    { "op": "DelVar", "value": "team1" },
    { "op": "LoadVar", "value": "team2" },
    { "op": "DelVar", "value": "team2" },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thegame" }] } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1874" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "1614" }, "args": [] } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thegame" }] } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "True" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 6 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "id" },
    { "op": "JumpCond", "pc": "2018", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "1971" }, "args": [] } },
    { "op": "LoadVar", "value": "id" },
    { "op": "DelVar", "value": "id" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "2009" },
    { "op": "DelVar", "value": "id" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 54","jump over method definition: set program counter to 54"],
    ["Frame subseq(s, b, e)","start of method subseq"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu3","initialize accumulator for list comprehension: pop a value and store in $accu3"],
    ["LoadVar b","push the value of b"],
    ["DelVar b","delete method variable b"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 26","check if loop is done: pop a value and jump to 26 if the value is False"],
    ["LoadVar $accu3","load accumulator: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["LoadVar s","push the value of s"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu3","update accumulator: pop a value and store in $accu3"],
    ["Jump 14","set program counter to 14"],
    ["DelVar s","delete method variable s"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu3","load final accumulator result: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 54","jump over method definition: set program counter to 54"],
    ["Frame append(s, e)","start of method append"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 54","jump over method definition: set program counter to 54"],
    ["Frame head(s)","start of method head"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Push PC(57)","push constant PC(57)"],
    ["Builtin(list$tail)","top of stack is a built-in operation called list$tail"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame tail(s)","start of method tail"],
    ["DelVar result","delete method variable result"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar s","push the value of s"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(2)","call method PC(2)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame sum(a)","start of method sum"],
    ["Push 0","push constant 0"],
    ["StoreVar accu","pop a value and store in accu"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 87","check if loop is done: pop a value and jump to 87 if the value is False"],
    ["LoadVar accu","push the value of accu"],
    ["DelVar accu","delete method variable accu"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar accu","pop a value and store in accu"],
    ["Jump 78","set program counter to 78"],
    ["DelVar v","delete method variable v"],
    ["ReturnOp(accu)","restore caller method state and push accu"],
    ["DelVar accu","delete method variable accu"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame set(a)","start of method set"],
    ["DelVar result","delete method variable result"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu72","initialize accumulator for set comprehension: pop a value and store in $accu72"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 107","check if loop is done: pop a value and jump to 107 if the value is False"],
    ["LoadVar $accu72","load accumulator: push the value of $accu72"],
    ["DelVar $accu72","delete method variable $accu72"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu72","update accumulator: pop a value and store in $accu72"],
    ["Jump 98","set program counter to 98"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu72","load final accumulator result: push the value of $accu72"],
    ["DelVar $accu72","delete method variable $accu72"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame list(a)","start of method list"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu88","initialize accumulator for list comprehension: pop a value and store in $accu88"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 129","check if loop is done: pop a value and jump to 129 if the value is False"],
    ["LoadVar $accu88","load accumulator: push the value of $accu88"],
    ["DelVar $accu88","delete method variable $accu88"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu88","update accumulator: pop a value and store in $accu88"],
    ["Jump 120","set program counter to 120"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu88","load final accumulator result: push the value of $accu88"],
    ["DelVar $accu88","delete method variable $accu88"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame values(d)","start of method values"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu104","initialize accumulator for list comprehension: pop a value and store in $accu104"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(_, v)","get next element and assign to _:v; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 152","check if loop is done: pop a value and jump to 152 if the value is False"],
    ["LoadVar $accu104","load accumulator: push the value of $accu104"],
    ["DelVar $accu104","delete method variable $accu104"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu104","update accumulator: pop a value and store in $accu104"],
    ["Jump 142","set program counter to 142"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu104","load final accumulator result: push the value of $accu104"],
    ["DelVar $accu104","delete method variable $accu104"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame items(d)","start of method items"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu120","initialize accumulator for list comprehension: pop a value and store in $accu120"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(k, v)","get next element and assign to k:v; push False or True depending on success"],
    ["JumpCond False 179","check if loop is done: pop a value and jump to 179 if the value is False"],
    ["LoadVar $accu120","load accumulator: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu120","update accumulator: pop a value and store in $accu120"],
    ["Jump 165","set program counter to 165"],
    ["DelVar k","delete method variable k"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu120","load final accumulator result: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame qsort(a)","start of method qsort"],
    ["LoadVar a","push the value of a"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 195","pop a value and jump to 195 if the value is False"],
    ["DelVar a","delete method variable a"],
    ["Push ()","push constant ()"],
    ["StoreVar sorted","pop a value and store in sorted"],
    ["Jump 261","set program counter to 261"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar a","push the value of a"],
    ["Apply PC(45)","call method PC(45)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Apply PC(57)","call method PC(57)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar (pivot, rest)","pop a value and store in (pivot, rest)"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu155","initialize accumulator for list comprehension: pop a value and store in $accu155"],
    ["LoadVar rest","push the value of rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 222","check if loop is done: pop a value and jump to 222 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 208","pop a value and jump to 208 if the value is False"],
    ["LoadVar $accu155","load accumulator: push the value of $accu155"],
    ["DelVar $accu155","delete method variable $accu155"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu155","update accumulator: pop a value and store in $accu155"],
    ["Jump 208","set program counter to 208"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu155","load final accumulator result: push the value of $accu155"],
    ["DelVar $accu155","delete method variable $accu155"],
    ["StoreVar lower","pop a value and store in lower"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu172","initialize accumulator for list comprehension: pop a value and store in $accu172"],
    ["LoadVar rest","push the value of rest"],
    ["DelVar rest","delete method variable rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 245","check if loop is done: pop a value and jump to 245 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["JumpCond False 231","pop a value and jump to 231 if the value is False"],
    ["LoadVar $accu172","load accumulator: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu172","update accumulator: pop a value and store in $accu172"],
    ["Jump 231","set program counter to 231"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu172","load final accumulator result: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["StoreVar higher","pop a value and store in higher"],
    ["LoadVar lower","push the value of lower"],
    ["DelVar lower","delete method variable lower"],
    ["Apply PC(186)","call method PC(186)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar pivot","push the value of pivot"],
    ["DelVar pivot","delete method variable pivot"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar higher","push the value of higher"],
    ["DelVar higher","delete method variable higher"],
    ["Apply PC(186)","call method PC(186)"],
    ["3-ary +","pop 3 values and push the result of applying +"],
    ["StoreVar sorted","pop a value and store in sorted"],
    ["ReturnOp(sorted)","restore caller method state and push sorted"],
    ["DelVar sorted","delete method variable sorted"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame sorted(d)","start of method sorted"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Apply PC(113)","call method PC(113)"],
    ["Apply PC(186)","call method PC(186)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame reversed(d)","start of method reversed"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["StoreVar n","pop a value and store in n"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu211","initialize accumulator for list comprehension: pop a value and store in $accu211"],
    ["Push 1","push constant 1"],
    ["LoadVar n","push the value of n"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 298","check if loop is done: pop a value and jump to 298 if the value is False"],
    ["LoadVar $accu211","load accumulator: push the value of $accu211"],
    ["DelVar $accu211","delete method variable $accu211"],
    ["LoadVar d","push the value of d"],
    ["LoadVar n","push the value of n"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu211","update accumulator: pop a value and store in $accu211"],
    ["Jump 284","set program counter to 284"],
    ["DelVar d","delete method variable d"],
    ["DelVar i","delete method variable i"],
    ["DelVar n","delete method variable n"],
    ["LoadVar $accu211","load final accumulator result: push the value of $accu211"],
    ["DelVar $accu211","delete method variable $accu211"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame index(d, e)","start of method index"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar e","push the value of e"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 322","pop a value and jump to 322 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 309","set program counter to 309"],
    ["DelVar d","delete method variable d"],
    ["DelVar e","delete method variable e"],
    ["ReturnOp(i)","restore caller method state and push i"],
    ["DelVar i","delete method variable i"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame startswith(d, prefix)","start of method startswith"],
    ["DelVar result","delete method variable result"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["JumpCond False 368","pop a value and jump to 368 if the value is False"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu257","initialize accumulator for list comprehension: pop a value and store in $accu257"],
    ["Push 0","push constant 0"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 361","check if loop is done: pop a value and jump to 361 if the value is False"],
    ["LoadVar $accu257","load accumulator: push the value of $accu257"],
    ["DelVar $accu257","delete method variable $accu257"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar prefix","push the value of prefix"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu257","update accumulator: pop a value and store in $accu257"],
    ["Jump 344","set program counter to 344"],
    ["DelVar d","delete method variable d"],
    ["DelVar i","delete method variable i"],
    ["DelVar prefix","delete method variable prefix"],
    ["LoadVar $accu257","load final accumulator result: push the value of $accu257"],
    ["DelVar $accu257","delete method variable $accu257"],
    ["1-ary all","pop 1 value and push the result of applying all"],
    ["Jump 371","set program counter to 371"],
    ["DelVar d","delete method variable d"],
    ["DelVar prefix","delete method variable prefix"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame foldl(d, f, z)","start of method foldl"],
    ["DelVar result","delete method variable result"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 396","check if loop is done: pop a value and jump to 396 if the value is False"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 382","set program counter to 382"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame foldr(d, f, z)","start of method foldr"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 412","pop a value and jump to 412 if the value is False"],
    ["DelVar d","delete method variable d"],
    ["DelVar f","delete method variable f"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["Jump 434","set program counter to 434"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Apply PC(57)","call method PC(57)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(400)","call method PC(400)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame reduce(f, d, z)","start of method reduce"],
    ["DelVar result","delete method variable result"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(374)","call method PC(374)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame permuted(s)","start of method permuted"],
    ["Push ()","push constant ()"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["StoreVar c","pop a value and store in c"],
    ["LoadVar c","push the value of c"],
    ["Push {}","push constant {}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 482","pop a value and jump to 482 if the value is False"],
    ["LoadVar c","push the value of c"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar e","pop a value and store in e"],
    ["LoadVar perm","push the value of perm"],
    ["DelVar perm","delete method variable perm"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push {}","push constant {}"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar c","pop a value and store in c"],
    ["Jump 459","set program counter to 459"],
    ["DelVar c","delete method variable c"],
    ["ReturnOp(perm)","restore caller method state and push perm"],
    ["DelVar perm","delete method variable perm"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame filter(cond, s)","start of method filter"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu377","initialize accumulator for list comprehension: pop a value and store in $accu377"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["DelVar e","delete method variable e"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 507","check if loop is done: pop a value and jump to 507 if the value is False"],
    ["LoadVar cond","push the value of cond"],
    ["LoadVar e","push the value of e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 492","pop a value and jump to 492 if the value is False"],
    ["LoadVar $accu377","load accumulator: push the value of $accu377"],
    ["DelVar $accu377","delete method variable $accu377"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu377","update accumulator: pop a value and store in $accu377"],
    ["Jump 492","set program counter to 492"],
    ["DelVar cond","delete method variable cond"],
    ["DelVar e","delete method variable e"],
    ["LoadVar $accu377","load final accumulator result: push the value of $accu377"],
    ["DelVar $accu377","delete method variable $accu377"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame map(f, s)","start of method map"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu398","initialize accumulator for list comprehension: pop a value and store in $accu398"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 533","check if loop is done: pop a value and jump to 533 if the value is False"],
    ["LoadVar $accu398","load accumulator: push the value of $accu398"],
    ["DelVar $accu398","delete method variable $accu398"],
    ["LoadVar f","push the value of f"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu398","update accumulator: pop a value and store in $accu398"],
    ["Jump 521","set program counter to 521"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["LoadVar $accu398","load final accumulator result: push the value of $accu398"],
    ["DelVar $accu398","delete method variable $accu398"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame empty()","start of method empty"],
    ["Push {:}","push constant {:}"],
    ["StoreVar bg","pop a value and store in bg"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame fromSet(s)","start of method fromSet"],
    ["Push {:}","initialize accumulator for dict comprehension: push constant {:}"],
    ["StoreVar $accu422","initialize accumulator for dict comprehension: pop a value and store in $accu422"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(elt)","get next element and assign to elt; push False or True depending on success"],
    ["JumpCond False 563","check if loop is done: pop a value and jump to 563 if the value is False"],
    ["LoadVar $accu422","load accumulator: push the value of $accu422"],
    ["DelVar $accu422","delete method variable $accu422"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["Push 1","push constant 1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar $accu422","update accumulator: pop a value and store in $accu422"],
    ["Jump 553","set program counter to 553"],
    ["DelVar elt","delete method variable elt"],
    ["LoadVar $accu422","load final accumulator result: push the value of $accu422"],
    ["DelVar $accu422","delete method variable $accu422"],
    ["StoreVar bg","pop a value and store in bg"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Jump 602","jump over method definition: set program counter to 602"],
    ["Frame fromList(a)","start of method fromList"],
    ["Push {:}","push constant {:}"],
    ["StoreVar bg","pop a value and store in bg"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 599","check if loop is done: pop a value and jump to 599 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 592","pop a value and jump to 592 if the value is False"],
    ["Push ?bg","push constant ?bg"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar [bg]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 576","set program counter to 576"],
    ["Push ?bg","push constant ?bg"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 1","push constant 1"],
    ["StoreVar [bg]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 576","set program counter to 576"],
    ["DelVar v","delete method variable v"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Push PC(605)","push constant PC(605)"],
    ["Builtin(bag$multiplicity)","top of stack is a built-in operation called bag$multiplicity"],
    ["Jump 624","jump over method definition: set program counter to 624"],
    ["Frame multiplicity(bg, elt)","start of method multiplicity"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 618","pop a value and jump to 618 if the value is False"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar count","pop a value and store in count"],
    ["Jump 622","set program counter to 622"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar elt","delete method variable elt"],
    ["Push 0","push constant 0"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(627)","push constant PC(627)"],
    ["Builtin(bag$size)","top of stack is a built-in operation called bag$size"],
    ["Jump 646","jump over method definition: set program counter to 646"],
    ["Frame size(bg)","start of method size"],
    ["Push 0","push constant 0"],
    ["StoreVar count","pop a value and store in count"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["Push 0","push constant 0"],
    ["Cut(_, c)","get next element and assign to _:c; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 643","check if loop is done: pop a value and jump to 643 if the value is False"],
    ["LoadVar count","push the value of count"],
    ["DelVar count","delete method variable count"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar count","pop a value and store in count"],
    ["Jump 633","set program counter to 633"],
    ["DelVar c","delete method variable c"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(649)","push constant PC(649)"],
    ["Builtin(bag$bmin)","top of stack is a built-in operation called bag$bmin"],
    ["Jump 665","jump over method definition: set program counter to 665"],
    ["Frame bmin(bg)","start of method bmin"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar bg","push the value of bg"],
    ["Push {:}","push constant {:}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["1-ary min","pop 1 value and push the result of applying min"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(668)","push constant PC(668)"],
    ["Builtin(bag$bmax)","top of stack is a built-in operation called bag$bmax"],
    ["Jump 693","jump over method definition: set program counter to 693"],
    ["Frame bmax(bg)","start of method bmax"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar bg","push the value of bg"],
    ["Push {:}","push constant {:}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["1-ary max","pop 1 value and push the result of applying max"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Jump 693","jump over method definition: set program counter to 693"],
    ["Frame bchoose(bg)","start of method bchoose"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar elt","pop a value and store in elt"],
    ["ReturnOp(elt)","restore caller method state and push elt"],
    ["DelVar elt","delete method variable elt"],
    ["Push PC(696)","push constant PC(696)"],
    ["Builtin(bag$add)","top of stack is a built-in operation called bag$add"],
    ["Jump 722","jump over method definition: set program counter to 722"],
    ["Frame add(bg, elt)","start of method add"],
    ["DelVar result","delete method variable result"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 715","pop a value and jump to 715 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 721","set program counter to 721"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 1","push constant 1"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Push PC(725)","push constant PC(725)"],
    ["Builtin(bag$remove)","top of stack is a built-in operation called bag$remove"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame remove(bg, elt)","start of method remove"],
    ["DelVar result","delete method variable result"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 765","pop a value and jump to 765 if the value is False"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar result","push the value of result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["LoadVar result","push the value of result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 765","pop a value and jump to 765 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["DelVar [result]","pop an address of a method variable and delete that variable"],
    ["DelVar elt","delete method variable elt"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame combinations(bg, k)","start of method combinations"],
    ["DelVar result","delete method variable result"],
    ["LoadVar k","push the value of k"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 781","pop a value and jump to 781 if the value is False"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar k","delete method variable k"],
    ["Push {}","push constant {}"],
    ["Push {:}","push constant {:}"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 856","set program counter to 856"],
    ["LoadVar bg","push the value of bg"],
    ["Apply PC(627)","call method PC(627)"],
    ["StoreVar n","pop a value and store in n"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 794","pop a value and jump to 794 if the value is False"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar k","delete method variable k"],
    ["DelVar n","delete method variable n"],
    ["Push {}","push constant {}"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 856","set program counter to 856"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["DelVar n","delete method variable n"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 806","pop a value and jump to 806 if the value is False"],
    ["DelVar k","delete method variable k"],
    ["Push {}","push constant {}"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 856","set program counter to 856"],
    ["LoadVar bg","push the value of bg"],
    ["Apply PC(649)","call method PC(649)"],
    ["StoreVar hd","pop a value and store in hd"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(725)","call method PC(725)"],
    ["StoreVar tl","pop a value and store in tl"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu645","initialize accumulator for set comprehension: pop a value and store in $accu645"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(768)","call method PC(768)"],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 842","check if loop is done: pop a value and jump to 842 if the value is False"],
    ["LoadVar $accu645","load accumulator: push the value of $accu645"],
    ["DelVar $accu645","delete method variable $accu645"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(696)","call method PC(696)"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu645","update accumulator: pop a value and store in $accu645"],
    ["Jump 828","set program counter to 828"],
    ["DelVar hd","delete method variable hd"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu645","load final accumulator result: push the value of $accu645"],
    ["DelVar $accu645","delete method variable $accu645"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["DelVar tl","delete method variable tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(768)","call method PC(768)"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame atomic_load(p)","start of method atomic_load"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar current","pop a value and store in current"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(current)","restore caller method state and push current"],
    ["DelVar current","delete method variable current"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame atomic_store(p, v)","start of method atomic_store"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame tas(lk)","start of method tas"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar oldvalue","pop a value and store in oldvalue"],
    ["LoadVar lk","push the value of lk"],
    ["DelVar lk","delete method variable lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(oldvalue)","restore caller method state and push oldvalue"],
    ["DelVar oldvalue","delete method variable oldvalue"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame cas(p, old, new)","start of method cas"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar old","push the value of old"],
    ["DelVar old","delete method variable old"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar success","pop a value and store in success"],
    ["LoadVar success","push the value of success"],
    ["JumpCond False 906","pop a value and jump to 906 if the value is False"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar new","push the value of new"],
    ["DelVar new","delete method variable new"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar new","delete method variable new"],
    ["DelVar p","delete method variable p"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(success)","restore caller method state and push success"],
    ["DelVar success","delete method variable success"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame BinSema(initial)","start of method BinSema"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar initial","push the value of initial"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar initial","push the value of initial"],
    ["DelVar initial","delete method variable initial"],
    ["StoreVar sema","pop a value and store in sema"],
    ["ReturnOp(sema)","restore caller method state and push sema"],
    ["DelVar sema","delete method variable sema"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame Lock()","start of method Lock"],
    ["DelVar result","delete method variable result"],
    ["Push False","push constant False"],
    ["Apply PC(912)","call method PC(912)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame acquired(binsema)","start of method acquired"],
    ["DelVar result","delete method variable result"],
    ["LoadVar binsema","push the value of binsema"],
    ["DelVar binsema","delete method variable binsema"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame held(binsema)","start of method held"],
    ["DelVar result","delete method variable result"],
    ["LoadVar binsema","push the value of binsema"],
    ["DelVar binsema","delete method variable binsema"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame acquire(binsema)","start of method acquire"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar binsema","push the value of binsema"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 962","pop a value and jump to 962 if the value is False"],
    ["Jump 965","set program counter to 965"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 955","set program counter to 955"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar binsema","push the value of binsema"],
    ["DelVar binsema","delete method variable binsema"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame release(binsema)","start of method release"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar binsema","push the value of binsema"],
    ["Load","pop an address and push the value at the address"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar binsema","push the value of binsema"],
    ["DelVar binsema","delete method variable binsema"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame Condition()","start of method Condition"],
    ["DelVar result","delete method variable result"],
    ["Push PC(541)","push constant PC(541)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame wait(c, lk)","start of method wait"],
    ["Push 0","push constant 0"],
    ["StoreVar cnt","pop a value and store in cnt"],
    ["DelVar cnt","delete method variable cnt"],
    ["Push ()","push constant ()"],
    ["Save","pop a value and save context"],
    ["Continue","a no-op, must follow a Stop or Save operation"],
    ["StoreVar ((), ctx)","pop a value and store in ((), ctx)"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(605)","push constant PC(605)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar cnt","pop a value and store in cnt"],
    ["LoadVar c","push the value of c"],
    ["Push PC(696)","push constant PC(696)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar lk","push the value of lk"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 1050","pop a value and jump to 1050 if the value is False"],
    ["Push PC(605)","push constant PC(605)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar cnt","push the value of cnt"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["Jump 1051","set program counter to 1051"],
    ["Push False","push constant False"],
    ["JumpCond False 1056","pop a value and jump to 1056 if the value is False"],
    ["DelVar c","delete method variable c"],
    ["DelVar cnt","delete method variable cnt"],
    ["DelVar ctx","delete method variable ctx"],
    ["Jump 1059","set program counter to 1059"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1032","set program counter to 1032"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar lk","push the value of lk"],
    ["DelVar lk","delete method variable lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame notify(c)","start of method notify"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["Push PC(541)","push constant PC(541)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1093","pop a value and jump to 1093 if the value is False"],
    ["LoadVar c","push the value of c"],
    ["Push PC(725)","push constant PC(725)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push PC(685)","push constant PC(685)"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar c","delete method variable c"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame notifyAll(c)","start of method notifyAll"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push PC(541)","push constant PC(541)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame Semaphore(cnt)","start of method Semaphore"],
    ["DelVar result","delete method variable result"],
    ["LoadVar cnt","push the value of cnt"],
    ["DelVar cnt","delete method variable cnt"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame P(sema)","start of method P"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar sema","push the value of sema"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 1125","pop a value and jump to 1125 if the value is False"],
    ["Jump 1128","set program counter to 1128"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1117","set program counter to 1117"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar sema","push the value of sema"],
    ["DelVar sema","delete method variable sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame V(sema)","start of method V"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar sema","push the value of sema"],
    ["DelVar sema","delete method variable sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame Queue()","start of method Queue"],
    ["DelVar result","delete method variable result"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame get(q)","start of method get"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["DelVar result","delete method variable result"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["Push ()","push constant ()"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1167","pop a value and jump to 1167 if the value is False"],
    ["Jump 1170","set program counter to 1170"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1158","set program counter to 1158"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push PC(45)","push constant PC(45)"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar q","push the value of q"],
    ["Push PC(57)","push constant PC(57)"],
    ["LoadVar q","push the value of q"],
    ["DelVar q","delete method variable q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame put(q, item)","start of method put"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar q","push the value of q"],
    ["Push PC(33)","push constant PC(33)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar q","push the value of q"],
    ["DelVar q","delete method variable q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar item","push the value of item"],
    ["DelVar item","delete method variable item"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issubset(s, t)","start of method issubset"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issubseteq(s, t)","start of method issubseteq"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issubsetstrict(s, t)","start of method issubsetstrict"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["LoadVar t","push the value of t"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1244","pop a value and jump to 1244 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 1247","set program counter to 1247"],
    ["DelVar s","delete method variable s"],
    ["DelVar t","delete method variable t"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issuperset(s, t)","start of method issuperset"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["LoadVar t","push the value of t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issuperseteq(s, t)","start of method issuperseteq"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["LoadVar t","push the value of t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame issupersetstrict(s, t)","start of method issupersetstrict"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["LoadVar t","push the value of t"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1288","pop a value and jump to 1288 if the value is False"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["LoadVar t","push the value of t"],
    ["2-ary &","pop 2 values and push the result of applying &"],
    ["LoadVar t","push the value of t"],
    ["DelVar t","delete method variable t"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 1291","set program counter to 1291"],
    ["DelVar s","delete method variable s"],
    ["DelVar t","delete method variable t"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame add(s, elt)","start of method add"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push {}","push constant {}"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame remove(s, elt)","start of method remove"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push {}","push constant {}"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame subsets(s)","start of method subsets"],
    ["DelVar result","delete method variable result"],
    ["Push {}","push constant {}"],
    ["LoadVar s","push the value of s"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu1076","initialize accumulator for set comprehension: pop a value and store in $accu1076"],
    ["LoadVar s","push the value of s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1341","check if loop is done: pop a value and jump to 1341 if the value is False"],
    ["LoadVar $accu1076","load accumulator: push the value of $accu1076"],
    ["DelVar $accu1076","delete method variable $accu1076"],
    ["LoadVar s","push the value of s"],
    ["Push {}","push constant {}"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Apply PC(1318)","call method PC(1318)"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu1076","update accumulator: pop a value and store in $accu1076"],
    ["Jump 1327","set program counter to 1327"],
    ["DelVar e","delete method variable e"],
    ["DelVar s","delete method variable s"],
    ["LoadVar $accu1076","load final accumulator result: push the value of $accu1076"],
    ["DelVar $accu1076","delete method variable $accu1076"],
    ["Apply PC(1350)","call method PC(1350)"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame union(s)","start of method union"],
    ["DelVar result","delete method variable result"],
    ["Push {}","push constant {}"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1366","check if loop is done: pop a value and jump to 1366 if the value is False"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 1357","set program counter to 1357"],
    ["DelVar e","delete method variable e"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame cartesian(d)","start of method cartesian"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1380","pop a value and jump to 1380 if the value is False"],
    ["DelVar d","delete method variable d"],
    ["Push {}","push constant {}"],
    ["Push ()","push constant ()"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Jump 1415","set program counter to 1415"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu1121","initialize accumulator for set comprehension: pop a value and store in $accu1121"],
    ["Push PC(57)","push constant PC(57)"],
    ["LoadVar d","push the value of d"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Apply PC(1369)","call method PC(1369)"],
    ["Push 0","push constant 0"],
    ["Cut(t)","get next element and assign to t; push False or True depending on success"],
    ["JumpCond False 1411","check if loop is done: pop a value and jump to 1411 if the value is False"],
    ["LoadVar d","push the value of d"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1408","check if loop is done: pop a value and jump to 1408 if the value is False"],
    ["LoadVar $accu1121","load accumulator: push the value of $accu1121"],
    ["DelVar $accu1121","delete method variable $accu1121"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar t","push the value of t"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu1121","update accumulator: pop a value and store in $accu1121"],
    ["Jump 1395","set program counter to 1395"],
    ["DelVar e","delete method variable e"],
    ["DelVar t","delete method variable t"],
    ["Jump 1388","set program counter to 1388"],
    ["DelVar d","delete method variable d"],
    ["DelVar t","delete method variable t"],
    ["LoadVar $accu1121","load final accumulator result: push the value of $accu1121"],
    ["DelVar $accu1121","delete method variable $accu1121"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame combinations(s, k)","start of method combinations"],
    ["DelVar result","delete method variable result"],
    ["LoadVar k","push the value of k"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1431","pop a value and jump to 1431 if the value is False"],
    ["DelVar k","delete method variable k"],
    ["DelVar s","delete method variable s"],
    ["Push {}","push constant {}"],
    ["Push {}","push constant {}"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 1504","set program counter to 1504"],
    ["LoadVar s","push the value of s"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["StoreVar n","pop a value and store in n"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 1444","pop a value and jump to 1444 if the value is False"],
    ["DelVar k","delete method variable k"],
    ["DelVar n","delete method variable n"],
    ["DelVar s","delete method variable s"],
    ["Push {}","push constant {}"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 1504","set program counter to 1504"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["DelVar n","delete method variable n"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1456","pop a value and jump to 1456 if the value is False"],
    ["DelVar k","delete method variable k"],
    ["Push {}","push constant {}"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 1504","set program counter to 1504"],
    ["LoadVar s","push the value of s"],
    ["1-ary min","pop 1 value and push the result of applying min"],
    ["StoreVar hd","pop a value and store in hd"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push {}","push constant {}"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar tl","pop a value and store in tl"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu1190","initialize accumulator for set comprehension: pop a value and store in $accu1190"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1418)","call method PC(1418)"],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 1490","check if loop is done: pop a value and jump to 1490 if the value is False"],
    ["LoadVar $accu1190","load accumulator: push the value of $accu1190"],
    ["DelVar $accu1190","delete method variable $accu1190"],
    ["Push {}","push constant {}"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu1190","update accumulator: pop a value and store in $accu1190"],
    ["Jump 1477","set program counter to 1477"],
    ["DelVar hd","delete method variable hd"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu1190","load final accumulator result: push the value of $accu1190"],
    ["DelVar $accu1190","delete method variable $accu1190"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["DelVar tl","delete method variable tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1418)","call method PC(1418)"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame reduce(f, d, z)","start of method reduce"],
    ["DelVar result","delete method variable result"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1528","check if loop is done: pop a value and jump to 1528 if the value is False"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 1514","set program counter to 1514"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame filter(cond, s)","start of method filter"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu1243","initialize accumulator for set comprehension: pop a value and store in $accu1243"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["DelVar e","delete method variable e"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1553","check if loop is done: pop a value and jump to 1553 if the value is False"],
    ["LoadVar cond","push the value of cond"],
    ["LoadVar e","push the value of e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 1538","pop a value and jump to 1538 if the value is False"],
    ["LoadVar $accu1243","load accumulator: push the value of $accu1243"],
    ["DelVar $accu1243","delete method variable $accu1243"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu1243","update accumulator: pop a value and store in $accu1243"],
    ["Jump 1538","set program counter to 1538"],
    ["DelVar cond","delete method variable cond"],
    ["DelVar e","delete method variable e"],
    ["LoadVar $accu1243","load final accumulator result: push the value of $accu1243"],
    ["DelVar $accu1243","delete method variable $accu1243"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame map(f, s)","start of method map"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu1264","initialize accumulator for set comprehension: pop a value and store in $accu1264"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 1579","check if loop is done: pop a value and jump to 1579 if the value is False"],
    ["LoadVar $accu1264","load accumulator: push the value of $accu1264"],
    ["DelVar $accu1264","delete method variable $accu1264"],
    ["LoadVar f","push the value of f"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu1264","update accumulator: pop a value and store in $accu1264"],
    ["Jump 1567","set program counter to 1567"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["LoadVar $accu1264","load final accumulator result: push the value of $accu1264"],
    ["DelVar $accu1264","delete method variable $accu1264"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame Game()","start of method Game"],
    ["Push {:}","push constant {:}"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["Push ()","push constant ()"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"team1\"","push constant \"team1\""],
    ["Push {}","push constant {}"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"team2\"","push constant \"team2\""],
    ["Push {}","push constant {}"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"lock\"","push constant \"lock\""],
    ["Push ()","push constant ()"],
    ["Apply PC(931)","call method PC(931)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"active_game\"","push constant \"active_game\""],
    ["Push ()","push constant ()"],
    ["Apply PC(989)","call method PC(989)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"players\"","push constant \"players\""],
    ["Push ()","push constant ()"],
    ["Apply PC(989)","call method PC(989)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar game","pop a value and store in game"],
    ["ReturnOp(game)","restore caller method state and push game"],
    ["DelVar game","delete method variable game"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame game_umpire(g)","start of method game_umpire"],
    ["LoadVar g","push the value of g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(954)","call method PC(954)"],
    ["Pop","discard the top value on the stack"],
    ["Push True","push constant True"],
    ["JumpCond False 1751","pop a value and jump to 1751 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 2","push constant 2"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond True 1646","pop a value and jump to 1646 if the value is True"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond True 1646","pop a value and jump to 1646 if the value is True"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Jump 1647","set program counter to 1647"],
    ["Push True","push constant True"],
    ["JumpCond False 1660","pop a value and jump to 1660 if the value is False"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"active_game\"","push constant \"active_game\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar g","push the value of g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(998)","call method PC(998)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 1622","set program counter to 1622"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 2","push constant 2"],
    ["2-ary %","pop 2 values and push the result of applying %"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar pairedplayers","pop a value and store in pairedplayers"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["LoadVar i","push the value of i"],
    ["LoadVar pairedplayers","push the value of pairedplayers"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 1724","pop a value and jump to 1724 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar i","push the value of i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1294)","call method PC(1294)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar i","push the value of i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1294)","call method PC(1294)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 2","push constant 2"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 1676","set program counter to 1676"],
    ["DelVar i","delete method variable i"],
    ["Push 0","push constant 0"],
    ["StoreVar j","pop a value and store in j"],
    ["LoadVar j","push the value of j"],
    ["LoadVar pairedplayers","push the value of pairedplayers"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 1743","pop a value and jump to 1743 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Del","pop an address and delete the shared variable at the address"],
    ["LoadVar j","push the value of j"],
    ["DelVar j","delete method variable j"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar j","pop a value and store in j"],
    ["Jump 1727","set program counter to 1727"],
    ["DelVar j","delete method variable j"],
    ["DelVar pairedplayers","delete method variable pairedplayers"],
    ["LoadVar g","push the value of g"],
    ["Push \"players\"","push constant \"players\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(1097)","call method PC(1097)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 1620","set program counter to 1620"],
    ["LoadVar g","push the value of g"],
    ["DelVar g","delete method variable g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(973)","call method PC(973)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame game_join(g, id)","start of method game_join"],
    ["LoadVar g","push the value of g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(954)","call method PC(954)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar g","push the value of g"],
    ["Push \"waiting\"","push constant \"waiting\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar id","push the value of id"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1793","pop a value and jump to 1793 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 1794","set program counter to 1794"],
    ["Push False","push constant False"],
    ["JumpCond False 1800","pop a value and jump to 1800 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"active_game\"","push constant \"active_game\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(1067)","call method PC(1067)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond True 1838","pop a value and jump to 1838 if the value is True"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond True 1838","pop a value and jump to 1838 if the value is True"],
    ["LoadVar id","push the value of id"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 1836","pop a value and jump to 1836 if the value is False"],
    ["LoadVar id","push the value of id"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Jump 1839","set program counter to 1839"],
    ["Push False","push constant False"],
    ["Jump 1839","set program counter to 1839"],
    ["Push True","push constant True"],
    ["JumpCond False 1852","pop a value and jump to 1852 if the value is False"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"players\"","push constant \"players\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar g","push the value of g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(998)","call method PC(998)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 1800","set program counter to 1800"],
    ["DelVar id","delete method variable id"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar teams","pop a value and store in teams"],
    ["LoadVar g","push the value of g"],
    ["DelVar g","delete method variable g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(973)","call method PC(973)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(teams)","restore caller method state and push teams"],
    ["DelVar teams","delete method variable teams"],
    ["Jump 1967","jump over method definition: set program counter to 1967"],
    ["Frame game_leave(g, id)","start of method game_leave"],
    ["LoadVar g","push the value of g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(954)","call method PC(954)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar id","push the value of id"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 1902","pop a value and jump to 1902 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar id","push the value of id"],
    ["DelVar id","delete method variable id"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1306)","call method PC(1306)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 1936","set program counter to 1936"],
    ["LoadVar id","push the value of id"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 1936","pop a value and jump to 1936 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar id","push the value of id"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1294)","call method PC(1294)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar id","push the value of id"],
    ["DelVar id","delete method variable id"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1306)","call method PC(1306)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar id","delete method variable id"],
    ["LoadVar g","push the value of g"],
    ["Push \"team1\"","push constant \"team1\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1953","pop a value and jump to 1953 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"team2\"","push constant \"team2\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 1954","set program counter to 1954"],
    ["Push False","push constant False"],
    ["JumpCond False 1960","pop a value and jump to 1960 if the value is False"],
    ["LoadVar g","push the value of g"],
    ["Push \"active_game\"","push constant \"active_game\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(1067)","call method PC(1067)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar g","push the value of g"],
    ["DelVar g","delete method variable g"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(973)","call method PC(973)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ()","push constant ()"],
    ["Apply PC(1587)","call method PC(1587)"],
    ["Store thegame","pop a value and store it in shared variable thegame"],
    ["Jump 2000","jump over method definition: set program counter to 2000"],
    ["Frame player(self)","start of method player"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push ?thegame","push constant ?thegame"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1759)","call method PC(1759)"],
    ["StoreVar (team1, team2)","pop a value and store in (team1, team2)"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar self","push the value of self"],
    ["LoadVar team1","push the value of team1"],
    ["DelVar team1","delete method variable team1"],
    ["LoadVar team2","push the value of team2"],
    ["DelVar team2","delete method variable team2"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push ?thegame","push constant ?thegame"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(1874)","call method PC(1874)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ?PC(1614)","push constant ?PC(1614)"],
    ["Push ?thegame","push constant ?thegame"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push 1","push constant 1"],
    ["Push 6","push constant 6"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(id)","get next element and assign to id; push False or True depending on success"],
    ["JumpCond False 2018","check if loop is done: pop a value and jump to 2018 if the value is False"],
    ["Push ?PC(1971)","push constant ?PC(1971)"],
    ["LoadVar id","push the value of id"],
    ["DelVar id","delete method variable id"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 2009","set program counter to 2009"],
    ["DelVar id","delete method variable id"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 15, "endcolumn": 26, "stmt": [1,1,15,26] },
    { "module": "list", "line": 2, "column": 1, "endline": 2, "endcolumn": 3, "stmt": [2,1,2,35] },
    { "module": "list", "line": 2, "column": 1, "endline": 2, "endcolumn": 35, "stmt": [2,1,2,35] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 36, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 34, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 31, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 37, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "list", "line": 3, "column": 5, "endline": 3, "endcolumn": 12, "stmt": [3,5,3,39] },
    { "module": "list", "line": 2, "column": 1, "endline": 2, "endcolumn": 35, "stmt": [2,1,2,35] },
    { "module": "list", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,32] },
    { "module": "list", "line": 5, "column": 1, "endline": 5, "endcolumn": 32, "stmt": [5,1,5,32] },
    { "module": "list", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 14, "endline": 6, "endcolumn": 21, "stmt": [6,5,6,21] },
    { "module": "list", "line": 6, "column": 5, "endline": 6, "endcolumn": 12, "stmt": [6,5,6,21] },
    { "module": "list", "line": 5, "column": 1, "endline": 5, "endcolumn": 32, "stmt": [5,1,5,32] },
    { "module": "list", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,27] },
    { "module": "list", "line": 8, "column": 1, "endline": 8, "endcolumn": 27, "stmt": [8,1,8,27] },
    { "module": "list", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 16, "endline": 9, "endcolumn": 16, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "list", "line": 9, "column": 5, "endline": 9, "endcolumn": 12, "stmt": [9,5,9,17] },
    { "module": "list", "line": 8, "column": 1, "endline": 8, "endcolumn": 27, "stmt": [8,1,8,27] },
    { "module": "list", "line": 11, "column": 9, "endline": 11, "endcolumn": 12, "stmt": [11,1,11,24] },
    { "module": "list", "line": 11, "column": 1, "endline": 11, "endcolumn": 24, "stmt": [11,1,11,24] },
    { "module": "list", "line": 12, "column": 1, "endline": 12, "endcolumn": 3, "stmt": [12,1,12,27] },
    { "module": "list", "line": 12, "column": 1, "endline": 12, "endcolumn": 27, "stmt": [12,1,12,27] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 21, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 24, "endline": 13, "endcolumn": 24, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 31, "endline": 13, "endcolumn": 31, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 31, "endline": 13, "endcolumn": 31, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 27, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 21, "endline": 13, "endcolumn": 32, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 14, "endline": 13, "endcolumn": 33, "stmt": [13,5,13,33] },
    { "module": "list", "line": 13, "column": 5, "endline": 13, "endcolumn": 12, "stmt": [13,5,13,33] },
    { "module": "list", "line": 12, "column": 1, "endline": 12, "endcolumn": 27, "stmt": [12,1,12,27] },
    { "module": "list", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,24] },
    { "module": "list", "line": 16, "column": 1, "endline": 16, "endcolumn": 24, "stmt": [16,1,16,24] },
    { "module": "list", "line": 17, "column": 12, "endline": 17, "endcolumn": 12, "stmt": [17,5,17,12] },
    { "module": "list", "line": 17, "column": 5, "endline": 17, "endcolumn": 10, "stmt": [17,5,17,12] },
    { "module": "list", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14] },
    { "module": "list", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14] },
    { "module": "list", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14] },
    { "module": "list", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14] },
    { "module": "list", "line": 18, "column": 5, "endline": 18, "endcolumn": 7, "stmt": [18,5,18,14] },
    { "module": "list", "line": 19, "column": 9, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,17] },
    { "module": "list", "line": 19, "column": 9, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,17] },
    { "module": "list", "line": 19, "column": 17, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,17] },
    { "module": "list", "line": 19, "column": 17, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,17] },
    { "module": "list", "line": 19, "column": 9, "endline": 19, "endcolumn": 17, "stmt": [19,9,19,17] },
    { "module": "list", "line": 19, "column": 9, "endline": 19, "endcolumn": 15, "stmt": [19,9,19,17] },
    { "module": "list", "line": 18, "column": 14, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,14] },
    { "module": "list", "line": 16, "column": 1, "endline": 16, "endcolumn": 24, "stmt": [16,1,16,24] },
    { "module": "list", "line": 16, "column": 1, "endline": 16, "endcolumn": 24, "stmt": [16,1,16,24] },
    { "module": "list", "line": 16, "column": 1, "endline": 16, "endcolumn": 24, "stmt": [16,1,16,24] },
    { "module": "list", "line": 22, "column": 1, "endline": 22, "endcolumn": 3, "stmt": [22,1,22,26] },
    { "module": "list", "line": 22, "column": 1, "endline": 22, "endcolumn": 26, "stmt": [22,1,22,26] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 16, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 27, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 16, "endline": 23, "endcolumn": 27, "stmt": [23,5,23,29] },
    { "module": "list", "line": 23, "column": 5, "endline": 23, "endcolumn": 12, "stmt": [23,5,23,29] },
    { "module": "list", "line": 22, "column": 1, "endline": 22, "endcolumn": 26, "stmt": [22,1,22,26] },
    { "module": "list", "line": 26, "column": 1, "endline": 26, "endcolumn": 3, "stmt": [26,1,26,27] },
    { "module": "list", "line": 26, "column": 1, "endline": 26, "endcolumn": 27, "stmt": [26,1,26,27] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 16, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 16, "endline": 27, "endcolumn": 27, "stmt": [27,5,27,29] },
    { "module": "list", "line": 27, "column": 5, "endline": 27, "endcolumn": 12, "stmt": [27,5,27,29] },
    { "module": "list", "line": 26, "column": 1, "endline": 26, "endcolumn": 27, "stmt": [26,1,26,27] },
    { "module": "list", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,29] },
    { "module": "list", "line": 30, "column": 1, "endline": 30, "endcolumn": 29, "stmt": [30,1,30,29] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 16, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 29, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 16, "endline": 31, "endcolumn": 29, "stmt": [31,5,31,31] },
    { "module": "list", "line": 31, "column": 5, "endline": 31, "endcolumn": 12, "stmt": [31,5,31,31] },
    { "module": "list", "line": 30, "column": 1, "endline": 30, "endcolumn": 29, "stmt": [30,1,30,29] },
    { "module": "list", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,28] },
    { "module": "list", "line": 34, "column": 1, "endline": 34, "endcolumn": 28, "stmt": [34,1,34,28] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 17, "endline": 35, "endcolumn": 17, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 17, "endline": 35, "endcolumn": 17, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 20, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 20, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 17, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 34, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 16, "endline": 35, "endcolumn": 34, "stmt": [35,5,35,36] },
    { "module": "list", "line": 35, "column": 5, "endline": 35, "endcolumn": 12, "stmt": [35,5,35,36] },
    { "module": "list", "line": 34, "column": 1, "endline": 34, "endcolumn": 28, "stmt": [34,1,34,28] },
    { "module": "list", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,28] },
    { "module": "list", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "list", "line": 39, "column": 8, "endline": 39, "endcolumn": 8, "stmt": [39,5,39,15] },
    { "module": "list", "line": 39, "column": 13, "endline": 39, "endcolumn": 14, "stmt": [39,5,39,15] },
    { "module": "list", "line": 39, "column": 8, "endline": 39, "endcolumn": 14, "stmt": [39,5,39,15] },
    { "module": "list", "line": 39, "column": 5, "endline": 39, "endcolumn": 6, "stmt": [39,5,39,15] },
    { "module": "list", "line": 40, "column": 18, "endline": 40, "endcolumn": 19, "stmt": [40,9,40,19] },
    { "module": "list", "line": 40, "column": 18, "endline": 40, "endcolumn": 19, "stmt": [40,9,40,19] },
    { "module": "list", "line": 40, "column": 9, "endline": 40, "endcolumn": 16, "stmt": [40,9,40,19] },
    { "module": "list", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15] },
    { "module": "list", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 34, "endline": 42, "endcolumn": 34, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 29, "endline": 42, "endcolumn": 35, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 43, "endline": 42, "endcolumn": 43, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 43, "endline": 42, "endcolumn": 43, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 38, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 29, "endline": 42, "endcolumn": 44, "stmt": [42,9,42,53] },
    { "module": "list", "line": 42, "column": 9, "endline": 42, "endcolumn": 27, "stmt": [42,9,42,53] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 34, "endline": 43, "endcolumn": 37, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 45, "endline": 43, "endcolumn": 45, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 49, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 45, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 23, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 49, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 23, "endline": 43, "endcolumn": 53, "stmt": [43,9,43,64] },
    { "module": "list", "line": 43, "column": 9, "endline": 43, "endcolumn": 19, "stmt": [43,9,43,64] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 35, "endline": 44, "endcolumn": 38, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 35, "endline": 44, "endcolumn": 38, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 46, "endline": 44, "endcolumn": 46, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 51, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 46, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 24, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 51, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 24, "endline": 44, "endcolumn": 55, "stmt": [44,9,44,57] },
    { "module": "list", "line": 44, "column": 9, "endline": 44, "endcolumn": 20, "stmt": [44,9,44,57] },
    { "module": "list", "line": 45, "column": 28, "endline": 45, "endcolumn": 32, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 28, "endline": 45, "endcolumn": 32, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 22, "endline": 45, "endcolumn": 33, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 38, "endline": 45, "endcolumn": 43, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 38, "endline": 45, "endcolumn": 42, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 38, "endline": 45, "endcolumn": 42, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 38, "endline": 45, "endcolumn": 43, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 54, "endline": 45, "endcolumn": 59, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 54, "endline": 45, "endcolumn": 59, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 48, "endline": 45, "endcolumn": 60, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 22, "endline": 45, "endcolumn": 60, "stmt": [45,13,45,60] },
    { "module": "list", "line": 45, "column": 13, "endline": 45, "endcolumn": 20, "stmt": [45,13,45,60] },
    { "module": "list", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "list", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "list", "line": 48, "column": 1, "endline": 48, "endcolumn": 3, "stmt": [48,1,48,29] },
    { "module": "list", "line": 48, "column": 1, "endline": 48, "endcolumn": 29, "stmt": [48,1,48,29] },
    { "module": "list", "line": 49, "column": 25, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,27] },
    { "module": "list", "line": 49, "column": 25, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,27] },
    { "module": "list", "line": 49, "column": 25, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,27] },
    { "module": "list", "line": 49, "column": 20, "endline": 49, "endcolumn": 26, "stmt": [49,5,49,27] },
    { "module": "list", "line": 49, "column": 14, "endline": 49, "endcolumn": 27, "stmt": [49,5,49,27] },
    { "module": "list", "line": 49, "column": 5, "endline": 49, "endcolumn": 12, "stmt": [49,5,49,27] },
    { "module": "list", "line": 48, "column": 1, "endline": 48, "endcolumn": 29, "stmt": [48,1,48,29] },
    { "module": "list", "line": 52, "column": 1, "endline": 52, "endcolumn": 3, "stmt": [52,1,52,31] },
    { "module": "list", "line": 52, "column": 1, "endline": 52, "endcolumn": 31, "stmt": [52,1,52,31] },
    { "module": "list", "line": 53, "column": 17, "endline": 53, "endcolumn": 17, "stmt": [53,5,53,18] },
    { "module": "list", "line": 53, "column": 17, "endline": 53, "endcolumn": 17, "stmt": [53,5,53,18] },
    { "module": "list", "line": 53, "column": 13, "endline": 53, "endcolumn": 18, "stmt": [53,5,53,18] },
    { "module": "list", "line": 53, "column": 5, "endline": 53, "endcolumn": 11, "stmt": [53,5,53,18] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 38, "endline": 54, "endcolumn": 38, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 41, "endline": 54, "endcolumn": 41, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 38, "endline": 54, "endcolumn": 41, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 20, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 22, "endline": 54, "endcolumn": 22, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 22, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 25, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 25, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 43, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 20, "endline": 54, "endcolumn": 43, "stmt": [54,9,54,45] },
    { "module": "list", "line": 54, "column": 9, "endline": 54, "endcolumn": 16, "stmt": [54,9,54,45] },
    { "module": "list", "line": 52, "column": 1, "endline": 52, "endcolumn": 31, "stmt": [52,1,52,31] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 3, "stmt": [57,1,57,26] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 26, "stmt": [57,1,57,26] },
    { "module": "list", "line": 58, "column": 9, "endline": 58, "endcolumn": 9, "stmt": [58,5,58,9] },
    { "module": "list", "line": 58, "column": 5, "endline": 58, "endcolumn": 7, "stmt": [58,5,58,9] },
    { "module": "list", "line": 59, "column": 11, "endline": 59, "endcolumn": 11, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 13, "endline": 59, "endcolumn": 13, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 11, "endline": 59, "endcolumn": 14, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 11, "endline": 59, "endcolumn": 14, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 19, "endline": 59, "endcolumn": 19, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 11, "endline": 59, "endcolumn": 19, "stmt": [59,5,59,20] },
    { "module": "list", "line": 59, "column": 5, "endline": 59, "endcolumn": 9, "stmt": [59,5,59,20] },
    { "module": "list", "line": 60, "column": 9, "endline": 60, "endcolumn": 14, "stmt": [60,9,60,14] },
    { "module": "list", "line": 60, "column": 9, "endline": 60, "endcolumn": 14, "stmt": [60,9,60,14] },
    { "module": "list", "line": 60, "column": 14, "endline": 60, "endcolumn": 14, "stmt": [60,9,60,14] },
    { "module": "list", "line": 60, "column": 9, "endline": 60, "endcolumn": 14, "stmt": [60,9,60,14] },
    { "module": "list", "line": 60, "column": 9, "endline": 60, "endcolumn": 12, "stmt": [60,9,60,14] },
    { "module": "list", "line": 59, "column": 5, "endline": 59, "endcolumn": 20, "stmt": [59,5,59,20] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 26, "stmt": [57,1,57,26] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 26, "stmt": [57,1,57,26] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 26, "stmt": [57,1,57,26] },
    { "module": "list", "line": 57, "column": 1, "endline": 57, "endcolumn": 26, "stmt": [57,1,57,26] },
    { "module": "list", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,41] },
    { "module": "list", "line": 63, "column": 1, "endline": 63, "endcolumn": 41, "stmt": [63,1,63,41] },
    { "module": "list", "line": 64, "column": 19, "endline": 64, "endcolumn": 24, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 19, "endline": 64, "endcolumn": 24, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 15, "endline": 64, "endcolumn": 25, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 34, "endline": 64, "endcolumn": 34, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 30, "endline": 64, "endcolumn": 35, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 15, "endline": 64, "endcolumn": 35, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 14, "endline": 64, "endcolumn": 97, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 75, "endline": 64, "endcolumn": 75, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 84, "endline": 64, "endcolumn": 89, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 80, "endline": 64, "endcolumn": 90, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 94, "endline": 64, "endcolumn": 94, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 80, "endline": 64, "endcolumn": 94, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 75, "endline": 64, "endcolumn": 94, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 46, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 46, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 46, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 46, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 48, "endline": 64, "endcolumn": 48, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 49, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 49, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 54, "endline": 64, "endcolumn": 59, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 61, "endline": 64, "endcolumn": 61, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 61, "endline": 64, "endcolumn": 61, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 54, "endline": 64, "endcolumn": 62, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 54, "endline": 64, "endcolumn": 62, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 62, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 96, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 46, "endline": 64, "endcolumn": 96, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 42, "endline": 64, "endcolumn": 97, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 38, "endline": 64, "endcolumn": 40, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 14, "endline": 64, "endcolumn": 97, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 14, "endline": 64, "endcolumn": 97, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 14, "endline": 64, "endcolumn": 97, "stmt": [64,5,64,97] },
    { "module": "list", "line": 64, "column": 5, "endline": 64, "endcolumn": 12, "stmt": [64,5,64,97] },
    { "module": "list", "line": 63, "column": 1, "endline": 63, "endcolumn": 41, "stmt": [63,1,63,41] },
    { "module": "list", "line": 67, "column": 1, "endline": 67, "endcolumn": 3, "stmt": [67,1,67,34] },
    { "module": "list", "line": 67, "column": 1, "endline": 67, "endcolumn": 34, "stmt": [67,1,67,34] },
    { "module": "list", "line": 68, "column": 14, "endline": 68, "endcolumn": 14, "stmt": [68,5,68,14] },
    { "module": "list", "line": 68, "column": 14, "endline": 68, "endcolumn": 14, "stmt": [68,5,68,14] },
    { "module": "list", "line": 68, "column": 14, "endline": 68, "endcolumn": 14, "stmt": [68,5,68,14] },
    { "module": "list", "line": 68, "column": 5, "endline": 68, "endcolumn": 12, "stmt": [68,5,68,14] },
    { "module": "list", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,5,69,14] },
    { "module": "list", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,5,69,14] },
    { "module": "list", "line": 69, "column": 5, "endline": 69, "endcolumn": 7, "stmt": [69,5,69,14] },
    { "module": "list", "line": 69, "column": 5, "endline": 69, "endcolumn": 7, "stmt": [69,5,69,14] },
    { "module": "list", "line": 69, "column": 5, "endline": 69, "endcolumn": 7, "stmt": [69,5,69,14] },
    { "module": "list", "line": 70, "column": 18, "endline": 70, "endcolumn": 18, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 20, "endline": 70, "endcolumn": 28, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 20, "endline": 70, "endcolumn": 25, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 20, "endline": 70, "endcolumn": 25, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 20, "endline": 70, "endcolumn": 28, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 28, "endline": 70, "endcolumn": 28, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 28, "endline": 70, "endcolumn": 28, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 20, "endline": 70, "endcolumn": 28, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 18, "endline": 70, "endcolumn": 29, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 18, "endline": 70, "endcolumn": 29, "stmt": [70,9,70,29] },
    { "module": "list", "line": 70, "column": 9, "endline": 70, "endcolumn": 16, "stmt": [70,9,70,29] },
    { "module": "list", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,5,69,14] },
    { "module": "list", "line": 67, "column": 1, "endline": 67, "endcolumn": 34, "stmt": [67,1,67,34] },
    { "module": "list", "line": 67, "column": 1, "endline": 67, "endcolumn": 34, "stmt": [67,1,67,34] },
    { "module": "list", "line": 67, "column": 1, "endline": 67, "endcolumn": 34, "stmt": [67,1,67,34] },
    { "module": "list", "line": 73, "column": 1, "endline": 73, "endcolumn": 3, "stmt": [73,1,73,34] },
    { "module": "list", "line": 73, "column": 1, "endline": 73, "endcolumn": 34, "stmt": [73,1,73,34] },
    { "module": "list", "line": 74, "column": 23, "endline": 74, "endcolumn": 23, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 23, "endline": 74, "endcolumn": 23, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 19, "endline": 74, "endcolumn": 23, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 28, "endline": 74, "endcolumn": 28, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 19, "endline": 74, "endcolumn": 28, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 14, "endline": 74, "endcolumn": 63, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 14, "endline": 74, "endcolumn": 14, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 14, "endline": 74, "endcolumn": 14, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 14, "endline": 74, "endcolumn": 14, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 14, "endline": 74, "endcolumn": 14, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 16, "endline": 74, "endcolumn": 17, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 35, "endline": 74, "endcolumn": 35, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 62, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 37, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 39, "endline": 74, "endcolumn": 39, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 40, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 40, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 62, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 49, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 54, "endline": 74, "endcolumn": 54, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 54, "endline": 74, "endcolumn": 54, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 49, "endline": 74, "endcolumn": 55, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 49, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 58, "endline": 74, "endcolumn": 58, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 58, "endline": 74, "endcolumn": 58, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 49, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 61, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 61, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 49, "endline": 74, "endcolumn": 61, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 43, "endline": 74, "endcolumn": 62, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 37, "endline": 74, "endcolumn": 62, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 35, "endline": 74, "endcolumn": 63, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 35, "endline": 74, "endcolumn": 63, "stmt": [74,5,74,63] },
    { "module": "list", "line": 74, "column": 5, "endline": 74, "endcolumn": 12, "stmt": [74,5,74,63] },
    { "module": "list", "line": 73, "column": 1, "endline": 73, "endcolumn": 34, "stmt": [73,1,73,34] },
    { "module": "list", "line": 77, "column": 1, "endline": 77, "endcolumn": 3, "stmt": [77,1,77,35] },
    { "module": "list", "line": 77, "column": 1, "endline": 77, "endcolumn": 35, "stmt": [77,1,77,35] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 20, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 20, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 23, "endline": 78, "endcolumn": 23, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 23, "endline": 78, "endcolumn": 23, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 26, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 26, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 20, "endline": 78, "endcolumn": 26, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 14, "endline": 78, "endcolumn": 27, "stmt": [78,5,78,27] },
    { "module": "list", "line": 78, "column": 5, "endline": 78, "endcolumn": 12, "stmt": [78,5,78,27] },
    { "module": "list", "line": 77, "column": 1, "endline": 77, "endcolumn": 35, "stmt": [77,1,77,35] },
    { "module": "list", "line": 81, "column": 1, "endline": 81, "endcolumn": 3, "stmt": [81,1,81,29] },
    { "module": "list", "line": 81, "column": 1, "endline": 81, "endcolumn": 29, "stmt": [81,1,81,29] },
    { "module": "list", "line": 82, "column": 12, "endline": 82, "endcolumn": 13, "stmt": [82,5,82,13] },
    { "module": "list", "line": 82, "column": 5, "endline": 82, "endcolumn": 10, "stmt": [82,5,82,13] },
    { "module": "list", "line": 83, "column": 13, "endline": 83, "endcolumn": 13, "stmt": [83,5,83,13] },
    { "module": "list", "line": 83, "column": 13, "endline": 83, "endcolumn": 13, "stmt": [83,5,83,13] },
    { "module": "list", "line": 83, "column": 5, "endline": 83, "endcolumn": 13, "stmt": [83,5,83,13] },
    { "module": "list", "line": 84, "column": 11, "endline": 84, "endcolumn": 11, "stmt": [84,5,84,18] },
    { "module": "list", "line": 84, "column": 16, "endline": 84, "endcolumn": 17, "stmt": [84,5,84,18] },
    { "module": "list", "line": 84, "column": 11, "endline": 84, "endcolumn": 17, "stmt": [84,5,84,18] },
    { "module": "list", "line": 84, "column": 5, "endline": 84, "endcolumn": 9, "stmt": [84,5,84,18] },
    { "module": "list", "line": 85, "column": 24, "endline": 85, "endcolumn": 24, "stmt": [85,9,85,24] },
    { "module": "list", "line": 85, "column": 17, "endline": 85, "endcolumn": 24, "stmt": [85,9,85,24] },
    { "module": "list", "line": 85, "column": 9, "endline": 85, "endcolumn": 15, "stmt": [85,9,85,24] },
    { "module": "list", "line": 86, "column": 13, "endline": 86, "endcolumn": 26, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 13, "endline": 86, "endcolumn": 26, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 23, "endline": 86, "endcolumn": 24, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 23, "endline": 86, "endcolumn": 23, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 23, "endline": 86, "endcolumn": 24, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 13, "endline": 86, "endcolumn": 26, "stmt": [86,13,86,26] },
    { "module": "list", "line": 86, "column": 13, "endline": 86, "endcolumn": 19, "stmt": [86,13,86,26] },
    { "module": "list", "line": 87, "column": 13, "endline": 87, "endcolumn": 22, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 13, "endline": 87, "endcolumn": 22, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 20, "endline": 87, "endcolumn": 20, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 20, "endline": 87, "endcolumn": 20, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 20, "endline": 87, "endcolumn": 20, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 20, "endline": 87, "endcolumn": 20, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 13, "endline": 87, "endcolumn": 22, "stmt": [87,13,87,22] },
    { "module": "list", "line": 87, "column": 13, "endline": 87, "endcolumn": 16, "stmt": [87,13,87,22] },
    { "module": "list", "line": 84, "column": 5, "endline": 84, "endcolumn": 18, "stmt": [84,5,84,18] },
    { "module": "list", "line": 81, "column": 1, "endline": 81, "endcolumn": 29, "stmt": [81,1,81,29] },
    { "module": "list", "line": 81, "column": 1, "endline": 81, "endcolumn": 29, "stmt": [81,1,81,29] },
    { "module": "list", "line": 81, "column": 1, "endline": 81, "endcolumn": 29, "stmt": [81,1,81,29] },
    { "module": "list", "line": 90, "column": 1, "endline": 90, "endcolumn": 3, "stmt": [90,1,90,30] },
    { "module": "list", "line": 90, "column": 1, "endline": 90, "endcolumn": 30, "stmt": [90,1,90,30] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 22, "endline": 91, "endcolumn": 22, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 22, "endline": 91, "endcolumn": 22, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 30, "endline": 91, "endcolumn": 33, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 35, "endline": 91, "endcolumn": 35, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 30, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 30, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 11, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 36, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 11, "endline": 91, "endcolumn": 36, "stmt": [91,5,91,38] },
    { "module": "list", "line": 91, "column": 5, "endline": 91, "endcolumn": 7, "stmt": [91,5,91,38] },
    { "module": "list", "line": 90, "column": 1, "endline": 90, "endcolumn": 30, "stmt": [90,1,90,30] },
    { "module": "list", "line": 90, "column": 1, "endline": 90, "endcolumn": 30, "stmt": [90,1,90,30] },
    { "module": "list", "line": 94, "column": 1, "endline": 94, "endcolumn": 3, "stmt": [94,1,94,24] },
    { "module": "list", "line": 94, "column": 1, "endline": 94, "endcolumn": 24, "stmt": [94,1,94,24] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 25, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 25, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 11, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 11, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 11, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 11, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 13, "endline": 95, "endcolumn": 13, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 13, "endline": 95, "endcolumn": 13, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 14, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 14, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 25, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 11, "endline": 95, "endcolumn": 25, "stmt": [95,5,95,27] },
    { "module": "list", "line": 95, "column": 5, "endline": 95, "endcolumn": 7, "stmt": [95,5,95,27] },
    { "module": "list", "line": 94, "column": 1, "endline": 94, "endcolumn": 24, "stmt": [94,1,94,24] },
    { "module": "list", "line": 94, "column": 1, "endline": 94, "endcolumn": 24, "stmt": [94,1,94,24] },
    { "module": "bag", "line": 1, "column": 1, "endline": 1, "endcolumn": 3, "stmt": [1,1,1,23] },
    { "module": "bag", "line": 1, "column": 1, "endline": 1, "endcolumn": 23, "stmt": [1,1,1,23] },
    { "module": "bag", "line": 2, "column": 10, "endline": 2, "endcolumn": 12, "stmt": [2,5,2,12] },
    { "module": "bag", "line": 2, "column": 5, "endline": 2, "endcolumn": 8, "stmt": [2,5,2,12] },
    { "module": "bag", "line": 1, "column": 1, "endline": 1, "endcolumn": 23, "stmt": [1,1,1,23] },
    { "module": "bag", "line": 1, "column": 1, "endline": 1, "endcolumn": 23, "stmt": [1,1,1,23] },
    { "module": "bag", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,26] },
    { "module": "bag", "line": 4, "column": 1, "endline": 4, "endcolumn": 26, "stmt": [4,1,4,26] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 16, "endline": 5, "endcolumn": 16, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 5, "column": 5, "endline": 5, "endcolumn": 8, "stmt": [5,5,5,31] },
    { "module": "bag", "line": 4, "column": 1, "endline": 4, "endcolumn": 26, "stmt": [4,1,4,26] },
    { "module": "bag", "line": 4, "column": 1, "endline": 4, "endcolumn": 26, "stmt": [4,1,4,26] },
    { "module": "bag", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,27] },
    { "module": "bag", "line": 7, "column": 1, "endline": 7, "endcolumn": 27, "stmt": [7,1,7,27] },
    { "module": "bag", "line": 8, "column": 10, "endline": 8, "endcolumn": 12, "stmt": [8,5,8,12] },
    { "module": "bag", "line": 8, "column": 5, "endline": 8, "endcolumn": 8, "stmt": [8,5,8,12] },
    { "module": "bag", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 10, "column": 12, "endline": 10, "endcolumn": 12, "stmt": [10,9,10,19] },
    { "module": "bag", "line": 10, "column": 17, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,19] },
    { "module": "bag", "line": 10, "column": 12, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,19] },
    { "module": "bag", "line": 10, "column": 9, "endline": 10, "endcolumn": 10, "stmt": [10,9,10,19] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 14, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 17, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 22, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 11, "column": 13, "endline": 11, "endcolumn": 20, "stmt": [11,13,11,22] },
    { "module": "bag", "line": 10, "column": 9, "endline": 10, "endcolumn": 19, "stmt": [10,9,10,19] },
    { "module": "bag", "line": 13, "column": 13, "endline": 13, "endcolumn": 14, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 13, "column": 13, "endline": 13, "endcolumn": 17, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 13, "column": 21, "endline": 13, "endcolumn": 21, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 13, "column": 13, "endline": 13, "endcolumn": 19, "stmt": [13,13,13,21] },
    { "module": "bag", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bag", "line": 7, "column": 1, "endline": 7, "endcolumn": 27, "stmt": [7,1,7,27] },
    { "module": "bag", "line": 7, "column": 1, "endline": 7, "endcolumn": 27, "stmt": [7,1,7,27] },
    { "module": "bag", "line": 7, "column": 1, "endline": 7, "endcolumn": 27, "stmt": [7,1,7,27] },
    { "module": "bag", "line": 15, "column": 9, "endline": 15, "endcolumn": 20, "stmt": [15,1,15,39] },
    { "module": "bag", "line": 15, "column": 1, "endline": 15, "endcolumn": 39, "stmt": [15,1,15,39] },
    { "module": "bag", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,40] },
    { "module": "bag", "line": 16, "column": 1, "endline": 16, "endcolumn": 40, "stmt": [16,1,16,40] },
    { "module": "bag", "line": 17, "column": 8, "endline": 17, "endcolumn": 10, "stmt": [17,5,17,17] },
    { "module": "bag", "line": 17, "column": 15, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,17] },
    { "module": "bag", "line": 17, "column": 8, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,17] },
    { "module": "bag", "line": 17, "column": 5, "endline": 17, "endcolumn": 6, "stmt": [17,5,17,17] },
    { "module": "bag", "line": 18, "column": 17, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 17, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 20, "endline": 18, "endcolumn": 22, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 20, "endline": 18, "endcolumn": 22, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 17, "endline": 18, "endcolumn": 23, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 17, "endline": 18, "endcolumn": 23, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 18, "column": 9, "endline": 18, "endcolumn": 15, "stmt": [18,9,18,23] },
    { "module": "bag", "line": 17, "column": 5, "endline": 17, "endcolumn": 17, "stmt": [17,5,17,17] },
    { "module": "bag", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bag", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bag", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bag", "line": 20, "column": 9, "endline": 20, "endcolumn": 15, "stmt": [20,9,20,17] },
    { "module": "bag", "line": 16, "column": 1, "endline": 16, "endcolumn": 40, "stmt": [16,1,16,40] },
    { "module": "bag", "line": 16, "column": 1, "endline": 16, "endcolumn": 40, "stmt": [16,1,16,40] },
    { "module": "bag", "line": 22, "column": 9, "endline": 22, "endcolumn": 12, "stmt": [22,1,22,23] },
    { "module": "bag", "line": 22, "column": 1, "endline": 22, "endcolumn": 23, "stmt": [22,1,22,23] },
    { "module": "bag", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,27] },
    { "module": "bag", "line": 23, "column": 1, "endline": 23, "endcolumn": 27, "stmt": [23,1,23,27] },
    { "module": "bag", "line": 24, "column": 13, "endline": 24, "endcolumn": 13, "stmt": [24,5,24,13] },
    { "module": "bag", "line": 24, "column": 5, "endline": 24, "endcolumn": 11, "stmt": [24,5,24,13] },
    { "module": "bag", "line": 25, "column": 16, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 25, "column": 16, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 26, "column": 18, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 26, "column": 18, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 26, "column": 9, "endline": 26, "endcolumn": 16, "stmt": [26,9,26,18] },
    { "module": "bag", "line": 25, "column": 17, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bag", "line": 23, "column": 1, "endline": 23, "endcolumn": 27, "stmt": [23,1,23,27] },
    { "module": "bag", "line": 23, "column": 1, "endline": 23, "endcolumn": 27, "stmt": [23,1,23,27] },
    { "module": "bag", "line": 23, "column": 1, "endline": 23, "endcolumn": 27, "stmt": [23,1,23,27] },
    { "module": "bag", "line": 28, "column": 9, "endline": 28, "endcolumn": 12, "stmt": [28,1,28,23] },
    { "module": "bag", "line": 28, "column": 1, "endline": 28, "endcolumn": 23, "stmt": [28,1,28,23] },
    { "module": "bag", "line": 29, "column": 1, "endline": 29, "endcolumn": 3, "stmt": [29,1,29,27] },
    { "module": "bag", "line": 29, "column": 1, "endline": 29, "endcolumn": 27, "stmt": [29,1,29,27] },
    { "module": "bag", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 12, "endline": 30, "endcolumn": 13, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 18, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 12, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 5, "endline": 30, "endcolumn": 10, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bag", "line": 31, "column": 22, "endline": 31, "endcolumn": 23, "stmt": [31,5,31,25] },
    { "module": "bag", "line": 31, "column": 22, "endline": 31, "endcolumn": 23, "stmt": [31,5,31,25] },
    { "module": "bag", "line": 31, "column": 17, "endline": 31, "endcolumn": 24, "stmt": [31,5,31,25] },
    { "module": "bag", "line": 31, "column": 13, "endline": 31, "endcolumn": 25, "stmt": [31,5,31,25] },
    { "module": "bag", "line": 31, "column": 5, "endline": 31, "endcolumn": 11, "stmt": [31,5,31,25] },
    { "module": "bag", "line": 29, "column": 1, "endline": 29, "endcolumn": 27, "stmt": [29,1,29,27] },
    { "module": "bag", "line": 29, "column": 1, "endline": 29, "endcolumn": 27, "stmt": [29,1,29,27] },
    { "module": "bag", "line": 33, "column": 9, "endline": 33, "endcolumn": 12, "stmt": [33,1,33,23] },
    { "module": "bag", "line": 33, "column": 1, "endline": 33, "endcolumn": 23, "stmt": [33,1,33,23] },
    { "module": "bag", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,27] },
    { "module": "bag", "line": 34, "column": 1, "endline": 34, "endcolumn": 27, "stmt": [34,1,34,27] },
    { "module": "bag", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 12, "endline": 35, "endcolumn": 13, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 18, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 12, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 5, "endline": 35, "endcolumn": 10, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bag", "line": 36, "column": 22, "endline": 36, "endcolumn": 23, "stmt": [36,5,36,25] },
    { "module": "bag", "line": 36, "column": 22, "endline": 36, "endcolumn": 23, "stmt": [36,5,36,25] },
    { "module": "bag", "line": 36, "column": 17, "endline": 36, "endcolumn": 24, "stmt": [36,5,36,25] },
    { "module": "bag", "line": 36, "column": 13, "endline": 36, "endcolumn": 25, "stmt": [36,5,36,25] },
    { "module": "bag", "line": 36, "column": 5, "endline": 36, "endcolumn": 11, "stmt": [36,5,36,25] },
    { "module": "bag", "line": 34, "column": 1, "endline": 34, "endcolumn": 27, "stmt": [34,1,34,27] },
    { "module": "bag", "line": 34, "column": 1, "endline": 34, "endcolumn": 27, "stmt": [34,1,34,27] },
    { "module": "bag", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,28] },
    { "module": "bag", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "bag", "line": 39, "column": 23, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,26] },
    { "module": "bag", "line": 39, "column": 23, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,26] },
    { "module": "bag", "line": 39, "column": 18, "endline": 39, "endcolumn": 25, "stmt": [39,5,39,26] },
    { "module": "bag", "line": 39, "column": 11, "endline": 39, "endcolumn": 26, "stmt": [39,5,39,26] },
    { "module": "bag", "line": 39, "column": 5, "endline": 39, "endcolumn": 9, "stmt": [39,5,39,26] },
    { "module": "bag", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "bag", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "bag", "line": 41, "column": 9, "endline": 41, "endcolumn": 11, "stmt": [41,1,41,21] },
    { "module": "bag", "line": 41, "column": 1, "endline": 41, "endcolumn": 21, "stmt": [41,1,41,21] },
    { "module": "bag", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,32] },
    { "module": "bag", "line": 42, "column": 1, "endline": 42, "endcolumn": 32, "stmt": [42,1,42,32] },
    { "module": "bag", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bag", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bag", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bag", "line": 43, "column": 5, "endline": 43, "endcolumn": 12, "stmt": [43,5,43,15] },
    { "module": "bag", "line": 44, "column": 8, "endline": 44, "endcolumn": 10, "stmt": [44,5,44,21] },
    { "module": "bag", "line": 44, "column": 15, "endline": 44, "endcolumn": 20, "stmt": [44,5,44,21] },
    { "module": "bag", "line": 44, "column": 8, "endline": 44, "endcolumn": 20, "stmt": [44,5,44,21] },
    { "module": "bag", "line": 44, "column": 5, "endline": 44, "endcolumn": 6, "stmt": [44,5,44,21] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 14, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 16, "endline": 45, "endcolumn": 18, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 16, "endline": 45, "endcolumn": 18, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 19, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 24, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 45, "column": 9, "endline": 45, "endcolumn": 22, "stmt": [45,9,45,24] },
    { "module": "bag", "line": 44, "column": 5, "endline": 44, "endcolumn": 21, "stmt": [44,5,44,21] },
    { "module": "bag", "line": 47, "column": 9, "endline": 47, "endcolumn": 14, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 47, "column": 16, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 47, "column": 16, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 47, "column": 9, "endline": 47, "endcolumn": 19, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 47, "column": 23, "endline": 47, "endcolumn": 23, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 47, "column": 9, "endline": 47, "endcolumn": 21, "stmt": [47,9,47,23] },
    { "module": "bag", "line": 42, "column": 1, "endline": 42, "endcolumn": 32, "stmt": [42,1,42,32] },
    { "module": "bag", "line": 49, "column": 9, "endline": 49, "endcolumn": 14, "stmt": [49,1,49,27] },
    { "module": "bag", "line": 49, "column": 1, "endline": 49, "endcolumn": 27, "stmt": [49,1,49,27] },
    { "module": "bag", "line": 50, "column": 1, "endline": 50, "endcolumn": 3, "stmt": [50,1,50,35] },
    { "module": "bag", "line": 50, "column": 1, "endline": 50, "endcolumn": 35, "stmt": [50,1,50,35] },
    { "module": "bag", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bag", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bag", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bag", "line": 51, "column": 5, "endline": 51, "endcolumn": 12, "stmt": [51,5,51,15] },
    { "module": "bag", "line": 52, "column": 8, "endline": 52, "endcolumn": 10, "stmt": [52,5,52,21] },
    { "module": "bag", "line": 52, "column": 15, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "bag", "line": 52, "column": 8, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "bag", "line": 52, "column": 5, "endline": 52, "endcolumn": 6, "stmt": [52,5,52,21] },
    { "module": "bag", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 16, "endline": 53, "endcolumn": 21, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 23, "endline": 53, "endcolumn": 25, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 16, "endline": 53, "endcolumn": 26, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 16, "endline": 53, "endcolumn": 26, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 30, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 16, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 9, "endline": 53, "endcolumn": 14, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 14, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 16, "endline": 54, "endcolumn": 18, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 19, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 54, "column": 9, "endline": 54, "endcolumn": 22, "stmt": [54,9,54,24] },
    { "module": "bag", "line": 55, "column": 12, "endline": 55, "endcolumn": 17, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 19, "endline": 55, "endcolumn": 21, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 12, "endline": 55, "endcolumn": 22, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 12, "endline": 55, "endcolumn": 22, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 27, "endline": 55, "endcolumn": 27, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 12, "endline": 55, "endcolumn": 27, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 55, "column": 9, "endline": 55, "endcolumn": 10, "stmt": [55,9,55,28] },
    { "module": "bag", "line": 56, "column": 17, "endline": 56, "endcolumn": 22, "stmt": [56,13,56,27] },
    { "module": "bag", "line": 56, "column": 24, "endline": 56, "endcolumn": 26, "stmt": [56,13,56,27] },
    { "module": "bag", "line": 56, "column": 24, "endline": 56, "endcolumn": 26, "stmt": [56,13,56,27] },
    { "module": "bag", "line": 56, "column": 17, "endline": 56, "endcolumn": 27, "stmt": [56,13,56,27] },
    { "module": "bag", "line": 56, "column": 13, "endline": 56, "endcolumn": 27, "stmt": [56,13,56,27] },
    { "module": "bag", "line": 50, "column": 1, "endline": 50, "endcolumn": 35, "stmt": [50,1,50,35] },
    { "module": "bag", "line": 50, "column": 1, "endline": 50, "endcolumn": 35, "stmt": [50,1,50,35] },
    { "module": "bag", "line": 59, "column": 1, "endline": 59, "endcolumn": 3, "stmt": [59,1,59,39] },
    { "module": "bag", "line": 59, "column": 1, "endline": 59, "endcolumn": 39, "stmt": [59,1,59,39] },
    { "module": "bag", "line": 60, "column": 8, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 60, "column": 8, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 60, "column": 8, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 60, "column": 5, "endline": 60, "endcolumn": 6, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 61, "column": 9, "endline": 61, "endcolumn": 16, "stmt": [61,9,61,24] },
    { "module": "bag", "line": 60, "column": 5, "endline": 60, "endcolumn": 14, "stmt": [60,5,60,14] },
    { "module": "bag", "line": 63, "column": 22, "endline": 63, "endcolumn": 23, "stmt": [63,9,63,24] },
    { "module": "bag", "line": 63, "column": 17, "endline": 63, "endcolumn": 24, "stmt": [63,9,63,24] },
    { "module": "bag", "line": 63, "column": 9, "endline": 63, "endcolumn": 15, "stmt": [63,9,63,24] },
    { "module": "bag", "line": 64, "column": 16, "endline": 64, "endcolumn": 16, "stmt": [64,13,64,21] },
    { "module": "bag", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,21] },
    { "module": "bag", "line": 64, "column": 16, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,21] },
    { "module": "bag", "line": 64, "column": 13, "endline": 64, "endcolumn": 14, "stmt": [64,13,64,21] },
    { "module": "bag", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bag", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bag", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bag", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bag", "line": 65, "column": 17, "endline": 65, "endcolumn": 24, "stmt": [65,17,65,27] },
    { "module": "bag", "line": 64, "column": 13, "endline": 64, "endcolumn": 21, "stmt": [64,13,64,21] },
    { "module": "bag", "line": 66, "column": 18, "endline": 66, "endcolumn": 18, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 66, "column": 23, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 66, "column": 23, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 66, "column": 18, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 66, "column": 13, "endline": 66, "endcolumn": 16, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 67, "column": 17, "endline": 67, "endcolumn": 24, "stmt": [67,17,67,31] },
    { "module": "bag", "line": 66, "column": 13, "endline": 66, "endcolumn": 24, "stmt": [66,13,66,24] },
    { "module": "bag", "line": 69, "column": 31, "endline": 69, "endcolumn": 32, "stmt": [69,17,69,33] },
    { "module": "bag", "line": 69, "column": 26, "endline": 69, "endcolumn": 33, "stmt": [69,17,69,33] },
    { "module": "bag", "line": 69, "column": 17, "endline": 69, "endcolumn": 24, "stmt": [69,17,69,33] },
    { "module": "bag", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 51, "endline": 69, "endcolumn": 52, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 51, "endline": 69, "endcolumn": 52, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 55, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 44, "endline": 69, "endcolumn": 57, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 69, "column": 35, "endline": 69, "endcolumn": 42, "stmt": [69,35,69,57] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 65, "endline": 70, "endcolumn": 66, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 69, "endline": 70, "endcolumn": 69, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 73, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 69, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 52, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 36, "endline": 70, "endcolumn": 36, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 36, "endline": 70, "endcolumn": 36, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 39, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 41, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 74, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 48, "endline": 71, "endcolumn": 49, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 48, "endline": 71, "endcolumn": 49, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 52, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 52, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 71, "column": 35, "endline": 71, "endcolumn": 53, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 30, "endline": 71, "endcolumn": 53, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 70, "column": 21, "endline": 70, "endcolumn": 28, "stmt": [70,21,71,53] },
    { "module": "bag", "line": 59, "column": 1, "endline": 59, "endcolumn": 39, "stmt": [59,1,59,39] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 35, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 27, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 27, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 26, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 24, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 35, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 35, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,23] },
    { "module": "synch", "line": 7, "column": 1, "endline": 7, "endcolumn": 23, "stmt": [7,1,7,23] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 17, "endline": 8, "endcolumn": 17, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 17, "endline": 8, "endcolumn": 17, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 21, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 21, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 19, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 7, "column": 1, "endline": 7, "endcolumn": 23, "stmt": [7,1,7,23] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 3, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 29, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 11, "column": 5, "endline": 11, "endcolumn": 15, "stmt": [11,5,11,15] },
    { "module": "synch", "line": 12, "column": 21, "endline": 12, "endcolumn": 22, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 12, "column": 20, "endline": 12, "endcolumn": 22, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 12, "column": 9, "endline": 12, "endcolumn": 18, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 13, "column": 10, "endline": 13, "endcolumn": 11, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 10, "endline": 13, "endcolumn": 11, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 15, "endline": 13, "endcolumn": 18, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 9, "endline": 13, "endcolumn": 13, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 11, "column": 5, "endline": 11, "endcolumn": 15, "stmt": [11,5,11,15] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 29, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 29, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 3, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 37, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 17, "column": 20, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 19, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 25, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 25, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 19, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 9, "endline": 17, "endcolumn": 17, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 18, "column": 12, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,19] },
    { "module": "synch", "line": 18, "column": 9, "endline": 18, "endcolumn": 10, "stmt": [18,9,18,19] },
    { "module": "synch", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 18, "endline": 19, "endcolumn": 20, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 18, "endline": 19, "endcolumn": 20, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 13, "endline": 19, "endcolumn": 16, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 37, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 37, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 3, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 34, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 12, "endline": 22, "endcolumn": 18, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 29, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 32, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 12, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 10, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 23, "column": 12, "endline": 23, "endcolumn": 18, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 23, "column": 12, "endline": 23, "endcolumn": 18, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 23, "column": 5, "endline": 23, "endcolumn": 10, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 34, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 34, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 25, "column": 1, "endline": 25, "endcolumn": 3, "stmt": [25,1,25,26] },
    { "module": "synch", "line": 25, "column": 1, "endline": 25, "endcolumn": 26, "stmt": [25,1,25,26] },
    { "module": "synch", "line": 26, "column": 22, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,27] },
    { "module": "synch", "line": 26, "column": 22, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,27] },
    { "module": "synch", "line": 26, "column": 14, "endline": 26, "endcolumn": 27, "stmt": [26,5,26,27] },
    { "module": "synch", "line": 26, "column": 5, "endline": 26, "endcolumn": 12, "stmt": [26,5,26,27] },
    { "module": "synch", "line": 25, "column": 1, "endline": 25, "endcolumn": 26, "stmt": [25,1,25,26] },
    { "module": "synch", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,37] },
    { "module": "synch", "line": 28, "column": 1, "endline": 28, "endcolumn": 37, "stmt": [28,1,28,37] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,21] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,21] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,21] },
    { "module": "synch", "line": 29, "column": 14, "endline": 29, "endcolumn": 21, "stmt": [29,5,29,21] },
    { "module": "synch", "line": 29, "column": 5, "endline": 29, "endcolumn": 12, "stmt": [29,5,29,21] },
    { "module": "synch", "line": 28, "column": 1, "endline": 28, "endcolumn": 37, "stmt": [28,1,28,37] },
    { "module": "synch", "line": 31, "column": 1, "endline": 31, "endcolumn": 3, "stmt": [31,1,31,33] },
    { "module": "synch", "line": 31, "column": 1, "endline": 31, "endcolumn": 33, "stmt": [31,1,31,33] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "synch", "line": 32, "column": 14, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "synch", "line": 32, "column": 5, "endline": 32, "endcolumn": 12, "stmt": [32,5,32,21] },
    { "module": "synch", "line": 31, "column": 1, "endline": 31, "endcolumn": 33, "stmt": [31,1,31,33] },
    { "module": "synch", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,21] },
    { "module": "synch", "line": 34, "column": 1, "endline": 34, "endcolumn": 21, "stmt": [34,1,34,21] },
    { "module": "synch", "line": 35, "column": 16, "endline": 37, "endcolumn": 6, "stmt": [35,16,37,6] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,16,37,6] },
    { "module": "synch", "line": 35, "column": 26, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 25, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 21, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 32, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 32, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 36, "column": 10, "endline": 36, "endcolumn": 16, "stmt": [36,9,36,23] },
    { "module": "synch", "line": 36, "column": 10, "endline": 36, "endcolumn": 16, "stmt": [36,9,36,23] },
    { "module": "synch", "line": 36, "column": 20, "endline": 36, "endcolumn": 23, "stmt": [36,9,36,23] },
    { "module": "synch", "line": 36, "column": 9, "endline": 36, "endcolumn": 18, "stmt": [36,9,36,23] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 32, "stmt": [35,16,35,32] },
    { "module": "synch", "line": 34, "column": 1, "endline": 34, "endcolumn": 21, "stmt": [34,1,34,21] },
    { "module": "synch", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,21] },
    { "module": "synch", "line": 38, "column": 1, "endline": 38, "endcolumn": 21, "stmt": [38,1,38,21] },
    { "module": "synch", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 17, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 16, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 14, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 23, "stmt": [40,9,40,23] },
    { "module": "synch", "line": 41, "column": 10, "endline": 41, "endcolumn": 16, "stmt": [41,9,41,24] },
    { "module": "synch", "line": 41, "column": 10, "endline": 41, "endcolumn": 16, "stmt": [41,9,41,24] },
    { "module": "synch", "line": 41, "column": 20, "endline": 41, "endcolumn": 24, "stmt": [41,9,41,24] },
    { "module": "synch", "line": 41, "column": 9, "endline": 41, "endcolumn": 18, "stmt": [41,9,41,24] },
    { "module": "synch", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15] },
    { "module": "synch", "line": 38, "column": 1, "endline": 38, "endcolumn": 21, "stmt": [38,1,38,21] },
    { "module": "synch", "line": 43, "column": 1, "endline": 43, "endcolumn": 3, "stmt": [43,1,43,31] },
    { "module": "synch", "line": 43, "column": 1, "endline": 43, "endcolumn": 31, "stmt": [43,1,43,31] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 22, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 22, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 44, "column": 23, "endline": 44, "endcolumn": 24, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 24, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 24, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 44, "column": 5, "endline": 44, "endcolumn": 12, "stmt": [44,5,44,24] },
    { "module": "synch", "line": 43, "column": 1, "endline": 43, "endcolumn": 31, "stmt": [43,1,43,31] },
    { "module": "synch", "line": 46, "column": 1, "endline": 46, "endcolumn": 3, "stmt": [46,1,46,16] },
    { "module": "synch", "line": 46, "column": 1, "endline": 46, "endcolumn": 16, "stmt": [46,1,46,16] },
    { "module": "synch", "line": 47, "column": 15, "endline": 47, "endcolumn": 15, "stmt": [47,5,47,15] },
    { "module": "synch", "line": 47, "column": 5, "endline": 47, "endcolumn": 15, "stmt": [47,5,47,15] },
    { "module": "synch", "line": 48, "column": 23, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 23, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 19, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 19, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 5, "endline": 48, "endcolumn": 17, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 49, "column": 9, "endline": 49, "endcolumn": 19, "stmt": [49,9,49,19] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 34, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 36, "endline": 50, "endcolumn": 42, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 37, "endline": 50, "endcolumn": 37, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 36, "endline": 50, "endcolumn": 37, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 36, "endline": 50, "endcolumn": 42, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 40, "endline": 50, "endcolumn": 42, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 36, "endline": 50, "endcolumn": 42, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 50, "column": 13, "endline": 50, "endcolumn": 17, "stmt": [50,13,50,43] },
    { "module": "synch", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 24, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 26, "endline": 51, "endcolumn": 32, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 27, "endline": 51, "endcolumn": 27, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 26, "endline": 51, "endcolumn": 27, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 26, "endline": 51, "endcolumn": 32, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 30, "endline": 51, "endcolumn": 32, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 26, "endline": 51, "endcolumn": 32, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 51, "column": 13, "endline": 51, "endcolumn": 16, "stmt": [51,13,51,33] },
    { "module": "synch", "line": 52, "column": 14, "endline": 52, "endcolumn": 15, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 52, "column": 19, "endline": 52, "endcolumn": 23, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 52, "column": 13, "endline": 52, "endcolumn": 17, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 49, "column": 9, "endline": 49, "endcolumn": 19, "stmt": [49,9,49,19] },
    { "module": "synch", "line": 53, "column": 20, "endline": 55, "endcolumn": 6, "stmt": [53,20,55,6] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 20, "stmt": [53,20,55,6] },
    { "module": "synch", "line": 53, "column": 31, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 30, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 26, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 25, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 40, "endline": 53, "endcolumn": 55, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 58, "endline": 53, "endcolumn": 58, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 58, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 61, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 40, "endline": 53, "endcolumn": 64, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 40, "endline": 53, "endcolumn": 64, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 69, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 40, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 35, "endline": 53, "endcolumn": 37, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 25, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 72, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 72, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 72, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 72, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 72, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 54, "column": 14, "endline": 54, "endcolumn": 15, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 14, "endline": 54, "endcolumn": 15, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 19, "endline": 54, "endcolumn": 22, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 13, "endline": 54, "endcolumn": 17, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 72, "stmt": [53,20,53,72] },
    { "module": "synch", "line": 46, "column": 1, "endline": 46, "endcolumn": 16, "stmt": [46,1,46,16] },
    { "module": "synch", "line": 56, "column": 1, "endline": 56, "endcolumn": 3, "stmt": [56,1,56,14] },
    { "module": "synch", "line": 56, "column": 1, "endline": 56, "endcolumn": 14, "stmt": [56,1,56,14] },
    { "module": "synch", "line": 57, "column": 16, "endline": 59, "endcolumn": 6, "stmt": [57,16,59,6] },
    { "module": "synch", "line": 57, "column": 20, "endline": 57, "endcolumn": 20, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 19, "endline": 57, "endcolumn": 20, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 33, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 34, "endline": 57, "endcolumn": 35, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 35, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 35, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 19, "endline": 57, "endcolumn": 35, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 17, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 58, "column": 10, "endline": 58, "endcolumn": 10, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 23, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 25, "endline": 58, "endcolumn": 43, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 26, "endline": 58, "endcolumn": 26, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 25, "endline": 58, "endcolumn": 26, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 25, "endline": 58, "endcolumn": 43, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 29, "endline": 58, "endcolumn": 39, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 42, "endline": 58, "endcolumn": 42, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 42, "endline": 58, "endcolumn": 42, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 41, "endline": 58, "endcolumn": 42, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 29, "endline": 58, "endcolumn": 43, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 29, "endline": 58, "endcolumn": 43, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 25, "endline": 58, "endcolumn": 43, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 44, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 44, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 58, "column": 9, "endline": 58, "endcolumn": 12, "stmt": [58,9,58,44] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,36] },
    { "module": "synch", "line": 56, "column": 1, "endline": 56, "endcolumn": 14, "stmt": [56,1,56,14] },
    { "module": "synch", "line": 60, "column": 1, "endline": 60, "endcolumn": 3, "stmt": [60,1,60,17] },
    { "module": "synch", "line": 60, "column": 1, "endline": 60, "endcolumn": 17, "stmt": [60,1,60,17] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 31, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 17, "endline": 61, "endcolumn": 17, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 17, "endline": 61, "endcolumn": 17, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 29, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 30, "endline": 61, "endcolumn": 31, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 31, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 31, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 19, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 31, "stmt": [61,16,61,31] },
    { "module": "synch", "line": 60, "column": 1, "endline": 60, "endcolumn": 17, "stmt": [60,1,60,17] },
    { "module": "synch", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,34] },
    { "module": "synch", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "synch", "line": 64, "column": 14, "endline": 64, "endcolumn": 16, "stmt": [64,5,64,16] },
    { "module": "synch", "line": 64, "column": 14, "endline": 64, "endcolumn": 16, "stmt": [64,5,64,16] },
    { "module": "synch", "line": 64, "column": 14, "endline": 64, "endcolumn": 16, "stmt": [64,5,64,16] },
    { "module": "synch", "line": 64, "column": 5, "endline": 64, "endcolumn": 12, "stmt": [64,5,64,16] },
    { "module": "synch", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "synch", "line": 66, "column": 1, "endline": 66, "endcolumn": 3, "stmt": [66,1,66,12] },
    { "module": "synch", "line": 66, "column": 1, "endline": 66, "endcolumn": 12, "stmt": [66,1,66,12] },
    { "module": "synch", "line": 67, "column": 16, "endline": 69, "endcolumn": 6, "stmt": [67,16,69,6] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 16, "stmt": [67,16,69,6] },
    { "module": "synch", "line": 67, "column": 22, "endline": 67, "endcolumn": 25, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 21, "endline": 67, "endcolumn": 25, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 29, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 21, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 29, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 29, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 68, "column": 10, "endline": 68, "endcolumn": 13, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 10, "endline": 68, "endcolumn": 13, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 9, "endline": 68, "endcolumn": 18, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 9, "endline": 68, "endcolumn": 18, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 18, "endline": 68, "endcolumn": 18, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 9, "endline": 68, "endcolumn": 18, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 68, "column": 9, "endline": 68, "endcolumn": 16, "stmt": [68,9,68,18] },
    { "module": "synch", "line": 67, "column": 16, "endline": 67, "endcolumn": 29, "stmt": [67,16,67,29] },
    { "module": "synch", "line": 66, "column": 1, "endline": 66, "endcolumn": 12, "stmt": [66,1,66,12] },
    { "module": "synch", "line": 70, "column": 1, "endline": 70, "endcolumn": 3, "stmt": [70,1,70,12] },
    { "module": "synch", "line": 70, "column": 1, "endline": 70, "endcolumn": 12, "stmt": [70,1,70,12] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 17, "endline": 71, "endcolumn": 20, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 17, "endline": 71, "endcolumn": 20, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 25, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 23, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,25] },
    { "module": "synch", "line": 70, "column": 1, "endline": 70, "endcolumn": 12, "stmt": [70,1,70,12] },
    { "module": "synch", "line": 73, "column": 1, "endline": 73, "endcolumn": 3, "stmt": [73,1,73,27] },
    { "module": "synch", "line": 73, "column": 1, "endline": 73, "endcolumn": 27, "stmt": [73,1,73,27] },
    { "module": "synch", "line": 74, "column": 14, "endline": 74, "endcolumn": 15, "stmt": [74,5,74,15] },
    { "module": "synch", "line": 74, "column": 14, "endline": 74, "endcolumn": 15, "stmt": [74,5,74,15] },
    { "module": "synch", "line": 74, "column": 5, "endline": 74, "endcolumn": 12, "stmt": [74,5,74,15] },
    { "module": "synch", "line": 73, "column": 1, "endline": 73, "endcolumn": 27, "stmt": [73,1,73,27] },
    { "module": "synch", "line": 76, "column": 1, "endline": 76, "endcolumn": 3, "stmt": [76,1,76,26] },
    { "module": "synch", "line": 76, "column": 1, "endline": 76, "endcolumn": 26, "stmt": [76,1,76,26] },
    { "module": "synch", "line": 77, "column": 16, "endline": 80, "endcolumn": 6, "stmt": [77,16,80,6] },
    { "module": "synch", "line": 77, "column": 16, "endline": 80, "endcolumn": 6, "stmt": [77,16,80,6] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 16, "stmt": [77,16,80,6] },
    { "module": "synch", "line": 77, "column": 22, "endline": 77, "endcolumn": 22, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 21, "endline": 77, "endcolumn": 22, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 27, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 21, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 28, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 28, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 78, "column": 18, "endline": 78, "endcolumn": 26, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 78, "column": 29, "endline": 78, "endcolumn": 29, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 78, "column": 28, "endline": 78, "endcolumn": 29, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 78, "column": 18, "endline": 78, "endcolumn": 30, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 78, "column": 18, "endline": 78, "endcolumn": 30, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 78, "column": 9, "endline": 78, "endcolumn": 16, "stmt": [78,9,78,30] },
    { "module": "synch", "line": 79, "column": 10, "endline": 79, "endcolumn": 10, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 14, "endline": 79, "endcolumn": 22, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 25, "endline": 79, "endcolumn": 25, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 25, "endline": 79, "endcolumn": 25, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 24, "endline": 79, "endcolumn": 25, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 14, "endline": 79, "endcolumn": 26, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 14, "endline": 79, "endcolumn": 26, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 79, "column": 9, "endline": 79, "endcolumn": 12, "stmt": [79,9,79,26] },
    { "module": "synch", "line": 77, "column": 16, "endline": 77, "endcolumn": 28, "stmt": [77,16,77,28] },
    { "module": "synch", "line": 76, "column": 1, "endline": 76, "endcolumn": 26, "stmt": [76,1,76,26] },
    { "module": "synch", "line": 81, "column": 1, "endline": 81, "endcolumn": 3, "stmt": [81,1,81,17] },
    { "module": "synch", "line": 81, "column": 1, "endline": 81, "endcolumn": 17, "stmt": [81,1,81,17] },
    { "module": "synch", "line": 82, "column": 16, "endline": 82, "endcolumn": 41, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 17, "endline": 82, "endcolumn": 17, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 21, "endline": 82, "endcolumn": 31, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 33, "endline": 82, "endcolumn": 40, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 34, "endline": 82, "endcolumn": 34, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 34, "endline": 82, "endcolumn": 34, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 33, "endline": 82, "endcolumn": 34, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 33, "endline": 82, "endcolumn": 40, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 37, "endline": 82, "endcolumn": 40, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 37, "endline": 82, "endcolumn": 40, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 33, "endline": 82, "endcolumn": 40, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 21, "endline": 82, "endcolumn": 41, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 21, "endline": 82, "endcolumn": 41, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 16, "endline": 82, "endcolumn": 19, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 82, "column": 16, "endline": 82, "endcolumn": 41, "stmt": [82,16,82,41] },
    { "module": "synch", "line": 81, "column": 1, "endline": 81, "endcolumn": 17, "stmt": [81,1,81,17] },
    { "module": "set", "line": 3, "column": 1, "endline": 3, "endcolumn": 3, "stmt": [3,1,3,34] },
    { "module": "set", "line": 3, "column": 1, "endline": 3, "endcolumn": 34, "stmt": [3,1,3,34] },
    { "module": "set", "line": 4, "column": 15, "endline": 4, "endcolumn": 15, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 15, "endline": 4, "endcolumn": 15, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 19, "endline": 4, "endcolumn": 19, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 19, "endline": 4, "endcolumn": 19, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 15, "endline": 4, "endcolumn": 19, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 25, "endline": 4, "endcolumn": 25, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 25, "endline": 4, "endcolumn": 25, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 14, "endline": 4, "endcolumn": 25, "stmt": [4,5,4,25] },
    { "module": "set", "line": 4, "column": 5, "endline": 4, "endcolumn": 12, "stmt": [4,5,4,25] },
    { "module": "set", "line": 3, "column": 1, "endline": 3, "endcolumn": 34, "stmt": [3,1,3,34] },
    { "module": "set", "line": 6, "column": 1, "endline": 6, "endcolumn": 3, "stmt": [6,1,6,36] },
    { "module": "set", "line": 6, "column": 1, "endline": 6, "endcolumn": 36, "stmt": [6,1,6,36] },
    { "module": "set", "line": 7, "column": 15, "endline": 7, "endcolumn": 15, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 15, "endline": 7, "endcolumn": 15, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 19, "endline": 7, "endcolumn": 19, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 19, "endline": 7, "endcolumn": 19, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 15, "endline": 7, "endcolumn": 19, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 25, "endline": 7, "endcolumn": 25, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 25, "endline": 7, "endcolumn": 25, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 14, "endline": 7, "endcolumn": 25, "stmt": [7,5,7,25] },
    { "module": "set", "line": 7, "column": 5, "endline": 7, "endcolumn": 12, "stmt": [7,5,7,25] },
    { "module": "set", "line": 6, "column": 1, "endline": 6, "endcolumn": 36, "stmt": [6,1,6,36] },
    { "module": "set", "line": 9, "column": 1, "endline": 9, "endcolumn": 3, "stmt": [9,1,9,40] },
    { "module": "set", "line": 9, "column": 1, "endline": 9, "endcolumn": 40, "stmt": [9,1,9,40] },
    { "module": "set", "line": 10, "column": 15, "endline": 10, "endcolumn": 15, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 15, "endline": 10, "endcolumn": 15, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 20, "endline": 10, "endcolumn": 20, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 15, "endline": 10, "endcolumn": 20, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 14, "endline": 10, "endcolumn": 40, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 29, "endline": 10, "endcolumn": 29, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 33, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 33, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 29, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 39, "endline": 10, "endcolumn": 39, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 39, "endline": 10, "endcolumn": 39, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 28, "endline": 10, "endcolumn": 39, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 23, "endline": 10, "endcolumn": 25, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 14, "endline": 10, "endcolumn": 40, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 14, "endline": 10, "endcolumn": 40, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 14, "endline": 10, "endcolumn": 40, "stmt": [10,5,10,40] },
    { "module": "set", "line": 10, "column": 5, "endline": 10, "endcolumn": 12, "stmt": [10,5,10,40] },
    { "module": "set", "line": 9, "column": 1, "endline": 9, "endcolumn": 40, "stmt": [9,1,9,40] },
    { "module": "set", "line": 12, "column": 1, "endline": 12, "endcolumn": 3, "stmt": [12,1,12,36] },
    { "module": "set", "line": 12, "column": 1, "endline": 12, "endcolumn": 36, "stmt": [12,1,12,36] },
    { "module": "set", "line": 13, "column": 15, "endline": 13, "endcolumn": 15, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 15, "endline": 13, "endcolumn": 15, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 15, "endline": 13, "endcolumn": 15, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 19, "endline": 13, "endcolumn": 19, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 15, "endline": 13, "endcolumn": 19, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 25, "endline": 13, "endcolumn": 25, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 25, "endline": 13, "endcolumn": 25, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 14, "endline": 13, "endcolumn": 25, "stmt": [13,5,13,25] },
    { "module": "set", "line": 13, "column": 5, "endline": 13, "endcolumn": 12, "stmt": [13,5,13,25] },
    { "module": "set", "line": 12, "column": 1, "endline": 12, "endcolumn": 36, "stmt": [12,1,12,36] },
    { "module": "set", "line": 15, "column": 1, "endline": 15, "endcolumn": 3, "stmt": [15,1,15,38] },
    { "module": "set", "line": 15, "column": 1, "endline": 15, "endcolumn": 38, "stmt": [15,1,15,38] },
    { "module": "set", "line": 16, "column": 15, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 15, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 15, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 19, "endline": 16, "endcolumn": 19, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 15, "endline": 16, "endcolumn": 19, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 25, "endline": 16, "endcolumn": 25, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 25, "endline": 16, "endcolumn": 25, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 14, "endline": 16, "endcolumn": 25, "stmt": [16,5,16,25] },
    { "module": "set", "line": 16, "column": 5, "endline": 16, "endcolumn": 12, "stmt": [16,5,16,25] },
    { "module": "set", "line": 15, "column": 1, "endline": 15, "endcolumn": 38, "stmt": [15,1,15,38] },
    { "module": "set", "line": 18, "column": 1, "endline": 18, "endcolumn": 3, "stmt": [18,1,18,42] },
    { "module": "set", "line": 18, "column": 1, "endline": 18, "endcolumn": 42, "stmt": [18,1,18,42] },
    { "module": "set", "line": 19, "column": 15, "endline": 19, "endcolumn": 15, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 15, "endline": 19, "endcolumn": 15, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 20, "endline": 19, "endcolumn": 20, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 15, "endline": 19, "endcolumn": 20, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 14, "endline": 19, "endcolumn": 40, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 29, "endline": 19, "endcolumn": 29, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 29, "endline": 19, "endcolumn": 29, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 33, "endline": 19, "endcolumn": 33, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 29, "endline": 19, "endcolumn": 33, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 39, "endline": 19, "endcolumn": 39, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 39, "endline": 19, "endcolumn": 39, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 28, "endline": 19, "endcolumn": 39, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 23, "endline": 19, "endcolumn": 25, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 14, "endline": 19, "endcolumn": 40, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 14, "endline": 19, "endcolumn": 40, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 14, "endline": 19, "endcolumn": 40, "stmt": [19,5,19,40] },
    { "module": "set", "line": 19, "column": 5, "endline": 19, "endcolumn": 12, "stmt": [19,5,19,40] },
    { "module": "set", "line": 18, "column": 1, "endline": 18, "endcolumn": 42, "stmt": [18,1,18,42] },
    { "module": "set", "line": 21, "column": 1, "endline": 21, "endcolumn": 3, "stmt": [21,1,21,31] },
    { "module": "set", "line": 21, "column": 1, "endline": 21, "endcolumn": 31, "stmt": [21,1,21,31] },
    { "module": "set", "line": 22, "column": 15, "endline": 22, "endcolumn": 15, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 15, "endline": 22, "endcolumn": 15, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 15, "endline": 22, "endcolumn": 15, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 20, "endline": 22, "endcolumn": 22, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 20, "endline": 22, "endcolumn": 22, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 20, "endline": 22, "endcolumn": 22, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 20, "endline": 22, "endcolumn": 22, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 15, "endline": 22, "endcolumn": 23, "stmt": [22,5,22,23] },
    { "module": "set", "line": 22, "column": 5, "endline": 22, "endcolumn": 12, "stmt": [22,5,22,23] },
    { "module": "set", "line": 21, "column": 1, "endline": 21, "endcolumn": 31, "stmt": [21,1,21,31] },
    { "module": "set", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,34] },
    { "module": "set", "line": 24, "column": 1, "endline": 24, "endcolumn": 34, "stmt": [24,1,24,34] },
    { "module": "set", "line": 25, "column": 14, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 14, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 14, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 19, "endline": 25, "endcolumn": 21, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 19, "endline": 25, "endcolumn": 21, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 19, "endline": 25, "endcolumn": 21, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 19, "endline": 25, "endcolumn": 21, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 14, "endline": 25, "endcolumn": 22, "stmt": [25,5,25,22] },
    { "module": "set", "line": 25, "column": 5, "endline": 25, "endcolumn": 12, "stmt": [25,5,25,22] },
    { "module": "set", "line": 24, "column": 1, "endline": 24, "endcolumn": 34, "stmt": [24,1,24,34] },
    { "module": "set", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,30] },
    { "module": "set", "line": 28, "column": 1, "endline": 28, "endcolumn": 30, "stmt": [28,1,28,30] },
    { "module": "set", "line": 29, "column": 15, "endline": 29, "endcolumn": 15, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 15, "endline": 29, "endcolumn": 15, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 15, "endline": 29, "endcolumn": 15, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 15, "endline": 29, "endcolumn": 15, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 54, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 34, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 34, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 34, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 36, "endline": 29, "endcolumn": 36, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 41, "endline": 29, "endcolumn": 41, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 41, "endline": 29, "endcolumn": 41, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 41, "endline": 29, "endcolumn": 41, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 41, "endline": 29, "endcolumn": 41, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 36, "endline": 29, "endcolumn": 42, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 43, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 54, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 28, "endline": 29, "endcolumn": 54, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 20, "endline": 29, "endcolumn": 56, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 14, "endline": 29, "endcolumn": 56, "stmt": [29,5,29,56] },
    { "module": "set", "line": 29, "column": 5, "endline": 29, "endcolumn": 12, "stmt": [29,5,29,56] },
    { "module": "set", "line": 28, "column": 1, "endline": 28, "endcolumn": 30, "stmt": [28,1,28,30] },
    { "module": "set", "line": 32, "column": 1, "endline": 32, "endcolumn": 3, "stmt": [32,1,32,28] },
    { "module": "set", "line": 32, "column": 1, "endline": 32, "endcolumn": 28, "stmt": [32,1,32,28] },
    { "module": "set", "line": 33, "column": 14, "endline": 33, "endcolumn": 15, "stmt": [33,5,33,15] },
    { "module": "set", "line": 33, "column": 14, "endline": 33, "endcolumn": 15, "stmt": [33,5,33,15] },
    { "module": "set", "line": 33, "column": 5, "endline": 33, "endcolumn": 12, "stmt": [33,5,33,15] },
    { "module": "set", "line": 34, "column": 14, "endline": 34, "endcolumn": 14, "stmt": [34,5,34,14] },
    { "module": "set", "line": 34, "column": 14, "endline": 34, "endcolumn": 14, "stmt": [34,5,34,14] },
    { "module": "set", "line": 34, "column": 5, "endline": 34, "endcolumn": 7, "stmt": [34,5,34,14] },
    { "module": "set", "line": 34, "column": 5, "endline": 34, "endcolumn": 7, "stmt": [34,5,34,14] },
    { "module": "set", "line": 34, "column": 5, "endline": 34, "endcolumn": 7, "stmt": [34,5,34,14] },
    { "module": "set", "line": 35, "column": 9, "endline": 35, "endcolumn": 19, "stmt": [35,9,35,19] },
    { "module": "set", "line": 35, "column": 9, "endline": 35, "endcolumn": 19, "stmt": [35,9,35,19] },
    { "module": "set", "line": 35, "column": 19, "endline": 35, "endcolumn": 19, "stmt": [35,9,35,19] },
    { "module": "set", "line": 35, "column": 19, "endline": 35, "endcolumn": 19, "stmt": [35,9,35,19] },
    { "module": "set", "line": 35, "column": 9, "endline": 35, "endcolumn": 19, "stmt": [35,9,35,19] },
    { "module": "set", "line": 35, "column": 9, "endline": 35, "endcolumn": 17, "stmt": [35,9,35,19] },
    { "module": "set", "line": 34, "column": 14, "endline": 34, "endcolumn": 14, "stmt": [34,5,34,14] },
    { "module": "set", "line": 32, "column": 1, "endline": 32, "endcolumn": 28, "stmt": [32,1,32,28] },
    { "module": "set", "line": 32, "column": 1, "endline": 32, "endcolumn": 28, "stmt": [32,1,32,28] },
    { "module": "set", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,32] },
    { "module": "set", "line": 38, "column": 1, "endline": 38, "endcolumn": 32, "stmt": [38,1,38,32] },
    { "module": "set", "line": 39, "column": 24, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 24, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 29, "endline": 39, "endcolumn": 30, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 24, "endline": 39, "endcolumn": 30, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 14, "endline": 39, "endcolumn": 95, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 16, "endline": 39, "endcolumn": 17, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 16, "endline": 39, "endcolumn": 17, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 16, "endline": 39, "endcolumn": 17, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 16, "endline": 39, "endcolumn": 17, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 21, "endline": 39, "endcolumn": 22, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 67, "endline": 39, "endcolumn": 75, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 77, "endline": 39, "endcolumn": 77, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 67, "endline": 39, "endcolumn": 78, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 67, "endline": 39, "endcolumn": 78, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 57, "endline": 39, "endcolumn": 79, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 90, "endline": 39, "endcolumn": 90, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 92, "endline": 39, "endcolumn": 92, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 90, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 90, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 39, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 40, "endline": 39, "endcolumn": 41, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 40, "endline": 39, "endcolumn": 40, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 40, "endline": 39, "endcolumn": 40, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 40, "endline": 39, "endcolumn": 41, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 46, "endline": 39, "endcolumn": 46, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 46, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 93, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 93, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 93, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 93, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 39, "endline": 39, "endcolumn": 93, "stmt": [39,5,39,95] },
    { "module": "set", "line": 39, "column": 5, "endline": 39, "endcolumn": 12, "stmt": [39,5,39,95] },
    { "module": "set", "line": 38, "column": 1, "endline": 38, "endcolumn": 32, "stmt": [38,1,38,32] },
    { "module": "set", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,38] },
    { "module": "set", "line": 42, "column": 1, "endline": 42, "endcolumn": 38, "stmt": [42,1,42,38] },
    { "module": "set", "line": 43, "column": 8, "endline": 43, "endcolumn": 8, "stmt": [43,5,43,14] },
    { "module": "set", "line": 43, "column": 8, "endline": 43, "endcolumn": 8, "stmt": [43,5,43,14] },
    { "module": "set", "line": 43, "column": 13, "endline": 43, "endcolumn": 13, "stmt": [43,5,43,14] },
    { "module": "set", "line": 43, "column": 8, "endline": 43, "endcolumn": 13, "stmt": [43,5,43,14] },
    { "module": "set", "line": 43, "column": 5, "endline": 43, "endcolumn": 6, "stmt": [43,5,43,14] },
    { "module": "set", "line": 44, "column": 20, "endline": 44, "endcolumn": 21, "stmt": [44,9,44,23] },
    { "module": "set", "line": 44, "column": 20, "endline": 44, "endcolumn": 21, "stmt": [44,9,44,23] },
    { "module": "set", "line": 44, "column": 20, "endline": 44, "endcolumn": 21, "stmt": [44,9,44,23] },
    { "module": "set", "line": 44, "column": 20, "endline": 44, "endcolumn": 21, "stmt": [44,9,44,23] },
    { "module": "set", "line": 44, "column": 20, "endline": 44, "endcolumn": 21, "stmt": [44,9,44,23] },
    { "module": "set", "line": 44, "column": 9, "endline": 44, "endcolumn": 16, "stmt": [44,9,44,23] },
    { "module": "set", "line": 43, "column": 5, "endline": 43, "endcolumn": 14, "stmt": [43,5,43,14] },
    { "module": "set", "line": 46, "column": 21, "endline": 46, "endcolumn": 21, "stmt": [46,9,46,22] },
    { "module": "set", "line": 46, "column": 17, "endline": 46, "endcolumn": 22, "stmt": [46,9,46,22] },
    { "module": "set", "line": 46, "column": 9, "endline": 46, "endcolumn": 15, "stmt": [46,9,46,22] },
    { "module": "set", "line": 47, "column": 16, "endline": 47, "endcolumn": 16, "stmt": [47,13,47,21] },
    { "module": "set", "line": 47, "column": 20, "endline": 47, "endcolumn": 20, "stmt": [47,13,47,21] },
    { "module": "set", "line": 47, "column": 16, "endline": 47, "endcolumn": 20, "stmt": [47,13,47,21] },
    { "module": "set", "line": 47, "column": 13, "endline": 47, "endcolumn": 14, "stmt": [47,13,47,21] },
    { "module": "set", "line": 48, "column": 26, "endline": 48, "endcolumn": 27, "stmt": [48,17,48,27] },
    { "module": "set", "line": 48, "column": 26, "endline": 48, "endcolumn": 27, "stmt": [48,17,48,27] },
    { "module": "set", "line": 48, "column": 26, "endline": 48, "endcolumn": 27, "stmt": [48,17,48,27] },
    { "module": "set", "line": 48, "column": 26, "endline": 48, "endcolumn": 27, "stmt": [48,17,48,27] },
    { "module": "set", "line": 48, "column": 17, "endline": 48, "endcolumn": 24, "stmt": [48,17,48,27] },
    { "module": "set", "line": 47, "column": 13, "endline": 47, "endcolumn": 21, "stmt": [47,13,47,21] },
    { "module": "set", "line": 49, "column": 18, "endline": 49, "endcolumn": 18, "stmt": [49,13,49,24] },
    { "module": "set", "line": 49, "column": 23, "endline": 49, "endcolumn": 23, "stmt": [49,13,49,24] },
    { "module": "set", "line": 49, "column": 23, "endline": 49, "endcolumn": 23, "stmt": [49,13,49,24] },
    { "module": "set", "line": 49, "column": 18, "endline": 49, "endcolumn": 23, "stmt": [49,13,49,24] },
    { "module": "set", "line": 49, "column": 13, "endline": 49, "endcolumn": 16, "stmt": [49,13,49,24] },
    { "module": "set", "line": 50, "column": 28, "endline": 50, "endcolumn": 28, "stmt": [50,17,50,30] },
    { "module": "set", "line": 50, "column": 28, "endline": 50, "endcolumn": 28, "stmt": [50,17,50,30] },
    { "module": "set", "line": 50, "column": 28, "endline": 50, "endcolumn": 28, "stmt": [50,17,50,30] },
    { "module": "set", "line": 50, "column": 28, "endline": 50, "endcolumn": 28, "stmt": [50,17,50,30] },
    { "module": "set", "line": 50, "column": 28, "endline": 50, "endcolumn": 28, "stmt": [50,17,50,30] },
    { "module": "set", "line": 50, "column": 17, "endline": 50, "endcolumn": 24, "stmt": [50,17,50,30] },
    { "module": "set", "line": 49, "column": 13, "endline": 49, "endcolumn": 24, "stmt": [49,13,49,24] },
    { "module": "set", "line": 52, "column": 30, "endline": 52, "endcolumn": 30, "stmt": [52,17,52,31] },
    { "module": "set", "line": 52, "column": 26, "endline": 52, "endcolumn": 31, "stmt": [52,17,52,31] },
    { "module": "set", "line": 52, "column": 17, "endline": 52, "endcolumn": 24, "stmt": [52,17,52,31] },
    { "module": "set", "line": 52, "column": 42, "endline": 52, "endcolumn": 42, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 42, "endline": 52, "endcolumn": 42, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 47, "endline": 52, "endcolumn": 48, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 47, "endline": 52, "endcolumn": 48, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 47, "endline": 52, "endcolumn": 48, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 42, "endline": 52, "endcolumn": 49, "stmt": [52,33,52,49] },
    { "module": "set", "line": 52, "column": 33, "endline": 52, "endcolumn": 40, "stmt": [52,33,52,49] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 65, "endline": 53, "endcolumn": 73, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 65, "endline": 53, "endcolumn": 66, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 65, "endline": 53, "endcolumn": 73, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 69, "endline": 53, "endcolumn": 69, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 73, "endline": 53, "endcolumn": 73, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 69, "endline": 53, "endcolumn": 73, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 65, "endline": 53, "endcolumn": 73, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 52, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 32, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 32, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 32, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 34, "endline": 53, "endcolumn": 35, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 34, "endline": 53, "endcolumn": 35, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 34, "endline": 53, "endcolumn": 35, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 40, "endline": 53, "endcolumn": 40, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 40, "endline": 53, "endcolumn": 40, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 33, "endline": 53, "endcolumn": 40, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 74, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 32, "endline": 53, "endcolumn": 74, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 48, "endline": 54, "endcolumn": 52, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 48, "endline": 54, "endcolumn": 49, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 48, "endline": 54, "endcolumn": 49, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 48, "endline": 54, "endcolumn": 52, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 52, "endline": 54, "endcolumn": 52, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 52, "endline": 54, "endcolumn": 52, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 48, "endline": 54, "endcolumn": 52, "stmt": [53,21,54,53] },
    { "module": "set", "line": 54, "column": 35, "endline": 54, "endcolumn": 53, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 30, "endline": 54, "endcolumn": 53, "stmt": [53,21,54,53] },
    { "module": "set", "line": 53, "column": 21, "endline": 53, "endcolumn": 28, "stmt": [53,21,54,53] },
    { "module": "set", "line": 42, "column": 1, "endline": 42, "endcolumn": 38, "stmt": [42,1,42,38] },
    { "module": "set", "line": 57, "column": 1, "endline": 57, "endcolumn": 3, "stmt": [57,1,57,35] },
    { "module": "set", "line": 57, "column": 1, "endline": 57, "endcolumn": 35, "stmt": [57,1,57,35] },
    { "module": "set", "line": 58, "column": 14, "endline": 58, "endcolumn": 14, "stmt": [58,5,58,14] },
    { "module": "set", "line": 58, "column": 14, "endline": 58, "endcolumn": 14, "stmt": [58,5,58,14] },
    { "module": "set", "line": 58, "column": 14, "endline": 58, "endcolumn": 14, "stmt": [58,5,58,14] },
    { "module": "set", "line": 58, "column": 5, "endline": 58, "endcolumn": 12, "stmt": [58,5,58,14] },
    { "module": "set", "line": 59, "column": 14, "endline": 59, "endcolumn": 14, "stmt": [59,5,59,14] },
    { "module": "set", "line": 59, "column": 14, "endline": 59, "endcolumn": 14, "stmt": [59,5,59,14] },
    { "module": "set", "line": 59, "column": 5, "endline": 59, "endcolumn": 7, "stmt": [59,5,59,14] },
    { "module": "set", "line": 59, "column": 5, "endline": 59, "endcolumn": 7, "stmt": [59,5,59,14] },
    { "module": "set", "line": 59, "column": 5, "endline": 59, "endcolumn": 7, "stmt": [59,5,59,14] },
    { "module": "set", "line": 60, "column": 18, "endline": 60, "endcolumn": 18, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 20, "endline": 60, "endcolumn": 28, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 20, "endline": 60, "endcolumn": 25, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 20, "endline": 60, "endcolumn": 25, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 20, "endline": 60, "endcolumn": 28, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 28, "endline": 60, "endcolumn": 28, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 28, "endline": 60, "endcolumn": 28, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 20, "endline": 60, "endcolumn": 28, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 18, "endline": 60, "endcolumn": 29, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 18, "endline": 60, "endcolumn": 29, "stmt": [60,9,60,29] },
    { "module": "set", "line": 60, "column": 9, "endline": 60, "endcolumn": 16, "stmt": [60,9,60,29] },
    { "module": "set", "line": 59, "column": 14, "endline": 59, "endcolumn": 14, "stmt": [59,5,59,14] },
    { "module": "set", "line": 57, "column": 1, "endline": 57, "endcolumn": 35, "stmt": [57,1,57,35] },
    { "module": "set", "line": 57, "column": 1, "endline": 57, "endcolumn": 35, "stmt": [57,1,57,35] },
    { "module": "set", "line": 57, "column": 1, "endline": 57, "endcolumn": 35, "stmt": [57,1,57,35] },
    { "module": "set", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,30] },
    { "module": "set", "line": 63, "column": 1, "endline": 63, "endcolumn": 30, "stmt": [63,1,63,30] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 22, "endline": 64, "endcolumn": 22, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 22, "endline": 64, "endcolumn": 22, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 30, "endline": 64, "endcolumn": 33, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 35, "endline": 64, "endcolumn": 35, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 30, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 30, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 36, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 11, "endline": 64, "endcolumn": 36, "stmt": [64,5,64,38] },
    { "module": "set", "line": 64, "column": 5, "endline": 64, "endcolumn": 7, "stmt": [64,5,64,38] },
    { "module": "set", "line": 63, "column": 1, "endline": 63, "endcolumn": 30, "stmt": [63,1,63,30] },
    { "module": "set", "line": 63, "column": 1, "endline": 63, "endcolumn": 30, "stmt": [63,1,63,30] },
    { "module": "set", "line": 67, "column": 1, "endline": 67, "endcolumn": 3, "stmt": [67,1,67,24] },
    { "module": "set", "line": 67, "column": 1, "endline": 67, "endcolumn": 24, "stmt": [67,1,67,24] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 25, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 25, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 13, "endline": 68, "endcolumn": 13, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 13, "endline": 68, "endcolumn": 13, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 14, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 14, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 25, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 11, "endline": 68, "endcolumn": 25, "stmt": [68,5,68,27] },
    { "module": "set", "line": 68, "column": 5, "endline": 68, "endcolumn": 7, "stmt": [68,5,68,27] },
    { "module": "set", "line": 67, "column": 1, "endline": 67, "endcolumn": 24, "stmt": [67,1,67,24] },
    { "module": "set", "line": 67, "column": 1, "endline": 67, "endcolumn": 24, "stmt": [67,1,67,24] },
    { "module": "game", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,24] },
    { "module": "game", "line": 4, "column": 1, "endline": 4, "endcolumn": 24, "stmt": [4,1,4,24] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 5, "endcolumn": 21, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 24, "endline": 5, "endcolumn": 25, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 28, "endline": 5, "endcolumn": 33, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 36, "endline": 5, "endcolumn": 37, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 40, "endline": 5, "endcolumn": 45, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 48, "endline": 5, "endcolumn": 49, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 52, "endline": 5, "endcolumn": 56, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 63, "endline": 5, "endcolumn": 64, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 59, "endline": 5, "endcolumn": 64, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 13, "endline": 6, "endcolumn": 24, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 36, "endline": 6, "endcolumn": 37, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 27, "endline": 6, "endcolumn": 37, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 40, "endline": 6, "endcolumn": 47, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 59, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 6, "column": 50, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 14, "endline": 6, "endcolumn": 60, "stmt": [5,5,6,61] },
    { "module": "game", "line": 5, "column": 5, "endline": 5, "endcolumn": 10, "stmt": [5,5,6,61] },
    { "module": "game", "line": 4, "column": 1, "endline": 4, "endcolumn": 24, "stmt": [4,1,4,24] },
    { "module": "game", "line": 4, "column": 1, "endline": 4, "endcolumn": 24, "stmt": [4,1,4,24] },
    { "module": "game", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,19] },
    { "module": "game", "line": 8, "column": 1, "endline": 8, "endcolumn": 19, "stmt": [8,1,8,19] },
    { "module": "game", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,21] },
    { "module": "game", "line": 9, "column": 17, "endline": 9, "endcolumn": 20, "stmt": [9,5,9,21] },
    { "module": "game", "line": 9, "column": 14, "endline": 9, "endcolumn": 20, "stmt": [9,5,9,21] },
    { "module": "game", "line": 9, "column": 5, "endline": 9, "endcolumn": 21, "stmt": [9,5,9,21] },
    { "module": "game", "line": 9, "column": 5, "endline": 9, "endcolumn": 21, "stmt": [9,5,9,21] },
    { "module": "game", "line": 10, "column": 11, "endline": 10, "endcolumn": 14, "stmt": [10,5,10,15] },
    { "module": "game", "line": 10, "column": 5, "endline": 10, "endcolumn": 9, "stmt": [10,5,10,15] },
    { "module": "game", "line": 13, "column": 20, "endline": 13, "endcolumn": 20, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 23, "endline": 13, "endcolumn": 29, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 16, "endline": 13, "endcolumn": 30, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 34, "endline": 13, "endcolumn": 34, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 16, "endline": 13, "endcolumn": 34, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 15, "endline": 13, "endcolumn": 83, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 45, "endline": 13, "endcolumn": 45, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 48, "endline": 13, "endcolumn": 52, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 45, "endline": 13, "endcolumn": 52, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 45, "endline": 13, "endcolumn": 52, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 41, "endline": 13, "endcolumn": 53, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 58, "endline": 13, "endcolumn": 58, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 41, "endline": 13, "endcolumn": 58, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 15, "endline": 13, "endcolumn": 83, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 69, "endline": 13, "endcolumn": 69, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 72, "endline": 13, "endcolumn": 76, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 69, "endline": 13, "endcolumn": 76, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 69, "endline": 13, "endcolumn": 76, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 65, "endline": 13, "endcolumn": 77, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 82, "endline": 13, "endcolumn": 82, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 65, "endline": 13, "endcolumn": 82, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 37, "endline": 13, "endcolumn": 38, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 15, "endline": 13, "endcolumn": 83, "stmt": [13,9,13,84] },
    { "module": "game", "line": 13, "column": 9, "endline": 13, "endcolumn": 13, "stmt": [13,9,13,84] },
    { "module": "game", "line": 14, "column": 18, "endline": 14, "endcolumn": 42, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 19, "endline": 14, "endcolumn": 19, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 22, "endline": 14, "endcolumn": 32, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 19, "endline": 14, "endcolumn": 32, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 18, "endline": 14, "endcolumn": 42, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 36, "endline": 14, "endcolumn": 36, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 39, "endline": 14, "endcolumn": 42, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 36, "endline": 14, "endcolumn": 42, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 18, "endline": 14, "endcolumn": 42, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 13, "endline": 14, "endcolumn": 43, "stmt": [14,13,14,43] },
    { "module": "game", "line": 14, "column": 13, "endline": 14, "endcolumn": 43, "stmt": [14,13,14,43] },
    { "module": "game", "line": 13, "column": 9, "endline": 13, "endcolumn": 84, "stmt": [13,9,13,84] },
    { "module": "game", "line": 17, "column": 33, "endline": 17, "endcolumn": 33, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 36, "endline": 17, "endcolumn": 42, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 33, "endline": 17, "endcolumn": 42, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 33, "endline": 17, "endcolumn": 42, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 29, "endline": 17, "endcolumn": 43, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 52, "endline": 17, "endcolumn": 52, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 55, "endline": 17, "endcolumn": 61, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 52, "endline": 17, "endcolumn": 61, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 52, "endline": 17, "endcolumn": 61, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 48, "endline": 17, "endcolumn": 62, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 66, "endline": 17, "endcolumn": 66, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 48, "endline": 17, "endcolumn": 66, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 29, "endline": 17, "endcolumn": 67, "stmt": [17,9,17,67] },
    { "module": "game", "line": 17, "column": 9, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,67] },
    { "module": "game", "line": 18, "column": 21, "endline": 18, "endcolumn": 21, "stmt": [18,13,18,21] },
    { "module": "game", "line": 18, "column": 13, "endline": 18, "endcolumn": 21, "stmt": [18,13,18,21] },
    { "module": "game", "line": 19, "column": 19, "endline": 19, "endcolumn": 19, "stmt": [19,13,19,36] },
    { "module": "game", "line": 19, "column": 23, "endline": 19, "endcolumn": 35, "stmt": [19,13,19,36] },
    { "module": "game", "line": 19, "column": 19, "endline": 19, "endcolumn": 35, "stmt": [19,13,19,36] },
    { "module": "game", "line": 19, "column": 13, "endline": 19, "endcolumn": 17, "stmt": [19,13,19,36] },
    { "module": "game", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 20, "endline": 20, "endcolumn": 24, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 17, "endline": 20, "endcolumn": 24, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 54, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 32, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 35, "endline": 20, "endcolumn": 39, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 39, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 39, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 54, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 42, "endline": 20, "endcolumn": 42, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 45, "endline": 20, "endcolumn": 51, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 42, "endline": 20, "endcolumn": 51, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 53, "endline": 20, "endcolumn": 53, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 42, "endline": 20, "endcolumn": 54, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 42, "endline": 20, "endcolumn": 54, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 32, "endline": 20, "endcolumn": 54, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 28, "endline": 20, "endcolumn": 55, "stmt": [20,17,20,55] },
    { "module": "game", "line": 20, "column": 17, "endline": 20, "endcolumn": 26, "stmt": [20,17,20,55] },
    { "module": "game", "line": 21, "column": 17, "endline": 21, "endcolumn": 17, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 20, "endline": 21, "endcolumn": 24, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 17, "endline": 21, "endcolumn": 24, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 56, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 32, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 35, "endline": 21, "endcolumn": 39, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 39, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 39, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 56, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 42, "endline": 21, "endcolumn": 42, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 45, "endline": 21, "endcolumn": 51, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 42, "endline": 21, "endcolumn": 51, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 53, "endline": 21, "endcolumn": 53, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 55, "endline": 21, "endcolumn": 55, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 53, "endline": 21, "endcolumn": 55, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 42, "endline": 21, "endcolumn": 56, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 42, "endline": 21, "endcolumn": 56, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 32, "endline": 21, "endcolumn": 56, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 28, "endline": 21, "endcolumn": 57, "stmt": [21,17,21,57] },
    { "module": "game", "line": 21, "column": 17, "endline": 21, "endcolumn": 26, "stmt": [21,17,21,57] },
    { "module": "game", "line": 22, "column": 17, "endline": 22, "endcolumn": 22, "stmt": [22,17,22,22] },
    { "module": "game", "line": 22, "column": 17, "endline": 22, "endcolumn": 22, "stmt": [22,17,22,22] },
    { "module": "game", "line": 22, "column": 22, "endline": 22, "endcolumn": 22, "stmt": [22,17,22,22] },
    { "module": "game", "line": 22, "column": 17, "endline": 22, "endcolumn": 22, "stmt": [22,17,22,22] },
    { "module": "game", "line": 22, "column": 17, "endline": 22, "endcolumn": 20, "stmt": [22,17,22,22] },
    { "module": "game", "line": 19, "column": 13, "endline": 19, "endcolumn": 36, "stmt": [19,13,19,36] },
    { "module": "game", "line": 24, "column": 21, "endline": 24, "endcolumn": 21, "stmt": [24,13,24,21] },
    { "module": "game", "line": 24, "column": 21, "endline": 24, "endcolumn": 21, "stmt": [24,13,24,21] },
    { "module": "game", "line": 24, "column": 13, "endline": 24, "endcolumn": 21, "stmt": [24,13,24,21] },
    { "module": "game", "line": 25, "column": 19, "endline": 25, "endcolumn": 19, "stmt": [25,13,25,36] },
    { "module": "game", "line": 25, "column": 23, "endline": 25, "endcolumn": 35, "stmt": [25,13,25,36] },
    { "module": "game", "line": 25, "column": 19, "endline": 25, "endcolumn": 35, "stmt": [25,13,25,36] },
    { "module": "game", "line": 25, "column": 13, "endline": 25, "endcolumn": 17, "stmt": [25,13,25,36] },
    { "module": "game", "line": 26, "column": 21, "endline": 26, "endcolumn": 21, "stmt": [26,17,26,33] },
    { "module": "game", "line": 26, "column": 24, "endline": 26, "endcolumn": 30, "stmt": [26,17,26,33] },
    { "module": "game", "line": 26, "column": 21, "endline": 26, "endcolumn": 30, "stmt": [26,17,26,33] },
    { "module": "game", "line": 26, "column": 32, "endline": 26, "endcolumn": 32, "stmt": [26,17,26,33] },
    { "module": "game", "line": 26, "column": 21, "endline": 26, "endcolumn": 33, "stmt": [26,17,26,33] },
    { "module": "game", "line": 26, "column": 17, "endline": 26, "endcolumn": 33, "stmt": [26,17,26,33] },
    { "module": "game", "line": 27, "column": 17, "endline": 27, "endcolumn": 22, "stmt": [27,17,27,22] },
    { "module": "game", "line": 27, "column": 17, "endline": 27, "endcolumn": 22, "stmt": [27,17,27,22] },
    { "module": "game", "line": 27, "column": 22, "endline": 27, "endcolumn": 22, "stmt": [27,17,27,22] },
    { "module": "game", "line": 27, "column": 17, "endline": 27, "endcolumn": 22, "stmt": [27,17,27,22] },
    { "module": "game", "line": 27, "column": 17, "endline": 27, "endcolumn": 20, "stmt": [27,17,27,22] },
    { "module": "game", "line": 25, "column": 13, "endline": 25, "endcolumn": 36, "stmt": [25,13,25,36] },
    { "module": "game", "line": 31, "column": 20, "endline": 31, "endcolumn": 20, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 20, "endline": 31, "endcolumn": 20, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 20, "endline": 31, "endcolumn": 20, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 23, "endline": 31, "endcolumn": 29, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 20, "endline": 31, "endcolumn": 29, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 9, "endline": 31, "endcolumn": 30, "stmt": [31,9,31,30] },
    { "module": "game", "line": 31, "column": 9, "endline": 31, "endcolumn": 30, "stmt": [31,9,31,30] },
    { "module": "game", "line": 10, "column": 5, "endline": 10, "endcolumn": 15, "stmt": [10,5,10,15] },
    { "module": "game", "line": 32, "column": 14, "endline": 32, "endcolumn": 14, "stmt": [32,5,32,21] },
    { "module": "game", "line": 32, "column": 14, "endline": 32, "endcolumn": 14, "stmt": [32,5,32,21] },
    { "module": "game", "line": 32, "column": 17, "endline": 32, "endcolumn": 20, "stmt": [32,5,32,21] },
    { "module": "game", "line": 32, "column": 14, "endline": 32, "endcolumn": 20, "stmt": [32,5,32,21] },
    { "module": "game", "line": 32, "column": 5, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "game", "line": 32, "column": 5, "endline": 32, "endcolumn": 21, "stmt": [32,5,32,21] },
    { "module": "game", "line": 8, "column": 1, "endline": 8, "endcolumn": 19, "stmt": [8,1,8,19] },
    { "module": "game", "line": 35, "column": 1, "endline": 35, "endcolumn": 3, "stmt": [35,1,35,35] },
    { "module": "game", "line": 35, "column": 1, "endline": 35, "endcolumn": 35, "stmt": [35,1,35,35] },
    { "module": "game", "line": 36, "column": 14, "endline": 36, "endcolumn": 14, "stmt": [36,5,36,21] },
    { "module": "game", "line": 36, "column": 17, "endline": 36, "endcolumn": 20, "stmt": [36,5,36,21] },
    { "module": "game", "line": 36, "column": 14, "endline": 36, "endcolumn": 20, "stmt": [36,5,36,21] },
    { "module": "game", "line": 36, "column": 5, "endline": 36, "endcolumn": 21, "stmt": [36,5,36,21] },
    { "module": "game", "line": 36, "column": 5, "endline": 36, "endcolumn": 21, "stmt": [36,5,36,21] },
    { "module": "game", "line": 38, "column": 5, "endline": 38, "endcolumn": 5, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 8, "endline": 38, "endcolumn": 14, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 5, "endline": 38, "endcolumn": 14, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 18, "endline": 38, "endcolumn": 18, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 21, "endline": 38, "endcolumn": 27, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 18, "endline": 38, "endcolumn": 27, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 18, "endline": 38, "endcolumn": 27, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 32, "endline": 38, "endcolumn": 34, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 32, "endline": 38, "endcolumn": 33, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 32, "endline": 38, "endcolumn": 34, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 18, "endline": 38, "endcolumn": 35, "stmt": [38,5,38,35] },
    { "module": "game", "line": 38, "column": 5, "endline": 38, "endcolumn": 16, "stmt": [38,5,38,35] },
    { "module": "game", "line": 41, "column": 13, "endline": 41, "endcolumn": 13, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 16, "endline": 41, "endcolumn": 20, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 13, "endline": 41, "endcolumn": 20, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 13, "endline": 41, "endcolumn": 20, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 9, "endline": 41, "endcolumn": 21, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 26, "endline": 41, "endcolumn": 26, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 9, "endline": 41, "endcolumn": 26, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 8, "endline": 41, "endcolumn": 52, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 38, "endline": 41, "endcolumn": 38, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 41, "endline": 41, "endcolumn": 45, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 38, "endline": 41, "endcolumn": 45, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 38, "endline": 41, "endcolumn": 45, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 34, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 51, "endline": 41, "endcolumn": 51, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 34, "endline": 41, "endcolumn": 51, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 29, "endline": 41, "endcolumn": 31, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 8, "endline": 41, "endcolumn": 52, "stmt": [41,5,41,53] },
    { "module": "game", "line": 41, "column": 5, "endline": 41, "endcolumn": 6, "stmt": [41,5,41,53] },
    { "module": "game", "line": 42, "column": 17, "endline": 42, "endcolumn": 17, "stmt": [42,9,42,31] },
    { "module": "game", "line": 42, "column": 20, "endline": 42, "endcolumn": 30, "stmt": [42,9,42,31] },
    { "module": "game", "line": 42, "column": 17, "endline": 42, "endcolumn": 30, "stmt": [42,9,42,31] },
    { "module": "game", "line": 42, "column": 9, "endline": 42, "endcolumn": 31, "stmt": [42,9,42,31] },
    { "module": "game", "line": 42, "column": 9, "endline": 42, "endcolumn": 31, "stmt": [42,9,42,31] },
    { "module": "game", "line": 46, "column": 16, "endline": 46, "endcolumn": 16, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 19, "endline": 46, "endcolumn": 23, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 16, "endline": 46, "endcolumn": 23, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 16, "endline": 46, "endcolumn": 23, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 12, "endline": 46, "endcolumn": 24, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 33, "endline": 46, "endcolumn": 33, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 36, "endline": 46, "endcolumn": 40, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 33, "endline": 46, "endcolumn": 40, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 33, "endline": 46, "endcolumn": 40, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 29, "endline": 46, "endcolumn": 41, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 12, "endline": 46, "endcolumn": 41, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 11, "endline": 46, "endcolumn": 117, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 52, "endline": 46, "endcolumn": 52, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 55, "endline": 46, "endcolumn": 59, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 52, "endline": 46, "endcolumn": 59, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 52, "endline": 46, "endcolumn": 59, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 48, "endline": 46, "endcolumn": 60, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 65, "endline": 46, "endcolumn": 65, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 48, "endline": 46, "endcolumn": 65, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 11, "endline": 46, "endcolumn": 117, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 73, "endline": 46, "endcolumn": 74, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 83, "endline": 46, "endcolumn": 83, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 86, "endline": 46, "endcolumn": 90, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 83, "endline": 46, "endcolumn": 90, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 83, "endline": 46, "endcolumn": 90, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 73, "endline": 46, "endcolumn": 90, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 73, "endline": 46, "endcolumn": 90, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 72, "endline": 46, "endcolumn": 116, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 98, "endline": 46, "endcolumn": 99, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 108, "endline": 46, "endcolumn": 108, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 111, "endline": 46, "endcolumn": 115, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 108, "endline": 46, "endcolumn": 115, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 108, "endline": 46, "endcolumn": 115, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 98, "endline": 46, "endcolumn": 115, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 98, "endline": 46, "endcolumn": 115, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 93, "endline": 46, "endcolumn": 95, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 72, "endline": 46, "endcolumn": 116, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 44, "endline": 46, "endcolumn": 45, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 11, "endline": 46, "endcolumn": 117, "stmt": [46,5,46,118] },
    { "module": "game", "line": 46, "column": 5, "endline": 46, "endcolumn": 9, "stmt": [46,5,46,118] },
    { "module": "game", "line": 47, "column": 14, "endline": 47, "endcolumn": 34, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 15, "endline": 47, "endcolumn": 15, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 18, "endline": 47, "endcolumn": 24, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 15, "endline": 47, "endcolumn": 24, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 14, "endline": 47, "endcolumn": 34, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 28, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 31, "endline": 47, "endcolumn": 34, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 28, "endline": 47, "endcolumn": 34, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 14, "endline": 47, "endcolumn": 34, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 9, "endline": 47, "endcolumn": 35, "stmt": [47,9,47,35] },
    { "module": "game", "line": 47, "column": 9, "endline": 47, "endcolumn": 35, "stmt": [47,9,47,35] },
    { "module": "game", "line": 46, "column": 5, "endline": 46, "endcolumn": 118, "stmt": [46,5,46,118] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 14, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 17, "endline": 50, "endcolumn": 21, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 21, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 21, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 24, "endline": 50, "endcolumn": 24, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 27, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 24, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 24, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 14, "endline": 50, "endcolumn": 31, "stmt": [50,5,50,32] },
    { "module": "game", "line": 50, "column": 5, "endline": 50, "endcolumn": 11, "stmt": [50,5,50,32] },
    { "module": "game", "line": 52, "column": 14, "endline": 52, "endcolumn": 14, "stmt": [52,5,52,21] },
    { "module": "game", "line": 52, "column": 14, "endline": 52, "endcolumn": 14, "stmt": [52,5,52,21] },
    { "module": "game", "line": 52, "column": 17, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "game", "line": 52, "column": 14, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "game", "line": 52, "column": 5, "endline": 52, "endcolumn": 21, "stmt": [52,5,52,21] },
    { "module": "game", "line": 52, "column": 5, "endline": 52, "endcolumn": 21, "stmt": [52,5,52,21] },
    { "module": "game", "line": 35, "column": 1, "endline": 35, "endcolumn": 35, "stmt": [35,1,35,35] },
    { "module": "game", "line": 35, "column": 1, "endline": 35, "endcolumn": 35, "stmt": [35,1,35,35] },
    { "module": "game", "line": 54, "column": 1, "endline": 54, "endcolumn": 3, "stmt": [54,1,54,22] },
    { "module": "game", "line": 54, "column": 1, "endline": 54, "endcolumn": 22, "stmt": [54,1,54,22] },
    { "module": "game", "line": 55, "column": 14, "endline": 55, "endcolumn": 14, "stmt": [55,5,55,21] },
    { "module": "game", "line": 55, "column": 17, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,21] },
    { "module": "game", "line": 55, "column": 14, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,21] },
    { "module": "game", "line": 55, "column": 5, "endline": 55, "endcolumn": 21, "stmt": [55,5,55,21] },
    { "module": "game", "line": 55, "column": 5, "endline": 55, "endcolumn": 21, "stmt": [55,5,55,21] },
    { "module": "game", "line": 58, "column": 8, "endline": 58, "endcolumn": 9, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 14, "endline": 58, "endcolumn": 14, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 17, "endline": 58, "endcolumn": 21, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 14, "endline": 58, "endcolumn": 21, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 14, "endline": 58, "endcolumn": 21, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 8, "endline": 58, "endcolumn": 21, "stmt": [58,5,58,22] },
    { "module": "game", "line": 58, "column": 5, "endline": 58, "endcolumn": 6, "stmt": [58,5,58,22] },
    { "module": "game", "line": 59, "column": 9, "endline": 59, "endcolumn": 9, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 12, "endline": 59, "endcolumn": 16, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 9, "endline": 59, "endcolumn": 16, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 38, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 27, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 30, "endline": 59, "endcolumn": 34, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 34, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 34, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 38, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 37, "endline": 59, "endcolumn": 38, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 37, "endline": 59, "endcolumn": 38, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 27, "endline": 59, "endcolumn": 38, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 20, "endline": 59, "endcolumn": 39, "stmt": [59,9,59,39] },
    { "module": "game", "line": 59, "column": 9, "endline": 59, "endcolumn": 18, "stmt": [59,9,59,39] },
    { "module": "game", "line": 58, "column": 5, "endline": 58, "endcolumn": 22, "stmt": [58,5,58,22] },
    { "module": "game", "line": 60, "column": 10, "endline": 60, "endcolumn": 11, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 16, "endline": 60, "endcolumn": 16, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 19, "endline": 60, "endcolumn": 23, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 16, "endline": 60, "endcolumn": 23, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 16, "endline": 60, "endcolumn": 23, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 10, "endline": 60, "endcolumn": 23, "stmt": [60,5,60,24] },
    { "module": "game", "line": 60, "column": 5, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,24] },
    { "module": "game", "line": 61, "column": 9, "endline": 61, "endcolumn": 9, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 12, "endline": 61, "endcolumn": 16, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 9, "endline": 61, "endcolumn": 16, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 35, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 24, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 27, "endline": 61, "endcolumn": 31, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 31, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 31, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 35, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 34, "endline": 61, "endcolumn": 35, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 24, "endline": 61, "endcolumn": 35, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 20, "endline": 61, "endcolumn": 36, "stmt": [61,9,61,36] },
    { "module": "game", "line": 61, "column": 9, "endline": 61, "endcolumn": 18, "stmt": [61,9,61,36] },
    { "module": "game", "line": 62, "column": 9, "endline": 62, "endcolumn": 9, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 12, "endline": 62, "endcolumn": 16, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 9, "endline": 62, "endcolumn": 16, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 38, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 27, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 30, "endline": 62, "endcolumn": 34, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 34, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 34, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 38, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 37, "endline": 62, "endcolumn": 38, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 37, "endline": 62, "endcolumn": 38, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 27, "endline": 62, "endcolumn": 38, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 20, "endline": 62, "endcolumn": 39, "stmt": [62,9,62,39] },
    { "module": "game", "line": 62, "column": 9, "endline": 62, "endcolumn": 18, "stmt": [62,9,62,39] },
    { "module": "game", "line": 66, "column": 13, "endline": 66, "endcolumn": 13, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 13, "endline": 66, "endcolumn": 13, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 16, "endline": 66, "endcolumn": 20, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 13, "endline": 66, "endcolumn": 20, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 13, "endline": 66, "endcolumn": 20, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 9, "endline": 66, "endcolumn": 21, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 26, "endline": 66, "endcolumn": 26, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 9, "endline": 66, "endcolumn": 26, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 8, "endline": 66, "endcolumn": 52, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 38, "endline": 66, "endcolumn": 38, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 41, "endline": 66, "endcolumn": 45, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 38, "endline": 66, "endcolumn": 45, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 38, "endline": 66, "endcolumn": 45, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 34, "endline": 66, "endcolumn": 46, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 51, "endline": 66, "endcolumn": 51, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 34, "endline": 66, "endcolumn": 51, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 29, "endline": 66, "endcolumn": 31, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 8, "endline": 66, "endcolumn": 52, "stmt": [66,5,66,53] },
    { "module": "game", "line": 66, "column": 5, "endline": 66, "endcolumn": 6, "stmt": [66,5,66,53] },
    { "module": "game", "line": 67, "column": 17, "endline": 67, "endcolumn": 17, "stmt": [67,9,67,31] },
    { "module": "game", "line": 67, "column": 20, "endline": 67, "endcolumn": 30, "stmt": [67,9,67,31] },
    { "module": "game", "line": 67, "column": 17, "endline": 67, "endcolumn": 30, "stmt": [67,9,67,31] },
    { "module": "game", "line": 67, "column": 9, "endline": 67, "endcolumn": 31, "stmt": [67,9,67,31] },
    { "module": "game", "line": 67, "column": 9, "endline": 67, "endcolumn": 31, "stmt": [67,9,67,31] },
    { "module": "game", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,5,69,21] },
    { "module": "game", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,5,69,21] },
    { "module": "game", "line": 69, "column": 17, "endline": 69, "endcolumn": 20, "stmt": [69,5,69,21] },
    { "module": "game", "line": 69, "column": 14, "endline": 69, "endcolumn": 20, "stmt": [69,5,69,21] },
    { "module": "game", "line": 69, "column": 5, "endline": 69, "endcolumn": 21, "stmt": [69,5,69,21] },
    { "module": "game", "line": 69, "column": 5, "endline": 69, "endcolumn": 21, "stmt": [69,5,69,21] },
    { "module": "game", "line": 54, "column": 1, "endline": 54, "endcolumn": 22, "stmt": [54,1,54,22] },
    { "module": "__main__", "line": 4, "column": 15, "endline": 4, "endcolumn": 16, "stmt": [4,1,4,16] },
    { "module": "__main__", "line": 4, "column": 11, "endline": 4, "endcolumn": 16, "stmt": [4,1,4,16] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 9, "stmt": [4,1,4,16] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,17] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 17, "stmt": [5,1,5,17] },
    { "module": "__main__", "line": 6, "column": 36, "endline": 6, "endcolumn": 49, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 37, "endline": 6, "endcolumn": 43, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 36, "endline": 6, "endcolumn": 49, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 46, "endline": 6, "endcolumn": 49, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 36, "endline": 6, "endcolumn": 49, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 26, "endline": 6, "endcolumn": 50, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 6, "column": 5, "endline": 6, "endcolumn": 24, "stmt": [6,5,6,50] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 38, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 38, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 16, "endline": 7, "endcolumn": 19, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 25, "endline": 7, "endcolumn": 29, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 25, "endline": 7, "endcolumn": 29, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 33, "endline": 7, "endcolumn": 37, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 33, "endline": 7, "endcolumn": 37, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 25, "endline": 7, "endcolumn": 37, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 16, "endline": 7, "endcolumn": 38, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 14, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 38, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 38, "stmt": [7,9,7,38] },
    { "module": "__main__", "line": 9, "column": 16, "endline": 9, "endcolumn": 29, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 17, "endline": 9, "endcolumn": 23, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 16, "endline": 9, "endcolumn": 29, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 26, "endline": 9, "endcolumn": 29, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 26, "endline": 9, "endcolumn": 29, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 16, "endline": 9, "endcolumn": 29, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,30] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 17, "stmt": [5,1,5,17] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 25, "stmt": [12,1,12,35] },
    { "module": "__main__", "line": 12, "column": 28, "endline": 12, "endcolumn": 34, "stmt": [12,1,12,35] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 35, "stmt": [12,1,12,35] },
    { "module": "__main__", "line": 12, "column": 1, "endline": 12, "endcolumn": 35, "stmt": [12,1,12,35] },
    { "module": "__main__", "line": 12, "column": 1, "endline": 12, "endcolumn": 35, "stmt": [12,1,12,35] },
    { "module": "__main__", "line": 14, "column": 13, "endline": 14, "endcolumn": 13, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 14, "column": 18, "endline": 14, "endcolumn": 25, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 14, "column": 13, "endline": 14, "endcolumn": 25, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 14, "column": 1, "endline": 14, "endcolumn": 3, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 14, "column": 1, "endline": 14, "endcolumn": 3, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 14, "column": 1, "endline": 14, "endcolumn": 3, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 16, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 15, "column": 18, "endline": 15, "endcolumn": 19, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 15, "column": 18, "endline": 15, "endcolumn": 19, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 20, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 15, "column": 5, "endline": 15, "endcolumn": 20, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 15, "column": 5, "endline": 15, "endcolumn": 20, "stmt": [15,5,15,20] },
    { "module": "__main__", "line": 14, "column": 26, "endline": 14, "endcolumn": 26, "stmt": [14,1,14,26] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 15, "endcolumn": 26, "stmt": [1,1,15,26] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 15, "endcolumn": 26, "stmt": [1,1,15,26] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 15, "endcolumn": 26, "stmt": [1,1,15,26] }
  ]
}
